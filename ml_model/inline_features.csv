line_number,line,isLOI,is_keyword,length,is_regular_expression,is_mathematical_calculation,is_collection_manipulation,is_string_manipulation,is_bit_manipulation,is_variable_assignment
0,from inline import Here,0,1,23,0,0,0,0,0,0
1,from typing import List,0,1,23,0,0,0,0,0,0
3,"def missingRolls(self, rolls: List[int], mean: int, n: int) -> List[int]:",0,1,73,0,1,0,0,0,0
4,m = len(rolls),0,0,14,0,0,0,0,0,1
5,curSum = sum(rolls),0,0,19,0,0,0,0,0,1
6,missingSum = mean * (n + m) - curSum,0,0,36,0,1,0,0,0,1
9,if missingSum < n or missingSum > 6*n: return [],0,1,48,0,1,0,0,0,0
11,"part, rem = divmod(missingSum, n)",0,0,33,0,0,0,0,0,1
12,ans = [part] * n,0,0,16,0,1,0,0,0,1
13,for i in range(rem):,0,1,20,0,0,0,0,0,0
15,"    return ans
",0,1,15,0,0,0,0,0,0
2,import math,0,1,11,0,0,0,0,0,0
3,from inline import Here,0,1,23,0,0,0,0,0,0
5,MAX_INT = 50,0,0,12,0,0,0,0,0,1
7,class Solution(object):,0,1,23,0,0,0,0,0,0
8,"def divide(self, dividend, divisor):",0,1,36,0,0,0,0,0,0
9,if divisor == 0:,0,1,16,0,0,0,0,0,0
10,return MAX_INT,0,1,14,0,0,0,0,0,0
11,if dividend == 0:,0,1,17,0,0,0,0,0,0
12,return 0,0,1,8,0,0,0,0,0,0
13,isPositive = (dividend < 0) == (divisor < 0),0,0,44,0,0,0,0,0,0
14,print(isPositive),1,0,17,0,0,0,0,0,0
17,m = abs(dividend),0,0,17,0,0,0,0,0,1
18,n = abs(divisor),0,0,16,0,0,0,0,0,1
20,res = math.log(m) - math.log(n),0,0,31,0,1,0,0,0,1
21,res = int(math.exp(res)),0,0,24,0,1,0,0,0,1
22,if isPositive:,0,1,14,0,0,0,0,0,0
23,"return min(res, 2147483647)",0,1,27,0,0,0,0,0,0
24,"return max(0 - res, -2147483648)",0,1,32,0,1,0,0,0,0
26,"Solution.divide(""s"", 5, 3)",0,0,26,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
1,from typing import List,0,1,23,0,0,0,0,0,0
3,"def minCostConnectPoints(self, points: List[List[int]]) -> int:",0,1,63,0,1,0,0,0,0
4,N = len(points),0,0,15,0,0,0,0,0,1
5,adj = {i: [] for i in range(N)}  ,0,1,33,0,0,0,0,0,1
6,for i in range(N):,0,1,18,0,0,0,0,0,0
7,"x1, y1 = points[i]",0,0,18,0,0,0,0,0,1
8,"for j in range(i + 1, N):",0,1,25,0,1,0,0,0,0
9,"x2, y2 = points[j]",0,0,18,0,0,0,0,0,1
10,dist = abs(x1 - x2) + abs(y1 - y2),1,0,34,0,1,0,0,0,1
12,"adj[i].append([dist, j])",0,0,24,0,0,1,0,0,0
13,"adj[j].append([dist, i])",0,0,24,0,0,1,0,0,0
16,res = 0,0,0,7,0,0,0,0,0,1
17,visit = set(),0,0,13,0,0,0,0,0,1
18,"minH = [[0, 0]]  ",0,0,17,0,0,0,0,0,1
19,while len(visit) < N:,0,1,21,0,0,0,0,0,0
20,"cost, i = heapq.heappop(minH)",0,0,29,0,0,1,0,0,1
21,if i in visit:,0,1,14,0,0,0,0,0,0
22,continue,0,1,8,0,0,0,0,0,0
23,res += cost,0,0,11,0,1,0,0,0,1
24,visit.add(i),0,0,12,0,0,0,0,0,0
25,"for neiCost, nei in adj[i]:",0,1,27,0,0,0,0,0,0
26,if nei not in visit:,0,1,20,0,0,0,0,0,0
28,"        return res
",0,1,19,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
1,from typing import List,0,1,23,0,0,0,0,0,0
3,"def maxArea(self, height: List[int]) -> int:",0,1,44,0,1,0,0,0,0
4,"l, r = 0, len(height) - 1",0,0,25,0,1,0,0,0,1
5,res = 0,0,0,7,0,0,0,0,0,1
6,while l < r:,0,1,12,0,0,0,0,0,0
7,"res = max(res, min(height[l], height[r]) * (r - l))",0,0,51,0,1,0,0,0,1
10,if height[l] < height[r]:,0,1,25,0,0,0,0,0,0
11,l += 1,0,0,6,0,1,0,0,0,1
12,elif height[r] <= height[l]:,0,1,28,0,0,0,0,0,1
14,"    return res
",0,1,15,0,0,0,0,0,0
2,from inline import Here,0,1,23,0,0,0,0,0,0
4,class Solution(object):,0,1,23,0,0,0,0,0,0
5,"def rotate(self, matrix):",0,1,25,0,0,0,0,0,0
6,"""""""",0,0,3,0,0,0,0,0,0
7,:type matrix: List[List[int]],0,0,29,0,0,0,0,0,0
8,":rtype: void Do not return anything, modify matrix in-place instead.",0,1,68,0,1,0,0,0,0
9,"""""""",0,0,3,0,0,0,0,0,0
11,if matrix is None or len(matrix) == 1:,1,1,38,0,0,0,0,0,0
13,return,0,1,6,0,0,0,0,0,0
14,ls = len(matrix),0,0,16,0,0,0,0,0,1
15,for i in range(ls / 2):,0,1,23,0,1,0,0,0,0
17,"begin, end = i, ls - 1 - i",0,0,26,0,1,0,0,0,1
18,for k in range(ls - 2 * i - 1):,0,1,31,0,1,0,0,0,0
19,temp = matrix[end - k][begin],0,0,29,0,1,0,0,0,1
20,matrix[end - k][begin] = matrix[end][end - k],0,0,45,0,1,0,0,0,1
21,matrix[end][end - k] = matrix[begin + k][end],0,0,45,0,1,0,0,0,1
22,matrix[begin + k][end] = matrix[begin][begin + k],0,0,49,0,1,0,0,0,1
23,matrix[begin][begin + k] = temp,0,0,31,0,1,0,0,0,1
24,return,0,1,6,0,0,0,0,0,0
26,if __name__ == '__main__':,0,1,26,0,0,0,0,0,0
28,s = Solution(),0,0,14,0,0,0,0,0,1
29,"s.rotate([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]])",0,0,58,0,0,0,0,0,0
32,"
",0,0,1,0,0,0,0,0,0
0,from typing import List,0,1,23,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
2,import math,0,1,11,0,0,0,0,0,0
4,"def minEatingSpeed(self, piles: List[int], h: int) -> int:",0,1,58,0,1,0,0,0,0
5,"l, r = 1, max(piles)",0,0,20,0,0,0,0,0,1
6,res = max(piles),0,0,16,0,0,0,0,0,1
7,while l <= r:,0,1,13,0,0,0,0,0,1
8,k = (l + r) // 2,0,0,16,0,1,0,0,0,1
9,totalTime = 0,0,0,13,0,0,0,0,0,1
10,for p in piles:,0,1,15,0,0,0,0,0,0
11,totalTime += math.ceil(p / k),0,0,29,0,1,0,0,0,1
14,if totalTime <= h:,0,1,18,0,0,0,0,0,1
15,"res = min(res, k)",0,0,17,0,0,0,0,0,1
16,r = k - 1,0,0,9,0,1,0,0,0,1
17,else:,0,1,5,0,0,0,0,0,0
19,"    return res
",0,1,15,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
1,from typing import List,0,1,23,0,0,0,0,0,0
3,"def search(self, nums: List[int], target: int) -> int:",0,1,54,0,1,0,0,0,0
4,"l, r = 0, len(nums) - 1",0,0,23,0,1,0,0,0,1
6,while l <= r:,0,1,13,0,0,0,0,0,1
7,m = l + ((r - l) // 2),0,0,22,0,1,0,0,0,1
10,if nums[m] > target:,0,1,20,0,0,0,0,0,0
11,r = m - 1,0,0,9,0,1,0,0,0,1
12,elif nums[m] < target:,0,1,22,0,0,0,0,0,0
13,l = m + 1,0,0,9,0,1,0,0,0,1
14,else:,0,1,5,0,0,0,0,0,0
16,"    return -1
",0,1,14,0,1,0,0,0,0
2,import math,0,1,11,0,0,0,0,0,0
3,from inline import Here,0,1,23,0,0,0,0,0,0
5,MAX_INT = 50,0,0,12,0,0,0,0,0,1
7,class Solution(object):,0,1,23,0,0,0,0,0,0
8,"def divide(self, dividend, divisor):",0,1,36,0,0,0,0,0,0
9,if divisor == 0:,0,1,16,0,0,0,0,0,0
10,return MAX_INT,0,1,14,0,0,0,0,0,0
11,if dividend == 0:,0,1,17,0,0,0,0,0,0
12,return 0,0,1,8,0,0,0,0,0,0
13,isPositive = (dividend < 0) == (divisor < 0),0,0,44,0,0,0,0,0,0
14,print(isPositive),1,0,17,0,0,0,0,0,0
17,m = abs(dividend),0,0,17,0,0,0,0,0,1
18,n = abs(divisor),0,0,16,0,0,0,0,0,1
20,res = math.log(m) - math.log(n),0,0,31,0,1,0,0,0,1
21,res = int(math.exp(res)),0,0,24,0,1,0,0,0,1
22,if isPositive:,0,1,14,0,0,0,0,0,0
23,"return min(res, 2147483647)",0,1,27,0,0,0,0,0,0
24,"return max(0 - res, -2147483648)",0,1,32,0,1,0,0,0,0
26,"Solution.divide(""s"", 5, 3)",0,0,26,0,0,0,0,0,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
4,"text = ""This is filler text.""",0,0,29,0,0,0,0,0,1
5,"matches = re.findall(r'\b\w{3}\b' , text)",0,0,41,1,0,0,0,0,1
9,"example_list_from_file = ['const button = (""",0,1,44,0,0,0,0,0,0
10,"'const icon = (""",0,0,16,0,0,0,0,0,1
11,"'const audio = (""audio"");']",0,0,27,0,0,0,0,0,1
12,str_output = [],0,0,15,0,0,0,0,0,1
13,for i in range(len(example_list_from_file)):,0,1,44,0,0,0,0,0,0
14,"str_output.append(re.sub(r'(?is)=.\(', '= document.querySelector(', example_list_from_file[i]))",0,1,95,1,0,1,0,0,0
18,pattern = '',0,0,12,0,0,0,0,0,1
19,matched = [],0,0,12,0,0,0,0,0,1
20,word_list = [],0,0,14,0,0,0,0,0,1
21,"matched = list(filter(re.compile(pattern).match, word_list))",0,0,60,1,0,0,0,0,1
26,"find = re.search(pattern, text)",1,0,31,1,0,0,0,0,1
30,"result = re.split(pattern, text, 1)
",0,0,36,1,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def logit_deformatter(string):,0,1,30,0,0,0,1,0,0
3,"r""""""",0,0,4,0,0,0,0,0,0
4,Parser to convert string as r'$\mathdefault{1.41\cdot10^{-4}}$' in,0,1,66,0,1,0,0,1,0
5,"float 1.41e-4, as '0.5' or as r'$\mathdefault{\frac{1}{2}}$' in float",0,1,69,0,1,0,0,0,0
6,"0.5,",0,0,4,0,0,0,0,0,0
7,"""""""",0,0,3,0,0,0,0,0,0
8,match = re.match(,0,0,17,1,0,0,0,0,1
9,"r""[^\d]*""",0,0,9,0,1,0,0,1,0
10,"r""(?P<comp>1[-\N{Minus Sign}])?""",0,0,32,0,1,0,0,0,0
11,"r""(?P<mant>\d*\.?\d*)?""",0,0,23,0,1,0,0,0,0
12,"r""(?:\\cdot)?""",0,0,14,0,0,0,0,0,0
13,"r""(?:10\^\{(?P<expo>[-\N{Minus Sign}]?\d*)})?""",0,0,46,0,1,0,0,1,0
14,"r""[^\d]*$"",",0,0,11,0,1,0,0,1,0
15,"string,",0,0,7,0,0,0,0,0,0
16,),1,0,1,0,0,0,0,0,0
18,if match:,0,1,9,0,0,0,0,0,0
19,"comp = match[""comp""] is not None",0,0,32,0,0,0,0,0,1
20,"mantissa = float(match[""mant""]) if match[""mant""] else 1",0,1,55,0,0,0,0,0,1
21,expo = (,0,0,8,0,0,0,0,0,1
22,"int(match[""expo""].replace(""\N{Minus Sign}"", ""-""))",0,0,49,0,1,0,1,0,0
23,"if match[""expo""] is not None",0,1,28,0,0,0,0,0,0
24,else 0,0,1,6,0,0,0,0,0,0
25,),0,0,1,0,0,0,0,0,0
26,value = mantissa * 10**expo,0,0,27,0,1,0,0,0,1
27,"if match[""mant""] or match[""expo""] is not None:",0,1,46,0,0,0,0,0,0
28,if comp:,0,1,8,0,0,0,0,0,0
29,return 1 - value,0,1,16,0,1,0,0,0,0
30,return value,0,1,12,0,0,0,0,0,0
31,"match = re.match(r""[^\d]*\\frac\{(?P<num>\d+)\}\{(?P<deno>\d+)\}[^\d]*$"", string)",1,0,81,1,1,0,0,1,1
33,if match:,0,1,9,0,0,0,0,0,0
34,"num, deno = float(match[""num""]), float(match[""deno""])",0,0,53,0,0,0,0,0,1
36,"    raise ValueError(""Not formatted by LogitFormatter"")
",0,1,56,0,0,0,1,0,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
4,"_curly_re = re.compile(r""(.*?)\{(.+?)\}(.*)"")",0,0,45,1,1,0,0,0,1
7,"def text_to_sequence(text, cleaner_names):",0,1,42,0,0,0,0,0,0
8,"""""""Converts a string of text to a sequence of IDs corresponding to the symbols in the text.",0,0,91,0,0,0,0,0,0
10,The text can optionally have ARPAbet sequences enclosed in curly braces embedded,0,0,80,0,0,0,0,0,0
11,"in it. For example, ""Turn left on {HH AW1 S S T AH0 N} Street.""",0,0,63,0,0,0,0,0,0
13,Args:,0,0,5,0,0,0,0,0,0
14,text: string to convert to a sequence,0,0,37,0,0,0,0,0,0
15,cleaner_names: names of the cleaner functions to run the text through,0,0,69,0,0,0,0,0,0
17,Returns:,0,0,8,0,0,0,0,0,0
18,List of integers corresponding to the symbols in the text,0,0,57,0,0,0,0,0,0
19,"""""""",0,0,3,0,0,0,0,0,0
20,sequence = [],0,0,13,0,0,0,0,0,1
23,while len(text):,0,1,16,0,0,0,0,0,0
24,m = _curly_re.match(text),1,0,25,1,0,0,0,0,1
26,if not m:,0,1,9,0,0,0,0,0,0
27,"sequence += _symbols_to_sequence(_clean_text(text, cleaner_names))",0,0,66,0,1,0,0,0,1
28,break,0,1,5,0,0,0,0,0,0
29,"sequence += _symbols_to_sequence(_clean_text(m.group(1), cleaner_names))",0,0,72,0,1,0,0,0,1
30,sequence += _arpabet_to_sequence(m.group(2)),0,0,44,0,1,0,0,0,1
31,text = m.group(3),0,0,17,0,0,0,0,0,1
35,"    return sequence
",0,1,20,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def _tokenize(data: bytes, skip_ws: bool):",0,1,42,0,0,0,0,0,0
3,"""""""",0,0,3,0,0,0,0,0,0
4,A generator that produces _Token instances from Type-1 font code.,0,1,65,0,1,0,0,0,0
6,The consumer of the generator may send an integer to the tokenizer to,0,0,69,0,0,0,0,0,0
7,indicate that the next token should be _BinaryToken of the given length.,0,0,72,0,0,0,0,0,0
9,Parameters,0,0,10,0,0,0,0,0,0
10,----------,0,0,10,0,1,0,0,0,0
11,data : bytes,0,0,12,0,0,0,0,0,0
12,The data of the font to tokenize.,0,0,33,0,0,0,0,0,0
14,skip_ws : bool,0,0,14,0,0,0,0,0,0
15,"If true, the generator will drop any _WhitespaceTokens from the output.",0,1,71,0,0,0,0,0,0
16,"""""""",0,0,3,0,0,0,0,0,0
17,"text = data.decode('ascii', 'replace')",0,1,38,0,0,0,1,0,1
18,whitespace_or_comment_re = re.compile(r'[\0\t\r\f\n ]+|%[^\r\n]*'),0,0,66,1,1,0,0,1,1
19,"token_re = re.compile(r'/{0,2}[^]\0\t\r\f\n ()<>{}/%[]+')",0,0,57,1,1,0,0,1,1
20,instring_re = re.compile(r'[()\\]'),0,0,35,1,0,0,0,0,1
21,hex_re = re.compile(r'^<[0-9a-fA-F\0\t\r\f\n ]*>$'),0,0,51,1,1,0,0,1,1
22,"oct_re = re.compile(r'[0-7]{1,3}')",0,0,34,1,1,0,0,0,1
23,pos = 0,0,0,7,0,0,0,0,0,1
24,next_binary = None,0,0,18,0,0,0,0,0,1
26,while pos < len(text):,0,1,22,0,0,0,0,0,0
27,if next_binary is not None:,0,1,27,0,0,0,0,0,0
28,n = next_binary,0,0,15,0,0,0,0,0,1
29,"next_binary = (yield _BinaryToken(pos, data[pos:pos+n]))",0,1,56,0,1,0,0,0,1
30,pos += n,0,0,8,0,1,0,0,0,1
31,continue,0,1,8,0,0,0,0,0,0
32,"match = whitespace_or_comment_re.match(text, pos)",1,0,49,1,0,0,0,0,1
34,if match:,0,1,9,0,0,0,0,0,0
35,if not skip_ws:,0,1,15,0,0,0,0,0,0
36,"next_binary = (yield _WhitespaceToken(pos, match.group()))",0,1,58,0,0,0,0,0,1
37,pos = match.end(),0,0,17,0,0,0,0,0,1
38,elif text[pos] == '(':,0,1,22,0,0,0,0,0,0
44,start = pos,0,0,11,0,0,0,0,0,1
45,pos += 1,0,0,8,0,1,0,0,0,1
46,depth = 1,0,0,9,0,0,0,0,0,1
47,while depth:,0,1,12,0,0,0,0,0,0
48,"match = instring_re.search(text, pos)",0,0,37,1,0,0,0,0,1
49,if match is None:,0,1,17,0,0,0,0,0,0
50,raise ValueError(,0,1,17,0,0,0,0,0,0
51,f'Unterminated string starting at {start}'),0,0,43,0,0,0,0,0,0
52,pos = match.end(),0,0,17,0,0,0,0,0,1
53,if match.group() == '(':,0,1,24,0,0,0,0,0,0
54,depth += 1,0,0,10,0,1,0,0,0,1
55,elif match.group() == ')':,0,1,26,0,0,0,0,0,0
56,depth -= 1,0,0,10,0,1,0,0,0,1
57,else:  ,0,1,7,0,0,0,0,0,0
58,char = text[pos],0,0,16,0,0,0,0,0,1
59,if char in r'\()nrtbf':,0,1,23,0,0,0,0,0,0
60,pos += 1,0,0,8,0,1,0,0,0,1
61,else:,0,1,5,0,0,0,0,0,0
62,"octal = oct_re.match(text, pos)",0,0,31,1,0,0,0,0,1
63,if octal:,0,1,9,0,0,0,0,0,0
64,pos = octal.end(),0,0,17,0,0,0,0,0,1
65,else:,0,1,5,0,0,0,0,0,0
66,pass  ,0,1,6,0,0,0,0,0,0
67,"next_binary = (yield _StringToken(start, text[start:pos]))",0,1,58,0,0,0,0,0,1
68,"elif text[pos:pos + 2] in ('<<', '>>'):",0,1,39,0,1,0,0,1,0
69,"next_binary = (yield _DelimiterToken(pos, text[pos:pos + 2]))",0,1,61,0,1,0,0,0,1
70,pos += 2,0,0,8,0,1,0,0,0,1
71,elif text[pos] == '<':,0,1,22,0,0,0,0,0,0
72,start = pos,0,0,11,0,0,0,0,0,1
73,try:,0,1,4,0,0,0,0,0,0
74,"pos = text.index('>', pos) + 1",0,0,30,0,1,0,0,0,1
75,except ValueError as e:,0,1,23,0,0,0,0,0,0
76,raise ValueError(f'Unterminated hex string starting at {start}',0,1,63,0,0,0,0,0,0
77,) from e,0,1,8,0,0,0,0,0,0
78,if not hex_re.match(text[start:pos]):,0,1,37,1,0,0,0,0,0
79,raise ValueError(f'Malformed hex string starting at {start}'),0,1,61,0,0,0,0,0,0
80,"next_binary = (yield _StringToken(pos, text[start:pos]))",0,1,56,0,0,0,0,0,1
81,else:,0,1,5,0,0,0,0,0,0
82,"match = token_re.match(text, pos)",0,0,33,1,0,0,0,0,1
83,if match:,0,1,9,0,0,0,0,0,0
84,raw = match.group(),0,0,19,0,0,0,0,0,1
85,if raw.startswith('/'):,0,1,23,0,1,0,0,0,0
86,"next_binary = (yield _NameToken(pos, raw))",0,1,42,0,0,0,0,0,1
87,"elif match.group() in ('true', 'false'):",0,1,40,0,0,0,0,0,0
88,"next_binary = (yield _BooleanToken(pos, raw))",0,1,45,0,0,0,0,0,1
89,else:,0,1,5,0,0,0,0,0,0
90,try:,0,1,4,0,0,0,0,0,0
91,float(raw),0,0,10,0,0,0,0,0,0
92,"next_binary = (yield _NumberToken(pos, raw))",0,1,44,0,0,0,0,0,1
93,except ValueError:,0,1,18,0,0,0,0,0,0
94,"next_binary = (yield _KeywordToken(pos, raw))",0,1,45,0,0,0,0,0,1
95,pos = match.end(),0,0,17,0,0,0,0,0,1
96,else:,0,1,5,0,0,0,0,0,0
98,                pos += 1,0,0,24,0,1,0,0,0,1
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
4,"text = ""This is filler text.""",0,0,29,0,0,0,0,0,1
5,"matches = re.findall(r'\b\w{3}\b' , text)",0,0,41,1,0,0,0,0,1
9,"example_list_from_file = ['const button = (""",0,1,44,0,0,0,0,0,0
10,"'const icon = (""",0,0,16,0,0,0,0,0,1
11,"'const audio = (""audio"");']",0,0,27,0,0,0,0,0,1
12,str_output = [],0,0,15,0,0,0,0,0,1
13,for i in range(len(example_list_from_file)):,0,1,44,0,0,0,0,0,0
14,"str_output.append(re.sub(r'(?is)=.\(', '= document.querySelector(', example_list_from_file[i]))",0,1,95,1,0,1,0,0,0
18,pattern = '',0,0,12,0,0,0,0,0,1
19,matched = [],0,0,12,0,0,0,0,0,1
20,word_list = [],0,0,14,0,0,0,0,0,1
21,"matched = list(filter(re.compile(pattern).match, word_list))",1,0,60,1,0,0,0,0,1
23,"['aback',",0,0,9,0,0,0,0,0,0
24,"'abase',",0,1,8,0,0,0,0,0,0
25,"'abate',",0,0,8,0,0,0,0,0,0
26,"'abbot',",0,0,8,0,0,0,0,0,0
27,"'abhor',",0,0,8,0,0,0,0,0,0
28,"'abide',",0,0,8,0,0,0,0,0,0
29,"'abled',",0,0,8,0,0,0,0,0,0
30,"'abuse',",0,0,8,0,0,0,0,0,0
31,"'above']).check_eq(matched, ['abase', 'abate', 'abide', 'abuse', 'above'])",0,1,74,0,0,0,0,0,0
35,"find = re.search(pattern, text)",0,0,31,1,0,0,0,0,1
39,"result = re.split(pattern, text, 1)
",0,0,36,1,0,0,0,0,1
5,import sys,0,1,10,0,0,0,0,0,0
6,import re,0,1,9,0,0,0,0,0,0
7,import random,0,1,13,0,0,0,0,0,0
8,from inline import Here,0,1,23,0,0,0,0,0,0
15,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
17,for iter in range(10):,0,1,22,0,0,0,0,0,0
18,"word = """"",0,0,9,0,0,0,0,0,1
19,"ans = """"",0,0,8,0,0,0,0,0,1
20,for n in range(5):,0,1,18,0,0,0,0,0,0
22,"ch = chr(97 + random.randint(0, 14))",0,0,36,0,1,0,0,0,1
23,word += ch,0,0,10,0,1,0,0,0,1
26,"if(not(ch in ('a', 'e', 'i', 'o', 'u'))):",0,1,41,0,0,0,0,0,0
27,ans += ch,0,0,9,0,1,0,0,0,1
29,"print(""remove_vowels(\"""" + word + ""\""):"")",0,0,41,0,1,1,0,0,0
30,"print(re.sub(""[aeiou]"", """", word) + ""\n"")",0,0,41,1,1,0,0,0,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
6,"result = re.findall(r""[a-zA-Z]"", text)",0,0,38,1,1,0,0,0,1
7,"print(""Letters: "", result)",0,0,26,0,0,0,0,0,0
9,"result = re.findall(r""\d"", text)",0,0,32,1,0,0,0,0,1
10,"print(""Digits: "", result)",0,0,25,0,0,0,0,0,0
13,"result = re.findall(r""\bs\w+"", text)",0,0,36,1,1,0,0,0,1
14,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
17,"result = re.findall(r""\w+e\b"", text)",0,0,36,1,1,0,0,0,1
18,"print(""Words ending with 'e': "", result)",0,0,40,0,0,0,0,0,0
21,"result = re.findall(r""\b\w*o\w*\b"", text)",1,0,41,1,1,0,0,0,1
23,"print(""Words containing 'o': "", result)",0,0,39,0,0,0,0,0,0
26,"result = re.findall(r""\b\w{4}\b"", text)",0,0,39,1,0,0,0,0,1
27,"print(""Words of length 4: "", result)",0,0,36,0,0,0,0,0,0
30,"result = re.sub(r""\s"", ""-"", text)",0,0,33,1,1,0,0,0,1
31,"print(""Text with whitespaces replaced: "", result)",0,0,49,0,0,0,1,0,0
34,"result = re.sub(r""is"", ""was"", text)",0,1,35,1,0,0,0,0,1
35,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
39,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def get_package_details(self, package):",0,1,39,0,0,0,0,0,0
4,raw_pkg_details = {},0,0,20,0,0,0,0,0,1
5,last_detail = None,0,1,18,0,0,0,0,0,1
6,for line in package.splitlines():,0,1,33,0,0,0,0,0,0
7,"m = re.match(r""([\w ]*[\w]) +: (.*)"", line)",1,0,43,1,1,0,0,0,1
9,if m:,0,1,5,0,0,0,0,0,0
10,last_detail = m.group(1),0,1,24,0,0,0,0,0,1
11,raw_pkg_details[last_detail] = m.group(2),0,1,41,0,0,0,0,0,1
12,else:,0,1,5,0,0,0,0,0,0
14,raw_pkg_details[last_detail] = (,0,1,32,0,0,0,0,0,1
15,"raw_pkg_details[last_detail] + ""  "" + line.lstrip()",0,1,51,0,1,0,0,0,0
16,),0,0,1,0,0,0,0,0,0
18,provides = None,0,0,15,0,0,0,0,0,1
19,"if raw_pkg_details[""Provides""] != ""None"":",0,1,41,0,0,0,0,0,1
20,"provides = [p.split(""="")[0] for p in raw_pkg_details[""Provides""].split(""  "")]",0,1,77,0,0,0,0,0,0
22,return {,0,1,8,0,0,0,0,0,0
23,"""name"": raw_pkg_details[""Name""],",0,0,32,0,0,0,0,0,0
24,"""version"": raw_pkg_details[""Version""],",0,0,38,0,0,0,0,0,0
25,"""arch"": raw_pkg_details[""Architecture""],",0,0,40,0,0,0,0,0,0
27,"    }
",0,0,6,0,0,0,0,0,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
4,"text = ""This is filler text.""",0,0,29,0,0,0,0,0,1
5,"matches = re.findall(r'\b\w{3}\b' , text)",0,0,41,1,0,0,0,0,1
9,"example_list_from_file = ['const button = (""",0,1,44,0,0,0,0,0,0
10,"'const icon = (""",0,0,16,0,0,0,0,0,1
11,"'const audio = (""audio"");']",0,0,27,0,0,0,0,0,1
12,str_output = [],0,0,15,0,0,0,0,0,1
13,for i in range(len(example_list_from_file)):,0,1,44,0,0,0,0,0,0
14,"str_output.append(re.sub(r'(?is)=.\(', '= document.querySelector(', example_list_from_file[i]))",0,1,95,1,0,1,0,0,0
18,pattern = '',0,0,12,0,0,0,0,0,1
19,matched = [],0,0,12,0,0,0,0,0,1
20,word_list = [],0,0,14,0,0,0,0,0,1
21,"matched = list(filter(re.compile(pattern).match, word_list))",0,0,60,1,0,0,0,0,1
26,"find = re.search(pattern, text)",0,0,31,1,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def __init__(self, declaration: str, check_fail: bool = True):",0,1,62,0,0,0,0,0,1
3,self.check_fail = check_fail,0,0,28,0,0,0,0,0,1
4,"m = re.match(r""(.+?)\s+(glfw[A-Z][a-zA-Z0-9]+)[(](.+)[)]$"", declaration)",1,0,72,1,1,0,0,0,1
6,if m is None:,0,1,13,0,0,0,0,0,0
7,"raise SystemExit(""Failed to parse "" + repr(declaration))",0,1,56,0,1,0,0,0,0
8,self.restype = m.group(1).strip(),0,0,33,0,0,0,0,0,1
9,self.name = m.group(2),0,0,22,0,0,0,0,0,1
10,"args = m.group(3).strip().split("","")",0,0,36,0,0,0,0,0,1
11,args = [x.strip() for x in args],0,1,32,0,0,0,0,0,1
12,self.args = [],0,0,14,0,0,0,0,0,1
13,for a in args:,0,1,14,0,0,0,0,0,0
14,"if a == ""void"":",0,1,15,0,0,0,0,0,0
15,continue,0,1,8,0,0,0,0,0,0
16,self.args.append(Arg(a)),0,0,24,0,0,1,0,0,0
18,"        self.args = [Arg(""void v"")]
",0,0,36,0,0,0,0,0,1
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
6,"result = re.findall(r""[a-zA-Z]"", text)",0,0,38,1,1,0,0,0,1
7,"print(""Letters: "", result)",0,0,26,0,0,0,0,0,0
9,"result = re.findall(r""\d"", text)",0,0,32,1,0,0,0,0,1
10,"print(""Digits: "", result)",0,0,25,0,0,0,0,0,0
13,"result = re.findall(r""\bs\w+"", text)",0,0,36,1,1,0,0,0,1
14,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
17,"result = re.findall(r""\w+e\b"", text)",0,0,36,1,1,0,0,0,1
18,"print(""Words ending with 'e': "", result)",0,0,40,0,0,0,0,0,0
21,"result = re.findall(r""\b\w*o\w*\b"", text)",0,0,41,1,1,0,0,0,1
22,"print(""Words containing 'o': "", result)",0,0,39,0,0,0,0,0,0
25,"result = re.findall(r""\b\w{4}\b"", text)",0,0,39,1,0,0,0,0,1
26,"print(""Words of length 4: "", result)",0,0,36,0,0,0,0,0,0
29,"result = re.sub(r""\s"", ""-"", text)",0,0,33,1,1,0,0,0,1
30,"print(""Text with whitespaces replaced: "", result)",0,0,49,0,0,0,1,0,0
33,"result = re.sub(r""is"", ""was"", text)",1,1,35,1,0,0,0,0,1
35,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
39,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import re,0,1,9,0,0,0,0,0,0
7,from inline import Here,0,1,23,0,0,0,0,0,0
14,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
16,"words = [""   hello"", "" world "", ""hi       i"", ""waddup"", "" hello world""]",0,0,71,0,0,0,0,0,1
18,for iter in range(len(words)):,0,1,30,0,0,0,0,0,0
19,"print(""'"" + re.sub(""^ *| *$"","""",words[iter]) + ""'"")",0,0,51,1,1,0,0,1,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
4,"text = ""This is filler text.""",0,0,29,0,0,0,0,0,1
5,"matches = re.findall(r'\b\w{3}\b' , text)",0,0,41,1,0,0,0,0,1
9,"example_list_from_file = ['const button = (""",0,1,44,0,0,0,0,0,0
10,"'const icon = (""",0,0,16,0,0,0,0,0,1
11,"'const audio = (""audio"");']",0,0,27,0,0,0,0,0,1
12,str_output = [],0,0,15,0,0,0,0,0,1
13,for i in range(len(example_list_from_file)):,0,1,44,0,0,0,0,0,0
14,"str_output.append(re.sub(r'(?is)=.\(', '= document.querySelector(', example_list_from_file[i]))",1,1,95,1,0,1,0,0,0
18,pattern = '',0,0,12,0,0,0,0,0,1
19,matched = [],0,0,12,0,0,0,0,0,1
20,word_list = [],0,0,14,0,0,0,0,0,1
21,"matched = list(filter(re.compile(pattern).match, word_list))",0,0,60,1,0,0,0,0,1
26,"find = re.search(pattern, text)",0,0,31,1,0,0,0,0,1
30,"result = re.split(pattern, text, 1)
",0,0,36,1,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def _analyze_einsum_string(equation, bias_axes, input_shape, output_shape):",0,1,75,0,0,0,0,0,0
3,"""""""Analyzes an einsum string to determine the required weight shape.""""""",0,0,71,0,0,0,0,0,0
5,"dot_replaced_string = re.sub(r""\.\.\."", ""0"", equation)",0,0,54,1,0,0,1,0,1
8,"split_string = re.match(""([a-zA-Z]+),([a-zA-Z]+)->([a-zA-Z]+)"", dot_replaced_string)",1,0,84,1,1,0,1,0,1
10,if split_string:,0,1,16,0,0,0,0,0,0
11,"return _analyze_split_string(split_string, bias_axes, input_shape, output_shape)",0,1,80,0,0,0,0,0,0
14,split_string = re.match(,0,0,24,1,0,0,0,0,1
15,"""0([a-zA-Z]+),([a-zA-Z]+)->0([a-zA-Z]+)"", dot_replaced_string",0,0,61,0,1,0,1,0,0
16,),0,0,1,0,0,0,0,0,0
17,if split_string:,0,1,16,0,0,0,0,0,0
18,return _analyze_split_string(,0,1,29,0,0,0,0,0,0
19,"split_string, bias_axes, input_shape, output_shape, left_elided=True",0,1,68,0,0,0,0,0,1
20,),0,0,1,0,0,0,0,0,0
23,split_string = re.match(,0,0,24,1,0,0,0,0,1
24,"""([a-zA-Z]{2,})0,([a-zA-Z]+)->([a-zA-Z]+)0"", dot_replaced_string",0,0,64,0,1,0,1,0,0
25,),0,0,1,0,0,0,0,0,0
26,if split_string:,0,1,16,0,0,0,0,0,0
27,"return _analyze_split_string(split_string, bias_axes, input_shape, output_shape)",0,1,80,0,0,0,0,0,0
29,raise ValueError(,0,1,17,0,0,0,0,0,0
30,"f""Invalid einsum equation '{equation}'. Equations must be in the form """,0,1,71,0,0,0,0,0,0
32,"    )
",0,0,6,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def get_model_filenames(model_dir):,0,1,35,0,0,0,0,0,0
3,files = os.listdir(model_dir),0,1,29,0,0,0,0,0,1
4,meta_files = [s for s in files if s.endswith('.meta')],0,1,54,0,0,0,0,0,1
5,if len(meta_files)==0:,0,1,22,0,0,0,0,0,0
6,raise ValueError('No meta file found in the model directory (%s)' % model_dir),0,1,78,0,0,0,0,0,0
7,elif len(meta_files)>1:,0,1,23,0,0,0,0,0,0
8,raise ValueError('There should not be more than one meta file in the model directory (%s)' % model_dir),0,1,103,0,0,0,0,0,0
9,meta_file = meta_files[0],0,0,25,0,0,0,0,0,1
10,ckpt = tf.train.get_checkpoint_state(model_dir),0,1,47,0,0,0,0,0,1
11,if ckpt and ckpt.model_checkpoint_path:,0,1,39,0,0,0,0,0,0
12,ckpt_file = os.path.basename(ckpt.model_checkpoint_path),0,1,56,0,0,0,0,0,1
13,"return meta_file, ckpt_file",0,1,27,0,0,0,0,0,0
15,meta_files = [s for s in files if '.ckpt' in s],0,1,47,0,0,0,0,0,1
16,max_step = -1,0,0,13,0,1,0,0,0,1
17,for f in files:,0,1,15,0,0,0,0,0,0
18,"step_str = re.match(r'(^model-[\w\- ]+.ckpt-(\d+))', f)",1,1,55,1,1,0,0,1,1
20,if step_str is not None and len(step_str.groups())>=2:,0,1,54,0,0,0,0,0,1
21,step = int(step_str.groups()[1]),0,0,32,0,0,0,0,0,1
22,if step > max_step:,0,1,19,0,0,0,0,0,0
23,max_step = step,0,0,15,0,0,0,0,0,1
25,"    return meta_file, ckpt_file",0,1,31,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def split_arguments(argstr):,0,1,28,0,0,0,0,0,0
3,arguments = [],0,0,14,0,0,0,0,0,1
4,current_argument = [],0,0,21,0,0,0,0,0,1
5,i = 0,0,0,5,0,0,0,0,0,1
7,def finish_arg():,0,1,17,0,0,0,0,0,0
8,if current_argument:,0,1,20,0,0,0,0,0,0
9,"argstr = """".join(current_argument).strip()",0,0,42,0,0,0,1,0,1
10,"m = re.match(r""(.*(\s+|\*))(\w+)$"", argstr)",1,0,43,1,1,0,0,1,1
12,if m:,0,1,5,0,0,0,0,0,0
13,typename = m.group(1).strip(),0,0,29,0,0,0,0,0,1
14,name = m.group(3),0,0,17,0,0,0,0,0,1
15,else:,0,1,5,0,0,0,0,0,0
16,typename = argstr,0,0,17,0,0,0,0,0,1
17,"name = """"",0,0,9,0,0,0,0,0,1
18,"arguments.append((typename, name))",0,0,34,0,0,1,0,0,0
19,del current_argument[:],0,1,23,0,0,0,0,0,0
21,while i < len(argstr):,0,1,22,0,0,0,0,0,0
22,c = argstr[i],0,0,13,0,0,0,0,0,1
23,"if c == "","":",0,1,12,0,0,0,0,0,0
24,finish_arg(),0,0,12,0,0,0,0,0,0
25,"elif c == ""("":",0,1,14,0,0,0,0,0,0
26,"p = skip_brackets(argstr[i:], ""("", "")"")",0,0,39,0,0,0,0,0,1
27,current_argument += argstr[i : i + p],0,0,37,0,1,0,0,0,1
28,i += p - 1,0,0,10,0,1,0,0,0,1
29,else:,0,1,5,0,0,0,0,0,0
30,current_argument += c,0,0,21,0,1,0,0,0,1
31,i += 1,0,0,6,0,1,0,0,0,1
33,"    return arguments
",0,1,21,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def get_device_facts(self):,0,1,27,0,0,0,0,0,0
3,device_facts = {},0,0,17,0,0,0,0,0,1
4,"device_facts[""devices""] = {}",0,0,28,0,0,0,0,0,1
5,d = {},0,0,6,0,0,0,0,0,1
6,"d[""host""] = """"",0,0,14,0,0,0,0,0,1
9,"m = re.match(r"".+/([a-f0-9]{4}:[a-f0-9]{2}:[0|1][a-f0-9]\.[0-7])/"", sysdir)",1,0,75,1,1,0,0,1,1
11,if m and pcidata:,0,1,17,0,0,0,0,0,0
12,pciid = m.group(1),0,0,18,0,0,0,0,0,1
13,did = re.escape(pciid),0,0,22,1,0,0,0,0,1
14,"m = re.search(""^"" + did + r""\s(.*)$"", pcidata, re.MULTILINE)",0,0,60,1,1,0,0,1,1
15,if m:,0,1,5,0,0,0,0,0,0
16,"d[""host""] = m.group(1)",0,0,22,0,0,0,0,0,1
18,"self.get_holders(d, sysdir)",0,0,27,0,0,0,0,0,0
20,"device_facts[""devices""][diskname] = d",0,0,37,0,0,0,0,0,1
22,"    return device_facts
",0,1,24,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def _merge_string_group(self, line, string_idx: int):",0,1,53,0,0,0,0,0,0
3,"""""""",0,0,3,0,0,0,0,0,0
4,Merges string group (i.e. set of adjacent strings) where the first,0,0,66,0,0,0,0,0,0
5,string in the group is `line.leaves[string_idx]`.,0,0,49,0,0,0,0,0,0
7,Returns:,0,0,8,0,0,0,0,0,0
8,"Ok(new_line), if ALL of the validation checks found in",0,1,54,0,0,0,0,0,0
9,__validate_msg(...) pass.,0,1,25,0,0,0,0,0,0
10,OR,0,0,2,0,0,0,0,0,0
11,"Err(CannotTransform), otherwise.",0,1,32,0,0,0,0,0,0
12,"""""""",0,0,3,0,0,0,0,0,0
13,LL = line.leaves,0,0,16,0,0,0,0,0,1
15,is_valid_index = is_valid_index_factory(LL),0,0,43,0,0,0,0,0,1
17,"vresult = self._validate_msg(line, string_idx)",0,0,46,0,0,0,0,0,1
18,"if isinstance(vresult, Err):",0,1,28,0,0,0,0,0,0
19,return vresult,0,1,14,0,0,0,0,0,0
23,atom_node = LL[string_idx].parent,0,0,33,0,0,0,0,0,1
29,"BREAK_MARK = ""@@@@@ BLACK BREAKPOINT MARKER @@@@@""",0,0,50,0,0,0,0,0,1
31,QUOTE = LL[string_idx].value[-1],0,0,32,0,1,0,0,0,1
33,"def make_naked(string: str, string_prefix: str) -> str:",0,1,55,0,1,0,0,0,0
34,"""""""Strip @string (i.e. make it a ""naked"" string)",0,0,48,0,0,0,0,0,0
36,Pre-conditions:,0,0,15,0,1,0,0,0,0
37,* assert_is_leaf_string(@string),0,1,32,0,1,0,0,0,0
39,Returns:,0,0,8,0,0,0,0,0,0
40,A string that is identical to @string except that,0,1,49,0,0,0,0,0,0
41,"@string_prefix has been stripped, the surrounding QUOTE",0,1,55,0,0,0,0,0,0
42,"characters have been removed, and any remaining QUOTE",0,0,53,0,0,1,0,0,0
43,characters have been escaped.,0,0,29,0,0,0,0,0,0
44,"""""""",0,0,3,0,0,0,0,0,0
45,assert_is_leaf_string(string),0,1,29,0,0,0,0,0,0
47,"RE_EVEN_BACKSLASHES = r""(?:(?<!\\)(?:\\\\)*)""",0,0,45,0,1,0,0,0,1
48,naked_string = string[len(string_prefix) + 1 : -1],0,0,50,0,1,0,0,0,1
49,naked_string = re.sub(,0,0,22,1,0,0,0,0,1
50,"""("" + RE_EVEN_BACKSLASHES + "")"" + QUOTE, r""\1\\"" + QUOTE, naked_string",0,0,70,0,1,0,0,0,0
51,),1,0,1,0,0,0,0,0,0
53,return naked_string,0,1,19,0,0,0,0,0,0
57,custom_splits = [],0,0,18,0,0,0,0,0,1
60,prefix_tracker = [],0,0,19,0,0,0,0,0,1
64,next_str_idx = string_idx,0,0,25,0,0,0,0,0,1
65,"prefix = """"",0,0,11,0,0,0,0,0,1
66,while (,0,1,7,0,0,0,0,0,0
67,not prefix,0,0,10,0,0,0,0,0,0
68,and is_valid_index(next_str_idx),0,0,32,0,0,0,0,0,0
69,and LL[next_str_idx].type == token.STRING,0,0,41,0,0,0,0,0,0
70,):,0,0,2,0,0,0,0,0,0
71,prefix = get_string_prefix(LL[next_str_idx].value).lower(),0,0,58,0,0,0,1,0,1
72,next_str_idx += 1,0,0,17,0,1,0,0,0,1
83,"S = """"",0,0,6,0,0,0,0,0,1
84,"NS = """"",0,0,7,0,0,0,0,0,1
85,num_of_strings = 0,0,0,18,0,0,0,0,0,1
86,next_str_idx = string_idx,0,0,25,0,0,0,0,0,1
87,while is_valid_index(next_str_idx) and LL[next_str_idx].type == token.STRING:,0,1,77,0,0,0,0,0,0
88,num_of_strings += 1,0,0,19,0,1,0,0,0,1
90,SS = LL[next_str_idx].value,0,0,27,0,0,0,0,0,1
91,next_prefix = get_string_prefix(SS).lower(),0,0,43,0,0,0,1,0,1
95,"if ""f"" in prefix and ""f"" not in next_prefix:",0,1,44,0,0,0,0,0,0
97,"SS = re.sub(r""(\{|\})"", r""\1\1"", SS)",0,0,36,1,0,0,0,1,1
99,"NSS = make_naked(SS, next_prefix)",0,0,33,0,0,0,0,0,1
101,has_prefix = bool(next_prefix),0,1,30,0,0,0,0,0,1
102,prefix_tracker.append(has_prefix),0,1,33,0,0,1,0,0,0
104,S = prefix + QUOTE + NS + NSS + BREAK_MARK + QUOTE,0,0,50,0,1,0,0,0,1
105,"NS = make_naked(S, prefix)",0,0,26,0,0,0,0,0,1
107,next_str_idx += 1,0,0,17,0,1,0,0,0,1
109,"S_leaf = Leaf(token.STRING, S)",0,0,30,0,0,0,0,0,1
110,if self.normalize_strings:,0,1,26,0,0,0,0,0,0
111,S_leaf.value = normalize_string_quotes(S_leaf.value),0,0,52,0,0,0,0,0,1
114,temp_string = S_leaf.value[len(prefix) + 1 : -1],0,0,48,0,1,0,0,0,1
115,for has_prefix in prefix_tracker:,0,1,33,0,0,0,0,0,0
116,mark_idx = temp_string.find(BREAK_MARK),0,0,39,0,0,0,0,0,1
117,assert (,0,1,8,0,0,0,0,0,0
118,mark_idx >= 0,0,0,13,0,0,0,0,0,1
119,"), ""Logic error while filling the custom string breakpoint cache.""",0,1,66,0,0,0,0,0,0
121,temp_string = temp_string[mark_idx + len(BREAK_MARK) :],0,0,55,0,1,0,0,0,1
122,breakpoint_idx = mark_idx + (len(prefix) if has_prefix else 0) + 1,0,1,66,0,1,0,0,0,1
123,"custom_splits.append(CustomSplit(has_prefix, breakpoint_idx))",0,1,61,0,0,1,0,0,0
125,"string_leaf = Leaf(token.STRING, S_leaf.value.replace(BREAK_MARK, """"))",0,0,70,0,0,0,1,0,1
127,if atom_node is not None:,0,1,25,0,0,0,0,0,0
128,"replace_child(atom_node, string_leaf)",0,0,37,0,0,0,1,0,0
131,new_line = line.clone(),0,0,23,0,0,0,0,0,1
132,"for (i, leaf) in enumerate(LL):",0,1,31,0,0,0,0,0,0
133,if i == string_idx:,0,1,19,0,0,0,0,0,0
134,new_line.append(string_leaf),0,0,28,0,0,1,0,0,0
136,if string_idx <= i < string_idx + num_of_strings:,0,1,49,0,1,0,0,0,1
137,for comment_leaf in line.comments_after(LL[i]):,0,1,47,0,0,0,0,0,0
138,"new_line.append(comment_leaf, preformatted=True)",0,1,48,0,0,1,1,0,1
139,continue,0,1,8,0,0,0,0,0,0
141,"append_leaves(new_line, line, [leaf])",0,0,37,0,0,1,0,0,0
144,"    return Ok(new_line)
",0,1,24,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def _login(self, webpage_url, display_id):",0,1,42,0,0,0,0,0,0
3,"username, password = self._get_login_info()",0,1,43,0,0,0,0,0,1
4,if username is None or password is None:,0,1,40,0,0,0,0,0,0
5,self.report_warning(,0,0,20,0,0,0,0,0,0
6,"""It looks like """,0,0,16,0,0,0,0,0,0
7,#NAME?,0,0,13,0,1,0,0,0,0
8, requires a login. Try specifying a username and password and try again.,0,1,76,0,1,0,0,0,0
9,),0,0,1,0,0,0,0,0,0
10,return None,0,1,11,0,0,0,0,0,0
12,"mobj = re.match(r""(?P<root_url>https?://.*?/).*"", webpage_url)",1,0,62,1,1,0,0,0,1
14,"login_url = mobj.group(""root_url"") + ""api/login.php""",0,0,52,0,1,0,0,0,1
15,"logout_url = mobj.group(""root_url"") + ""logout""",0,0,46,0,1,0,0,0,1
17,login_form = {,0,1,14,0,0,0,0,0,1
18,"""email"": username,",0,0,18,0,0,0,0,0,0
19,"""password"": password,",0,1,21,0,0,0,0,0,0
20,},0,0,1,0,0,0,0,0,0
22,"request = sanitized_Request(login_url, urlencode_postdata(login_form))",0,1,70,0,0,0,1,0,1
23,"request.add_header(""Content-Type"", ""application/x-www-form-urlencoded"")",0,1,71,0,1,0,1,0,0
24,"self._download_webpage(request, display_id, ""Logging in"")",0,0,57,0,0,0,0,0,0
25,start_page = self._download_webpage(,0,0,36,0,0,0,0,0,1
26,"webpage_url, display_id, ""Getting authenticated video page""",0,0,59,0,0,0,0,0,0
27,),0,0,1,0,0,0,0,0,0
28,"self._download_webpage(logout_url, display_id, ""Logging out"")",0,0,61,0,0,0,0,0,0
30,"    return start_page
",0,1,22,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,@classmethod,0,1,12,0,0,0,0,0,0
3,"def _from_str(cls, text):",0,1,25,0,0,0,0,0,0
4,orig = text,0,0,11,0,0,0,0,0,1
5,"if text.startswith((""const "", ""volatile "")):",0,1,44,0,0,0,0,0,0
6,"typequal, _, text = text.partition("" "")",0,0,39,0,0,0,0,0,1
7,else:,0,1,5,0,0,0,0,0,0
8,typequal = None,0,0,15,0,0,0,0,0,1
11,"m = re.match(r""^ *'?([a-zA-Z_]\w*(?:\s+[a-zA-Z_]\w*)*)\s*(.*?)'?\s*$"", text)",1,0,76,1,1,0,0,1,1
13,if not m:,0,1,9,0,0,0,0,0,0
14,"raise ValueError(f""invalid vartype text {orig!r}"")",0,1,50,0,0,0,0,0,0
15,"typespec, abstract = m.groups()",0,0,31,0,0,0,0,0,1
17,"    return cls(typequal, typespec, abstract or None)
",0,1,53,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def get_assignment_map_from_checkpoint(tvars, init_checkpoint):",0,1,63,0,0,0,0,0,0
3,"""""""Compute the union of the current variables and checkpoint variables.""""""",0,0,74,0,0,0,0,0,0
4,assignment_map = {},0,1,19,0,0,0,0,0,1
5,initialized_variable_names = {},0,0,31,0,0,0,0,0,1
7,name_to_variable = collections.OrderedDict(),0,0,44,0,0,0,0,0,1
8,for var in tvars:,0,1,17,0,0,0,0,0,0
9,name = var.name,0,0,15,0,0,0,0,0,1
10,"m = re.match(""^(.*):\\d+$"", name)",1,0,33,1,1,0,0,1,1
12,if m is not None:,0,1,17,0,0,0,0,0,0
13,name = m.group(1),0,0,17,0,0,0,0,0,1
14,name_to_variable[name] = var,0,0,28,0,0,0,0,0,1
16,init_vars = tf.train.list_variables(init_checkpoint),0,0,52,0,0,0,0,0,1
18,assignment_map = collections.OrderedDict(),0,1,42,0,0,0,0,0,1
19,for x in init_vars:,0,1,19,0,0,0,0,0,0
20,"(name, var) = (x[0], x[1])",0,0,26,0,0,0,0,0,1
21,if name not in name_to_variable:,0,1,32,0,0,0,0,0,0
22,continue,0,1,8,0,0,0,0,0,0
23,assignment_map[name] = name,0,1,27,0,0,0,0,0,1
24,initialized_variable_names[name] = 1,0,0,36,0,0,0,0,0,1
25,"initialized_variable_names[name + "":0""] = 1",0,0,43,0,1,0,0,0,1
27,"  return (assignment_map, initialized_variable_names)",0,1,53,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def validate_case_matches_checkpoint(do_lower_case, init_checkpoint):",0,1,69,0,0,0,1,0,0
3,"""""""Checks whether the casing config is consistent with the checkpoint name.""""""",0,1,78,0,0,0,0,0,0
10,if not init_checkpoint:,0,1,23,0,0,0,0,0,0
11,return,0,1,6,0,0,0,0,0,0
13,"m = re.match(""^.*?([A-Za-z0-9_-]+)/bert_model.ckpt"", init_checkpoint)",1,1,69,1,1,0,0,1,1
15,if m is None:,0,1,13,0,0,0,0,0,0
16,return,0,1,6,0,0,0,0,0,0
18,model_name = m.group(1),0,1,23,0,0,0,0,0,1
20,lower_models = [,0,1,16,0,0,0,1,0,1
21,"""uncased_L-24_H-1024_A-16"",",0,1,27,0,1,0,0,0,0
22,"""uncased_L-12_H-768_A-12"",",0,1,26,0,1,0,0,0,0
23,"""multilingual_L-12_H-768_A-12"",",0,0,31,0,1,0,0,0,0
24,"""chinese_L-12_H-768_A-12"",",0,0,26,0,1,0,0,0,0
25,],0,0,1,0,0,0,0,0,0
27,cased_models = [,0,1,16,0,0,0,0,0,1
28,"""cased_L-12_H-768_A-12"",",0,1,24,0,1,0,0,0,0
29,"""cased_L-24_H-1024_A-16"",",0,1,25,0,1,0,0,0,0
30,"""multi_cased_L-12_H-768_A-12"",",0,1,30,0,1,0,0,0,0
31,],0,0,1,0,0,0,0,0,0
33,is_bad_config = False,0,0,21,0,0,0,0,0,1
34,if model_name in lower_models and not do_lower_case:,0,1,52,0,0,0,1,0,0
35,is_bad_config = True,0,0,20,0,0,0,0,0,1
36,"actual_flag = ""False""",0,0,21,0,0,0,0,0,1
37,"case_name = ""lowercased""",0,1,24,0,0,0,1,0,1
38,"opposite_flag = ""True""",0,0,22,0,0,0,0,0,1
40,if model_name in cased_models and do_lower_case:,0,1,48,0,0,0,1,0,0
41,is_bad_config = True,0,0,20,0,0,0,0,0,1
42,"actual_flag = ""True""",0,0,20,0,0,0,0,0,1
43,"case_name = ""cased""",0,1,19,0,0,0,0,0,1
44,"opposite_flag = ""False""",0,0,23,0,0,0,0,0,1
46,if is_bad_config:,0,1,17,0,0,0,0,0,0
47,raise ValueError(,0,1,17,0,0,0,0,0,0
48,"""You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. """,0,1,66,0,1,0,1,0,0
49,"""However, `%s` seems to be a %s model, so you """,0,1,47,0,0,0,0,0,0
50,"""should pass in `--do_lower_case=%s` so that the fine-tuning matches """,0,1,70,0,1,0,1,0,1
51,"""how the model was pre-training. If this error is wrong, please """,0,1,65,0,1,0,0,0,0
52,"""just comment out this check.""",0,0,30,0,0,0,0,0,0
54,"        )
",0,0,10,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def auto_augment_transform(config_str, hparams):",0,1,48,0,0,0,0,0,0
3,"""""""",0,0,3,0,0,0,0,0,0
4,Create a AutoAugment transform,0,1,30,0,0,0,0,0,0
6,:param config_str: String defining configuration of auto augmentation. Consists of multiple sections separated by,0,1,113,0,0,0,0,0,0
7,"dashes ('-'). The first section defines the AutoAugment policy (one of 'v0', 'v0r', 'original', 'originalr').",0,1,109,0,1,0,0,0,0
8,"The remaining sections, not order sepecific determine",0,1,53,0,0,0,0,0,0
9,'mstd' -  float std deviation of magnitude noise applied,0,0,56,0,1,0,0,0,0
10,"Ex 'original-mstd0.5' results in AutoAugment with original policy, magnitude_std 0.5",0,0,84,0,1,0,0,0,0
12,:param hparams: Other hparams (kwargs) for the AutoAugmentation scheme,0,1,70,0,0,0,0,0,0
14,:return: A PyTorch compatible Transform,0,1,39,0,0,0,0,0,0
15,"""""""",0,0,3,0,0,0,0,0,0
16,config = config_str.split('-'),0,0,30,0,1,0,0,0,1
17,policy_name = config[0],0,0,23,0,0,0,0,0,1
18,config = config[1:],0,0,19,0,0,0,0,0,1
19,for c in config:,0,1,16,0,0,0,0,0,0
20,"cs = re.split(r'(\d.*)', c)",1,0,27,1,1,0,0,0,1
23,if len(cs) < 2:,0,1,15,0,0,0,0,0,0
24,continue,0,1,8,0,0,0,0,0,0
25,"key, val = cs[:2]",0,0,17,0,0,0,0,0,1
26,if key == 'mstd':,0,1,17,0,0,0,0,0,0
28,"hparams.setdefault('magnitude_std', float(val))",0,1,47,0,0,0,0,0,0
29,else:,0,1,5,0,0,0,0,0,0
30,"assert False, 'Unknown AutoAugment config section'",0,1,50,0,0,0,0,0,0
32,"    return AutoAugment(aa_policy)
",0,1,34,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import re,0,1,9,0,0,0,0,0,0
7,import random,0,1,13,0,0,0,0,0,0
8,from inline import Here,0,1,23,0,0,0,0,0,0
16,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
18,for iter in range(10):,0,1,22,0,0,0,0,0,0
20,"id_num = """"",0,0,11,0,0,0,0,0,1
21,"poss_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'E', 'I', 'O', 'U', 'X', 'Y']",0,0,79,0,0,0,0,0,1
22,for digit in range(6):,0,1,22,0,0,0,0,0,0
23,"id_num = id_num + str(poss_digits[random.randint(0, 16)])",0,0,57,0,1,0,0,0,1
24,print(id_num),0,0,13,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import re,0,1,9,0,0,0,0,0,0
7,from inline import Here,0,1,23,0,0,0,0,0,0
14,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
17,def uppcase(match):,0,1,19,0,0,0,0,0,0
18,arr = match.span(),0,0,18,0,0,0,0,0,1
19,return match.group(1).upper() + match.string[arr[0]+2:arr[1]],0,1,61,0,1,0,0,0,0
22,"titles = [""not the same anymore"", ""ode To the Mets"", ""Why Are Sundays So Depressing"",",0,0,85,0,0,0,0,0,1
23,"""brooklyn bridge"", ""Eternal summer"", ""the adults are talking"", ""selfless"",",0,0,74,0,0,0,0,0,0
24,"""at the Door"", ""bad decisions""]",0,0,31,0,0,0,0,0,0
26,for iter in range(len(titles)):,0,1,31,0,0,0,0,0,0
28,"print(re.sub(r'( [a-z])[a-z]*', uppcase, "" ""+titles[iter]).strip())",0,1,67,1,1,0,0,0,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
6,"result = re.findall(r""[a-zA-Z]"", text)",0,0,38,1,1,0,0,0,1
7,"print(""Letters: "", result)",0,0,26,0,0,0,0,0,0
9,"result = re.findall(r""\d"", text)",0,0,32,1,0,0,0,0,1
10,"print(""Digits: "", result)",0,0,25,0,0,0,0,0,0
13,"result = re.findall(r""\bs\w+"", text)",0,0,36,1,1,0,0,0,1
14,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
17,"result = re.findall(r""\w+e\b"", text)",0,0,36,1,1,0,0,0,1
18,"print(""Words ending with 'e': "", result)",0,0,40,0,0,0,0,0,0
21,"result = re.findall(r""\b\w*o\w*\b"", text)",0,0,41,1,1,0,0,0,1
22,"print(""Words containing 'o': "", result)",0,0,39,0,0,0,0,0,0
25,"result = re.findall(r""\b\w{4}\b"", text)",1,0,39,1,0,0,0,0,1
27,"print(""Words of length 4: "", result)",0,0,36,0,0,0,0,0,0
30,"result = re.sub(r""\s"", ""-"", text)",0,0,33,1,1,0,0,0,1
31,"print(""Text with whitespaces replaced: "", result)",0,0,49,0,0,0,1,0,0
34,"result = re.sub(r""is"", ""was"", text)",0,1,35,1,0,0,0,0,1
35,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
39,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def _detect_nodejs() -> str:,0,1,28,0,1,0,0,0,0
3,nodejs_path = settings.nodejs_path(),0,0,36,0,0,0,0,0,1
4,"nodejs_paths = [nodejs_path] if nodejs_path is not None else [""nodejs"", ""node""]",0,1,79,0,0,0,0,0,1
6,for nodejs_path in nodejs_paths:,0,1,32,0,0,0,0,0,0
7,try:,0,1,4,0,0,0,0,0,0
8,"proc = Popen([nodejs_path, ""--version""], stdout=PIPE, stderr=PIPE)",0,0,66,0,1,0,0,0,0
9,"(stdout, _) = proc.communicate()",0,0,32,0,0,0,0,0,1
10,except OSError:,0,1,15,0,0,0,0,0,0
11,continue,0,1,8,0,0,0,0,0,0
13,if proc.returncode != 0:,0,1,24,0,0,0,0,0,1
14,continue,0,1,8,0,0,0,0,0,0
16,"match = re.match(r""^v(\d+)\.(\d+)\.(\d+).*$"", stdout.decode(""utf-8""))",0,0,69,1,1,0,0,1,1
22,if match is not None:,0,1,21,0,0,0,0,0,0
23,version = tuple(int(v) for v in match.groups()),0,1,47,0,0,0,0,0,1
24,if version >= nodejs_min_version:,0,1,33,0,0,0,0,0,1
25,return nodejs_path,0,1,18,0,0,0,0,0,0
28,"version_repr = ""."".join(str(x) for x in nodejs_min_version)",0,1,59,0,0,0,1,0,1
29,raise RuntimeError(,0,1,19,0,0,0,0,0,0
30,"f""node.js v{version_repr} or higher is needed to allow compilation of custom models """,0,1,85,0,0,0,0,0,0
32,"    )
",0,0,6,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def extract_contracts(self, method):",0,1,36,0,0,0,0,0,0
3,contracts = [],0,0,14,0,0,0,0,0,1
4,for line in method.__doc__.split('\n'):,0,1,39,0,0,0,0,0,0
5,line = line.strip(),0,0,19,0,0,0,0,0,1
7,if line.startswith('@'):,0,1,24,0,0,0,0,0,0
9,"name, args = re.match(r'@(\w+)\s*(.*)', line).groups()",1,0,54,1,1,0,0,0,1
11,"args = re.split(r'\s+', args)",1,0,29,1,1,0,0,0,1
13,"contracts.append(self.contracts[name](method, *args))",0,0,53,0,1,1,0,0,0
15,    return contracts,0,1,20,0,0,0,0,0,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
4,"text = ""This is filler text.""",0,0,29,0,0,0,0,0,1
5,"matches = re.findall(r'\b\w{3}\b' , text)",1,0,41,1,0,0,0,0,1
9,"example_list_from_file = ['const button = (""",0,1,44,0,0,0,0,0,0
10,"'const icon = (""",0,0,16,0,0,0,0,0,1
11,"'const audio = (""audio"");']",0,0,27,0,0,0,0,0,1
12,str_output = [],0,0,15,0,0,0,0,0,1
13,for i in range(len(example_list_from_file)):,0,1,44,0,0,0,0,0,0
14,"str_output.append(re.sub(r'(?is)=.\(', '= document.querySelector(', example_list_from_file[i]))",0,1,95,1,0,1,0,0,0
18,pattern = '',0,0,12,0,0,0,0,0,1
19,matched = [],0,0,12,0,0,0,0,0,1
20,word_list = [],0,0,14,0,0,0,0,0,1
21,"matched = list(filter(re.compile(pattern).match, word_list))",0,0,60,1,0,0,0,0,1
26,"find = re.search(pattern, text)",0,0,31,1,0,0,0,0,1
30,"result = re.split(pattern, text, 1)
",0,0,36,1,0,0,0,0,1
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
6,"result = re.findall(r""[a-zA-Z]"", text)",1,0,38,1,1,0,0,0,1
8,"print(""Letters: "", result)",0,0,26,0,0,0,0,0,0
10,"result = re.findall(r""\d"", text)",0,0,32,1,0,0,0,0,1
11,"print(""Digits: "", result)",0,0,25,0,0,0,0,0,0
14,"result = re.findall(r""\bs\w+"", text)",0,0,36,1,1,0,0,0,1
15,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
18,"result = re.findall(r""\w+e\b"", text)",0,0,36,1,1,0,0,0,1
19,"print(""Words ending with 'e': "", result)",0,0,40,0,0,0,0,0,0
22,"result = re.findall(r""\b\w*o\w*\b"", text)",0,0,41,1,1,0,0,0,1
23,"print(""Words containing 'o': "", result)",0,0,39,0,0,0,0,0,0
26,"result = re.findall(r""\b\w{4}\b"", text)",0,0,39,1,0,0,0,0,1
27,"print(""Words of length 4: "", result)",0,0,36,0,0,0,0,0,0
30,"result = re.sub(r""\s"", ""-"", text)",0,0,33,1,1,0,0,0,1
31,"print(""Text with whitespaces replaced: "", result)",0,0,49,0,0,0,1,0,0
34,"result = re.sub(r""is"", ""was"", text)",0,1,35,1,0,0,0,0,1
35,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
39,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import re,0,1,9,0,0,0,0,0,0
7,import random,0,1,13,0,0,0,0,0,0
8,from inline import Here,0,1,23,0,0,0,0,0,0
15,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
17,"hex_dig = [""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"",",0,0,60,0,0,0,0,0,1
18,"""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"",",0,0,49,0,0,0,0,0,0
19,"""k"", ""l""]",0,0,9,0,0,0,0,0,0
20,for iter in range(10):,0,1,22,0,0,0,0,0,0
23,"left_bit = hex_dig[random.randint(0, 21)]",0,0,41,0,0,0,0,0,1
24,"right_bit = hex_dig[random.randint(0, 21)]",0,0,42,0,0,0,0,0,1
25,hex_str = left_bit + right_bit,0,0,30,0,1,0,0,0,1
26,"print(hex_str + "":"")",0,0,20,0,1,0,0,0,0
29,ans = True,0,0,10,0,0,0,0,0,1
30,try:,0,1,4,0,0,0,0,0,0
31,"num = int(left_bit + right_bit, 16)",0,0,35,0,1,0,0,0,1
32,except:,0,1,7,0,0,0,0,0,0
33,ans = False,0,0,11,0,0,0,0,0,1
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
6,"result = re.findall(r""[a-zA-Z]"", text)",0,0,38,1,1,0,0,0,1
7,"print(""Letters: "", result)",0,0,26,0,0,0,0,0,0
9,"result = re.findall(r""\d"", text)",1,0,32,1,0,0,0,0,1
11,"print(""Digits: "", result)",0,0,25,0,0,0,0,0,0
14,"result = re.findall(r""\bs\w+"", text)",0,0,36,1,1,0,0,0,1
15,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
18,"result = re.findall(r""\w+e\b"", text)",0,0,36,1,1,0,0,0,1
19,"print(""Words ending with 'e': "", result)",0,0,40,0,0,0,0,0,0
22,"result = re.findall(r""\b\w*o\w*\b"", text)",0,0,41,1,1,0,0,0,1
23,"print(""Words containing 'o': "", result)",0,0,39,0,0,0,0,0,0
26,"result = re.findall(r""\b\w{4}\b"", text)",0,0,39,1,0,0,0,0,1
27,"print(""Words of length 4: "", result)",0,0,36,0,0,0,0,0,0
30,"result = re.sub(r""\s"", ""-"", text)",0,0,33,1,1,0,0,0,1
31,"print(""Text with whitespaces replaced: "", result)",0,0,49,0,0,0,1,0,0
34,"result = re.sub(r""is"", ""was"", text)",0,1,35,1,0,0,0,0,1
35,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
39,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
5,"m_import = re.compile(""^[ \t]*from[ \t]+([^ \t]+)[ \t]+"")",0,1,57,1,1,0,0,1,1
6,"m_from = re.compile(""^[ \t]*import[ \t]+([^",0,1,43,1,1,0,0,1,1
11,"def process(filename, table):",0,1,29,0,0,0,0,0,0
12,"with open(filename, encoding=""utf-8"") as fp:",0,1,44,0,1,0,0,0,1
13,mod = os.path.basename(filename),0,1,32,0,0,0,0,0,1
14,"if mod[-3:] == "".py"":",0,1,21,0,1,0,0,0,0
15,mod = mod[:-3],1,0,14,0,1,0,0,0,1
17,table[mod] = list = [],0,0,22,0,0,0,0,0,0
18,while 1:,0,1,8,0,0,0,0,0,0
19,line = fp.readline(),0,0,20,0,0,0,0,0,1
20,if not line:,0,1,12,0,0,0,0,0,0
21,break,0,1,5,0,0,0,0,0,0
22,"while line[-1:] == ""\\"":",0,1,24,0,1,0,0,0,0
23,nextline = fp.readline(),0,0,24,0,0,0,0,0,1
24,if not nextline:,0,1,16,0,0,0,0,0,0
25,break,0,1,5,0,0,0,0,0,0
26,line = line[:-1] + nextline,0,0,27,0,1,0,0,0,1
27,m_found = m_import.match(line) or m_from.match(line),0,1,52,0,0,0,0,0,1
28,if m_found:,0,1,11,0,0,0,0,0,0
29,"(a, b), (a1, b1) = m_found.regs[:2]",0,0,35,0,0,0,0,0,1
30,else:,0,1,5,0,0,0,0,0,0
31,continue,0,1,8,0,0,0,0,0,0
32,"words = line[a1:b1].split("","")",1,0,30,0,0,0,0,0,1
36,for word in words:,0,1,18,0,0,0,0,0,0
37,word = word.strip(),0,0,19,0,0,0,0,0,1
40,"                    list.append(word)
",0,0,38,0,0,1,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import random,0,1,13,0,0,0,0,0,0
7,from inline import Here,0,1,23,0,0,0,0,0,0
15,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
17,"op = {'+': lambda x, y: x + y,",0,1,30,0,1,0,0,0,1
18,"'*': lambda x, y: x * y,",0,1,24,0,1,0,0,0,0
19,"'-': lambda x, y: x - y,",0,1,24,0,1,0,0,0,0
20,"'/': lambda x, y: x / y,",0,1,24,0,1,0,0,0,0
21,"'%': lambda x, y: x % y,",0,1,24,0,0,0,0,0,0
22,"'^': lambda x, y: x ^ y}",0,1,24,0,0,0,0,1,0
24,"sym = [""+"", ""*"", ""-"", ""/"", ""%"", ""^""]",0,0,36,0,1,0,0,1,1
26,for iter in range(10):,0,1,22,0,0,0,0,0,0
29,"opr = sym[random.randint(0, 3)]",0,0,31,0,0,0,0,0,1
30,"num1 = random.randint(0, 9)",0,0,27,0,0,0,0,0,1
31,low_bound = 0,0,0,13,0,0,0,0,0,1
32,"if(opr == ""/""):",0,1,15,0,1,0,0,0,0
33,low_bound = 1,0,0,13,0,0,0,0,0,1
34,"num2 = random.randint(low_bound, 9)",0,0,35,0,0,0,0,0,1
37,"print(str(num1) + "" "" + opr  + "" "" + str(num2) + "" = "" + str(op[opr](num1, num2)))",0,0,82,0,1,0,0,0,1
41,"    
",0,0,5,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
3,def num_to_hex(num): ,0,1,21,0,0,0,0,0,0
4,"return ""0x%x"" % num",0,1,19,0,0,0,0,0,0
7,def num_to_bin(num): ,0,1,21,0,0,0,0,0,0
8,return bin(num),0,1,15,0,0,0,0,0,0
11,def bin_str_to_int(bin_str): ,0,1,29,0,0,0,0,0,0
12,"return int(bin_str[2:], 2)",0,1,26,0,0,0,0,0,0
15,def hex_str_to_int(hex): ,0,1,25,0,0,0,0,0,0
16,"return int(hex[2:], 16)",0,1,23,0,0,0,0,0,0
19,def hex_str_to_bin_str(hex_str): ,0,1,33,0,0,0,0,0,0
20,return num_to_bin(hex_str_to_int(hex_str)),0,1,42,0,0,0,0,0,0
24,num = 0,0,0,7,0,0,0,0,0,1
25,hex = num_to_hex(num),0,0,21,0,0,0,0,0,1
28,num = 5,0,0,7,0,0,0,0,0,1
29,binary = num_to_bin(num),0,0,24,0,0,0,0,0,1
32,binary_str = '0b0101',0,0,21,0,0,0,0,0,1
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
4,num = 10,0,0,8,0,0,0,0,0,1
7,result = text[::-1],0,0,19,0,1,0,0,0,1
8,"print(""Reversed text: "", result)",0,0,32,0,0,0,0,0,0
11,"result = re.findall(r""\bs\w+"", text)",0,0,36,1,1,0,0,0,1
12,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
15,count = 0,0,0,9,0,0,0,0,0,1
16,while num:,0,1,10,0,0,0,0,0,0
17,count += num & 1,1,0,16,0,1,0,0,1,1
19,num >>= 1,0,0,9,0,0,0,0,1,1
20,"print(""Number of set bits: "", count)",0,0,36,0,0,0,0,0,0
23,"result = ""-"".join(text.split())",0,0,31,0,1,0,1,0,1
24,"print(""Text joined with '-': "", result)",0,0,39,0,1,0,1,0,0
27,"result = re.sub(""is"", ""was"", text)",0,1,34,1,0,0,0,0,1
28,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
31,num = num ^ (1 << (3 - 1)),0,0,26,0,1,0,0,1,1
32,"print(""Number after toggling 3rd bit: "", num)",0,0,45,0,0,0,0,0,0
35,result = len(text),0,0,18,0,0,0,0,0,1
36,"print(""Length of text: "", result)",0,0,33,0,0,0,0,0,0
39,"result = re.findall(r""\d"", text)",0,0,32,1,0,0,0,0,1
40,"print(""Digits in text: "", result)",0,0,33,0,0,0,0,0,0
43,result = bin(num),0,0,17,0,0,0,0,0,1
44,"print(""Binary representation of num: "", result)",0,0,47,0,0,0,0,0,0
48,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
4,num = 10,0,0,8,0,0,0,0,0,1
7,result = text[::-1],0,0,19,0,1,0,0,0,1
8,"print(""Reversed text: "", result)",0,0,32,0,0,0,0,0,0
11,"result = re.findall(r""\bs\w+"", text)",1,0,36,1,1,0,0,0,1
13,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
16,count = 0,0,0,9,0,0,0,0,0,1
17,while num:,0,1,10,0,0,0,0,0,0
18,count += num & 1,0,0,16,0,1,0,0,1,1
19,num >>= 1,0,0,9,0,0,0,0,1,1
20,"print(""Number of set bits: "", count)",0,0,36,0,0,0,0,0,0
23,"result = ""-"".join(text.split())",0,0,31,0,1,0,1,0,1
24,"print(""Text joined with '-': "", result)",0,0,39,0,1,0,1,0,0
27,"result = re.sub(""is"", ""was"", text)",0,1,34,1,0,0,0,0,1
28,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
31,num = num ^ (1 << (3 - 1)),0,0,26,0,1,0,0,1,1
32,"print(""Number after toggling 3rd bit: "", num)",0,0,45,0,0,0,0,0,0
35,result = len(text),0,0,18,0,0,0,0,0,1
36,"print(""Length of text: "", result)",0,0,33,0,0,0,0,0,0
39,"result = re.findall(r""\d"", text)",0,0,32,1,0,0,0,0,1
40,"print(""Digits in text: "", result)",0,0,33,0,0,0,0,0,0
43,result = bin(num),0,0,17,0,0,0,0,0,1
44,"print(""Binary representation of num: "", result)",0,0,47,0,0,0,0,0,0
48,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
3,def num_to_hex(num): ,0,1,21,0,0,0,0,0,0
4,"return ""0x%x"" % num",0,1,19,0,0,0,0,0,0
7,def num_to_bin(num): ,0,1,21,0,0,0,0,0,0
8,return bin(num),0,1,15,0,0,0,0,0,0
11,def bin_str_to_int(bin_str): ,0,1,29,0,0,0,0,0,0
12,"return int(bin_str[2:], 2)",0,1,26,0,0,0,0,0,0
15,def hex_str_to_int(hex): ,0,1,25,0,0,0,0,0,0
16,"return int(hex[2:], 16)",0,1,23,0,0,0,0,0,0
19,def hex_str_to_bin_str(hex_str): ,0,1,33,0,0,0,0,0,0
20,return num_to_bin(hex_str_to_int(hex_str)),0,1,42,0,0,0,0,0,0
24,num = 0,0,0,7,0,0,0,0,0,1
25,hex = num_to_hex(num),0,0,21,0,0,0,0,0,1
28,num = 5,0,0,7,0,0,0,0,0,1
29,binary = num_to_bin(num),0,0,24,0,0,0,0,0,1
32,binary_str = '0b0101',0,0,21,0,0,0,0,0,1
33,num = bin_str_to_int(binary_str),0,0,32,0,0,0,0,0,1
36,hex_str = '0x01',0,0,16,0,0,0,0,0,1
2,from inline import Here,0,1,23,0,0,0,0,0,0
4,class Solution(object):,0,1,23,0,0,0,0,0,0
5,"def longestPalindrome(self, s):",0,1,31,0,0,0,0,0,0
6,"""""""",0,0,3,0,0,0,0,0,0
7,:type s: str,0,0,12,0,0,0,0,0,0
8,:rtype: str,0,0,11,0,0,0,0,0,0
9,"""""""",0,0,3,0,0,0,0,0,0
13,ls = len(s),0,0,11,0,0,0,0,0,1
14,if ls <= 1 or len(set(s)) == 1:,0,1,31,0,0,0,0,0,0
15,return s,0,1,8,0,0,0,0,0,0
17,temp_s = ',1,0,10,0,0,0,0,0,1
21,tls = len(temp_s),0,0,17,0,0,0,0,0,1
22,"seed = range(1, tls - 1)",0,0,24,0,1,0,0,0,1
24,len_table = [0] * tls,0,0,21,0,1,0,0,0,1
25,"for step in range(1, tls / 2 + 1):",0,1,34,0,1,0,0,0,0
26,final = [],0,0,10,0,0,0,0,0,1
27,for pos in seed:,0,1,16,0,0,0,0,0,0
28,if pos - step < 0 or pos + step >= tls:,0,1,39,0,1,0,0,0,1
29,continue,0,1,8,0,0,0,0,0,0
30,if temp_s[pos - step] != temp_s[pos + step]:,0,1,44,0,1,0,0,0,1
31,continue,0,1,8,0,0,0,0,0,0
32,final.append(pos),0,0,17,0,0,1,0,0,0
33,if temp_s[pos - step] == ',0,1,26,0,1,0,0,0,0
34,continue,0,1,8,0,0,0,0,0,0
35,len_table[pos] = step,0,0,21,0,0,0,0,0,1
36,seed = final,0,0,12,0,0,0,0,0,1
37,"max_pos, max_step = 0, 0",0,0,24,0,0,0,0,0,1
38,"for i, s in enumerate(len_table):",0,1,33,0,0,0,0,0,0
39,if s >= max_step:,0,1,17,0,0,0,0,0,1
40,max_step = s,0,0,12,0,0,0,0,0,1
41,max_pos = i,0,0,11,0,0,0,0,0,1
42,"return temp_s[max_pos - max_step:max_pos + max_step + 1].translate(None, '",0,1,74,0,1,0,0,0,0
44,if __name__ == '__main__':,0,1,26,0,0,0,0,0,0
47,"    print(s.longestPalindrome(""abcbe""))",0,0,39,0,0,0,0,0,0
0,"from typing import Dict, List",0,1,29,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,def extract_sota_table(table_lines: List[str]) -> Dict:,0,1,55,0,1,0,0,0,0
4,"""""""",0,0,3,0,0,0,0,0,0
5,Parse a SOTA table out of lines in markdown,0,0,43,0,0,0,0,0,0
7,:param table_lines: lines in the SOTA table,0,0,43,0,0,0,0,0,0
8,:return:,0,1,8,0,0,0,0,0,0
9,"""""""",0,0,3,0,0,0,0,0,0
11,sota = {},0,0,9,0,0,0,0,0,1
13,header = table_lines[0],0,0,23,0,0,0,0,0,1
14,"header_cols = [h.strip() for h in header.split(""|"") if h.strip()]",1,1,65,0,0,0,0,1,1
16,cols_sanitized = [h.lower() for h in header_cols],1,1,49,0,0,0,1,0,1
18,"cols_sanitized = [re.sub("" +"", """", h).replace(""**"", """") for h in cols_sanitized]",1,1,80,1,1,0,1,0,1
22,"if ""model"" in cols_sanitized:",0,1,29,0,0,0,0,0,0
23,"model_inx = cols_sanitized.index(""model"")",0,1,41,0,0,0,0,0,1
24,else:,0,1,5,0,0,0,0,0,0
25,print(,0,0,6,0,0,0,0,0,0
26,"""ERROR: Model name not found in this SOTA table, skipping...\n"",",0,1,64,0,0,0,0,0,0
27,"file=sys.stderr,",0,0,16,0,0,0,0,0,1
28,),0,0,1,0,0,0,0,0,0
29,"print("""".join(table_lines), file=sys.stderr)",0,0,44,0,0,0,1,0,1
30,return {},0,1,9,0,0,0,0,0,0
32,"if ""paper/source"" in cols_sanitized:",0,1,36,0,1,0,0,0,0
33,"paper_inx = cols_sanitized.index(""paper/source"")",0,0,48,0,1,0,0,0,1
34,"elif ""paper"" in cols_sanitized:",0,1,31,0,0,0,0,0,0
35,"paper_inx = cols_sanitized.index(""paper"")",0,0,41,0,0,0,0,0,1
36,else:,0,1,5,0,0,0,0,0,0
37,print(,0,0,6,0,0,0,0,0,0
38,"""ERROR: Paper reference not found in this SOTA table, skipping...\n"",",0,0,69,0,0,0,0,0,0
39,"file=sys.stderr,",0,0,16,0,0,0,0,0,1
40,),0,0,1,0,0,0,0,0,0
41,"print("""".join(table_lines), file=sys.stderr)",0,0,44,0,0,0,1,0,1
42,return {},0,1,9,0,0,0,0,0,0
44,"if ""code"" in cols_sanitized:",0,1,28,0,0,0,0,0,0
45,"code_inx = cols_sanitized.index(""code"")",0,0,39,0,0,0,0,0,1
46,else:,0,1,5,0,0,0,0,0,0
47,code_inx = None,0,0,15,0,0,0,0,0,1
49,"metrics_inx = set(range(len(header_cols))) - set([model_inx, paper_inx, code_inx])",0,1,82,0,1,0,0,0,1
50,metrics_inx = sorted(list(metrics_inx)),0,0,39,0,0,1,0,0,1
52,metrics_names = [header_cols[i] for i in metrics_inx],0,1,53,0,0,0,0,0,1
54,"sota[""metrics""] = metrics_names",0,0,31,0,0,0,0,0,1
55,"sota[""rows""] = []",0,0,17,0,0,0,0,0,1
57,min_cols = len(header_cols),0,0,27,0,0,0,0,0,1
60,rows = table_lines[2:],0,0,22,0,0,0,0,0,1
61,for row in rows:,0,1,16,0,0,0,0,0,0
62,"row_cols = [h.strip() for h in row.split(""|"")][1:]",0,1,50,0,0,0,0,1,1
64,if len(row_cols) < min_cols:,0,1,28,0,0,0,0,0,0
65,print(,0,0,6,0,0,0,0,0,0
66,"""This row doesn't have enough columns, skipping: %s"" % row,",0,0,59,0,0,0,0,0,0
67,"file=sys.stderr,",0,0,16,0,0,0,0,0,1
68,),0,0,1,0,0,0,0,0,0
69,continue,0,1,8,0,0,0,0,0,0
72,metrics = {},0,0,12,0,0,0,0,0,1
73,for i in range(len(metrics_inx)):,0,1,33,0,0,0,0,0,0
74,metrics[metrics_names[i]] = row_cols[metrics_inx[i]],0,0,52,0,0,0,0,0,1
77,"paper_title, paper_link = extract_paper_title_and_link(row_cols[paper_inx])",0,0,75,0,0,0,0,0,1
80,"model_name, model_author = extract_model_name_and_author(row_cols[model_inx])",0,1,77,0,0,0,0,0,1
82,sota_row = {,0,0,12,0,0,0,0,0,1
83,"""model_name"": model_name,",0,1,25,0,0,0,0,0,0
84,"""metrics"": metrics,",0,0,19,0,0,0,0,0,0
85,},0,0,1,0,0,0,0,0,0
87,if paper_title is not None and paper_link is not None:,0,1,54,0,0,0,0,0,0
88,"sota_row[""paper_title""] = paper_title",0,0,37,0,0,0,0,0,1
89,"sota_row[""paper_url""] = paper_link",0,0,34,0,0,0,0,0,1
92,if code_inx is not None:,0,1,24,0,0,0,0,0,0
93,"sota_row[""code_links""] = extract_code_links(row_cols[code_inx])",0,0,63,0,0,0,0,0,1
95,"sota[""rows""].append(sota_row)",0,0,29,0,0,1,0,0,0
97,"    return sota
",0,1,16,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import random,0,1,13,0,0,0,0,0,0
7,from inline import Here,0,1,23,0,0,0,0,0,0
14,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
16,for iter in range(10):,0,1,22,0,0,0,0,0,0
17,"word = """"",0,0,9,0,0,0,0,0,1
20,for n in range(3):,0,1,18,0,0,0,0,0,0
21,"ch_idx = random.randint(0, 25)",0,0,30,0,0,0,0,0,1
22,word = chr(97 + ch_idx) + word + chr(97 + ch_idx),0,0,49,0,1,0,0,0,1
23,"print(""make_palindrome(\"""" + word[0:3] + ""\"") -> "" + word)",0,0,58,0,1,0,0,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
7,"brackets = ""[][][][[[]]]{}}""",0,0,28,0,0,0,0,0,1
9,class Valid_Parenthesis:,0,1,24,0,0,0,0,0,0
10,"def isValid(self, s: str) -> bool:",0,1,34,0,1,0,0,0,0
11,"Map = {"")"": ""("", ""]"": ""["", ""}"": ""{""}",0,0,36,0,0,0,0,0,1
12,stack = [],0,0,10,0,0,0,0,0,1
14,for c in s:,0,1,11,0,0,0,0,0,0
15,if c not in Map:,0,1,16,0,0,0,0,0,0
16,stack.append(c),0,0,15,0,0,1,0,0,0
17,continue,0,1,8,0,0,0,0,0,0
18,if not stack or stack[-1] != Map[c]:,0,1,36,0,1,0,0,0,1
19,return False,0,1,12,0,0,0,0,0,0
20,stack.pop(),0,0,11,0,0,1,0,0,0
22,return not stack,0,1,16,0,0,0,0,0,0
24,valid_parenthesis = Valid_Parenthesis(),0,0,39,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,class Solution(object):,0,1,23,0,0,0,0,0,0
3,"def permuteUnique(self, nums):",0,1,30,0,0,0,0,0,0
5,res = [[]],0,0,10,0,0,0,0,0,1
6,for i in range(len(nums)):,0,1,26,0,0,0,0,0,0
7,cache = set(),0,0,13,0,0,0,0,0,1
8,while len(res[0]) == i:,0,1,23,0,0,0,0,0,0
9,curr = res.pop(0),0,0,17,0,0,1,0,0,1
10,for j in range(len(curr) + 1):,0,1,30,0,1,0,0,0,0
12,new_perm = curr[:j] + [nums[i]] + curr[j:],0,0,42,0,1,0,0,0,1
13,print(new_perm),0,0,15,0,0,0,0,0,0
14,"stemp = ''.join(map(str, new_perm))",1,0,35,0,0,0,1,0,1
17,print(stemp),0,0,12,0,0,0,0,0,0
18,if stemp not in cache:,0,1,22,0,0,0,0,0,0
19,cache.add(stemp),0,0,16,0,0,0,0,0,0
20,res.append(new_perm),0,0,20,0,0,1,0,0,0
21,return res,0,1,10,0,0,0,0,0,0
23,"Solution.permuteUnique(""l"", '1234')",0,0,35,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import re,0,1,9,0,0,0,0,0,0
7,from inline import Here,0,1,23,0,0,0,0,0,0
14,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
17,"txt = ""Have you anything ever had a dream that you, um, you had, your, you- you could, "" \",0,0,90,0,1,0,0,0,1
18,"""you’ll do, you- you wants, you, you could do so, you- you’ll do, you could- "" \",0,0,80,0,1,0,0,0,0
19,"""you, you want, you want him to do you so much you could do anything?""",0,0,70,0,0,0,0,0,0
22,"res = re.findall(r""[- ’A-Za-z]*,|[- ’A-Za-z]*\?"", txt)",0,0,54,1,1,0,0,1,1
23,idx = 0,0,0,7,0,0,0,0,0,1
24,for tok in res:,0,1,15,0,0,0,0,0,0
25,"tok = tok.replace("","", """")",0,0,26,0,0,0,1,0,1
26,res[idx] = tok,0,0,14,0,0,0,0,0,1
27,idx += 1,0,0,8,0,1,0,0,0,1
30,"ans = txt.split("","")",0,0,20,0,0,0,0,0,1
5,import sys,0,1,10,0,0,0,0,0,0
6,from inline import Here,0,1,23,0,0,0,0,0,0
13,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
15,"sent = [""I am who I think I am"",",0,0,32,0,0,0,0,0,1
16,"""I am who you think I am"",",0,0,26,0,0,0,0,0,0
17,"""You are who I think you are"",",0,0,30,0,0,0,0,0,0
18,"""You are who you think you are"",",0,0,32,0,0,0,0,0,0
19,"""I am who I think you think I am"",",0,0,34,0,0,0,0,0,0
20,"""You are who you think I think you are"",",0,0,40,0,0,0,0,0,0
21,"""think"",",0,0,8,0,0,0,0,0,0
22,"""think think""]",0,0,14,0,0,0,0,0,0
24,for iter in range(len(sent)):,0,1,29,0,0,0,0,0,0
25,curr_s = sent[iter],0,0,19,0,0,0,0,0,1
26,arr_s = [],0,0,10,0,0,0,0,0,1
27,"while(""think"" in curr_s):",0,1,25,0,0,0,0,0,0
28,"part_s = curr_s.rpartition(""think"")",0,0,35,0,0,0,0,0,1
29,curr_s = part_s[0],0,0,18,0,0,0,0,0,1
30,arr_s = [part_s[2]] + arr_s,0,0,27,0,1,0,0,0,1
31,arr_s = [curr_s] + arr_s,0,0,24,0,1,0,0,0,1
32,print(arr_s),0,0,12,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import random,0,1,13,0,0,0,0,0,0
7,from inline import Here,0,1,23,0,0,0,0,0,0
15,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
17,"poss_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'X', 'Y']",0,0,54,0,0,0,0,0,1
18,for iter in range(10):,0,1,22,0,0,0,0,0,0
20,"password = """"",0,1,13,0,0,0,0,0,1
21,for digit in range(6):,0,1,22,0,0,0,0,0,0
22,"password = password + str(poss_digits[random.randint(0, 11)])",0,1,61,0,1,0,0,0,1
25,"print(password + "":"")",0,1,21,0,1,0,0,0,0
26,if(password.isdecimal()):,0,1,25,0,0,0,0,0,0
27,"print(""acceptable password: good combination!"")",0,1,47,0,0,0,0,0,0
28,else:,0,1,5,0,0,0,0,0,0
29,"print(""unacceptable password: all digits :("")",0,1,45,0,0,0,0,0,0
32,ans = True,0,0,10,0,0,0,0,0,1
33,try:,0,1,4,0,0,0,0,0,0
34,num = int(password),0,1,19,0,0,0,0,0,1
35,except:,0,1,7,0,0,0,0,0,0
36,ans = False,0,0,11,0,0,0,0,0,1
38,"print("""")",0,0,9,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"text = ""This is a string with multiple words and numbers 1234567890.""",0,0,69,0,0,0,0,0,1
3,num = 10,0,0,8,0,0,0,0,0,1
6,result = bin(num),0,0,17,0,0,0,0,0,1
7,"print(""Binary representation of num: "", result)",0,0,47,0,0,0,0,0,0
10,count = 0,0,0,9,0,0,0,0,0,1
11,while num:,0,1,10,0,0,0,0,0,0
12,count += num & 1,0,0,16,0,1,0,0,1,1
13,num >>= 1,0,0,9,0,0,0,0,1,1
14,"print(""Number of set bits: "", count)",0,0,36,0,0,0,0,0,0
17,binary = bin(num)[2:],0,0,21,0,0,0,0,0,1
18,result = binary[::-1],0,0,21,0,1,0,0,0,1
19,"print(""Reversed binary representation: "", result)",0,0,49,0,0,0,0,0,0
22,num = num ^ (1 << (3 - 1)),0,0,26,0,1,0,0,1,1
23,"print(""Number after toggling 3rd bit: "", num)",0,0,45,0,0,0,0,0,0
26,"result = int(binary, 2)",0,0,23,0,0,0,0,0,1
27,"print(""Integer representation of binary: "", result)",0,0,51,0,0,0,0,0,0
30,result = text[::-1],0,0,19,0,1,0,0,0,1
31,"print(""Reversed text: "", result)",0,0,32,0,0,0,0,0,0
34,result = text.split(),0,0,21,0,0,0,0,0,1
35,"print(""Text split by whitespace: "", result)",0,0,43,0,0,0,0,0,0
38,"result = ""-"".join(text.split())",0,0,31,0,1,0,1,0,1
39,"print(""Text joined with '-': "", result)",0,0,39,0,1,0,1,0,0
42,result = len(text),0,0,18,0,0,0,0,0,1
43,"print(""Length of text: "", result)",0,0,33,0,0,0,0,0,0
46,result = text.upper(),0,0,21,0,0,0,0,0,1
47,"print(""Text in uppercase: "", result)",0,1,36,0,0,0,0,0,0
50,result = text.lower(),0,0,21,0,0,0,1,0,1
51,"print(""Text in lowercase: "", result)",0,1,36,0,0,0,1,0,0
54,"result = text.replace(""is"", ""was"")",1,1,34,0,0,0,1,0,1
56,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
59,"result = [c for c in text]
",0,1,27,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
1,from typing import List,0,1,23,0,0,0,0,0,0
3,"def partition(self, s: str) -> List[List[str]]:",0,1,47,0,1,0,0,0,0
4,"res, part = [], []",0,0,18,0,0,0,0,0,1
5,def dfs(i):,0,1,11,0,0,0,0,0,0
6,if i >= len(s):,0,1,15,0,0,0,0,0,1
7,res.append(part.copy()),0,0,23,0,0,1,0,0,0
8,return,0,1,6,0,0,0,0,0,0
9,"for j in range(i, len(s)):",0,1,26,0,0,0,0,0,0
10,"if self.isPali(s, i, j):",0,1,24,0,0,0,0,0,0
11,part.append(s[i : j + 1]),0,0,25,0,1,1,0,0,0
14,dfs(j + 1),0,0,10,0,1,0,0,0,0
15,part.pop(),0,0,10,0,0,1,0,0,0
16,dfs(0),0,0,6,0,0,0,0,0,0
17,return res,0,1,10,0,0,0,0,0,0
19,"def isPali(self, s, l, r):",0,1,26,0,0,0,0,0,0
20,while l < r:,0,1,12,0,0,0,0,0,0
21,if s[l] != s[r]:,0,1,16,0,0,0,0,0,1
22,return False,0,1,12,0,0,0,0,0,0
24,"    return True
",0,1,16,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"text = ""This is a string with multiple words and numbers 1234567890.""",0,0,69,0,0,0,0,0,1
3,num = 10,0,0,8,0,0,0,0,0,1
6,result = bin(num),0,0,17,0,0,0,0,0,1
7,"print(""Binary representation of num: "", result)",0,0,47,0,0,0,0,0,0
10,count = 0,0,0,9,0,0,0,0,0,1
11,while num:,0,1,10,0,0,0,0,0,0
12,count += num & 1,0,0,16,0,1,0,0,1,1
13,num >>= 1,0,0,9,0,0,0,0,1,1
14,"print(""Number of set bits: "", count)",0,0,36,0,0,0,0,0,0
17,binary = bin(num)[2:],0,0,21,0,0,0,0,0,1
18,result = binary[::-1],0,0,21,0,1,0,0,0,1
19,"print(""Reversed binary representation: "", result)",0,0,49,0,0,0,0,0,0
22,num = num ^ (1 << (3 - 1)),0,0,26,0,1,0,0,1,1
23,"print(""Number after toggling 3rd bit: "", num)",0,0,45,0,0,0,0,0,0
26,"result = int(binary, 2)",0,0,23,0,0,0,0,0,1
27,"print(""Integer representation of binary: "", result)",0,0,51,0,0,0,0,0,0
30,result = text[::-1],0,0,19,0,1,0,0,0,1
31,"print(""Reversed text: "", result)",0,0,32,0,0,0,0,0,0
34,result = text.split(),0,0,21,0,0,0,0,0,1
35,"print(""Text split by whitespace: "", result)",0,0,43,0,0,0,0,0,0
38,"result = ""-"".join(text.split())",0,0,31,0,1,0,1,0,1
39,"print(""Text joined with '-': "", result)",0,0,39,0,1,0,1,0,0
42,result = len(text),0,0,18,0,0,0,0,0,1
43,"print(""Length of text: "", result)",0,0,33,0,0,0,0,0,0
46,result = text.upper(),1,0,21,0,0,0,0,0,1
48,"print(""Text in uppercase: "", result)",0,1,36,0,0,0,0,0,0
51,result = text.lower(),0,0,21,0,0,0,1,0,1
52,"print(""Text in lowercase: "", result)",0,1,36,0,0,0,1,0,0
55,"result = text.replace(""is"", ""was"")",0,1,34,0,0,0,1,0,1
56,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
59,"result = [c for c in text]
",0,1,27,0,0,0,0,0,1
5,import sys,0,1,10,0,0,0,0,0,0
6,import random,0,1,13,0,0,0,0,0,0
7,from inline import Here,0,1,23,0,0,0,0,0,0
14,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
16,for iter in range(10):,0,1,22,0,0,0,0,0,0
17,"word = """"",0,0,9,0,0,0,0,0,1
18,"res = """"",0,0,8,0,0,0,0,0,1
19,for n in range(5):,0,1,18,0,0,0,0,0,0
21,"ch_idx = random.randint(0, 14)",0,0,30,0,0,0,0,0,1
22,word += chr(97 + ch_idx),0,0,24,0,1,0,0,0,1
23,res += chr(65 + ch_idx),0,0,23,0,1,0,0,0,1
25,"print(""\"""" + word + ""\"".upper() -> "" + res)",0,0,43,0,1,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
3,def num_to_hex(num): ,0,1,21,0,0,0,0,0,0
4,"return ""0x%x"" % num",0,1,19,0,0,0,0,0,0
7,def num_to_bin(num): ,0,1,21,0,0,0,0,0,0
8,return bin(num),0,1,15,0,0,0,0,0,0
11,def bin_str_to_int(bin_str): ,0,1,29,0,0,0,0,0,0
12,"return int(bin_str[2:], 2)",0,1,26,0,0,0,0,0,0
15,def hex_str_to_int(hex): ,0,1,25,0,0,0,0,0,0
16,"return int(hex[2:], 16)",0,1,23,0,0,0,0,0,0
19,def hex_str_to_bin_str(hex_str): ,0,1,33,0,0,0,0,0,0
20,return num_to_bin(hex_str_to_int(hex_str)),0,1,42,0,0,0,0,0,0
24,num = 0,0,0,7,0,0,0,0,0,1
25,hex = num_to_hex(num),0,0,21,0,0,0,0,0,1
28,num = 5,0,0,7,0,0,0,0,0,1
29,binary = num_to_bin(num),0,0,24,0,0,0,0,0,1
32,binary_str = '0b0101',0,0,21,0,0,0,0,0,1
33,num = bin_str_to_int(binary_str),0,0,32,0,0,0,0,0,1
36,hex_str = '0x01',0,0,16,0,0,0,0,0,1
37,num = hex_str_to_int(hex_str),0,0,29,0,0,0,0,0,1
40,hex_str = '0x02',0,0,16,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def trim_zeros(filt, trim=""fb""):",0,1,32,0,0,0,0,0,1
3,"""""""",0,0,3,0,0,0,0,0,0
4,Trim the leading and/or trailing zeros from a 1-D array or sequence.,0,1,68,0,1,0,0,0,0
6,Parameters,0,0,10,0,0,0,0,0,0
7,----------,0,0,10,0,1,0,0,0,0
8,filt : 1-D array or sequence,0,0,28,0,1,0,0,0,0
9,Input array.,0,0,12,0,0,0,0,0,0
10,"trim : str, optional",0,0,20,0,0,0,0,0,0
11,A string with 'f' representing trim from front and 'b' to trim from,0,1,67,0,0,0,0,0,0
12,"back. Default is 'fb', trim zeros from both front and back of the",0,1,65,0,0,0,0,0,0
13,array.,0,0,6,0,0,0,0,0,0
15,Returns,0,0,7,0,0,0,0,0,0
16,-------,0,0,7,0,1,0,0,0,0
17,trimmed : 1-D array or sequence,0,0,31,0,1,0,0,0,0
18,The result of trimming the input. The input data type is preserved.,0,0,67,0,0,0,0,0,0
20,Examples,0,0,8,0,0,0,0,0,0
21,--------,0,0,8,0,1,0,0,0,0
22,">>> a = np.array((0, 0, 0, 1, 2, 3, 0, 2, 1, 0))",0,0,48,0,0,0,0,1,1
23,>>> np.trim_zeros(a),0,0,20,0,0,0,0,1,0
24,"array([1, 2, 3, 0, 2, 1])",0,0,25,0,0,0,0,0,0
26,">>> np.trim_zeros(a, 'b')",0,0,25,0,0,0,0,1,0
27,"array([0, 0, 0, ..., 0, 2, 1])",0,0,30,0,0,0,0,0,0
29,"The input data type is preserved, list/tuple in means list/tuple out.",0,0,69,0,1,0,0,0,0
31,">>> np.trim_zeros([0, 1, 2, 0])",0,0,31,0,0,0,0,1,0
32,"[1, 2]",0,0,6,0,0,0,0,0,0
34,"""""""",0,0,3,0,0,0,0,0,0
35,first = 0,0,0,9,0,0,0,0,0,1
36,trim = trim.upper(),1,0,19,0,0,0,0,0,1
39,"if ""F"" in trim:",0,1,15,0,0,0,0,0,0
40,for i in filt:,0,1,14,0,0,0,0,0,0
41,if i != 0.0:,0,1,12,0,0,0,0,0,1
42,break,0,1,5,0,0,0,0,0,0
43,else:,0,1,5,0,0,0,0,0,0
44,first = first + 1,0,0,17,0,1,0,0,0,1
45,last = len(filt),0,1,16,0,0,0,0,0,1
47,"if ""B"" in trim:",0,1,15,0,0,0,0,0,0
48,for i in filt[::-1]:,0,1,20,0,1,0,0,0,0
49,if i != 0.0:,0,1,12,0,0,0,0,0,1
50,break,0,1,5,0,0,0,0,0,0
51,else:,0,1,5,0,0,0,0,0,0
53,    return filt[first:last],0,1,27,0,0,0,0,0,0
0,<<<<<<< HEAD,0,0,12,0,0,0,0,1,0
6,import sys,0,1,10,0,0,0,0,0,0
7,import random,0,1,13,0,0,0,0,0,0
8,from inline import Here,0,1,23,0,0,0,0,0,0
15,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
17,for iter in range(10):,0,1,22,0,0,0,0,0,0
19,"rand_len = random.randint(1, 10)",0,0,32,0,0,0,0,0,1
20,"letters = [chr(97 + random.randint(0, 25)) for i in range(rand_len)]",0,1,68,0,1,0,0,0,1
21,"word = """".join(letters)",0,0,23,0,0,0,1,0,1
24,"print(""'"" + "" ""*(10-len(word)) + word + ""'"")",0,0,44,0,1,0,0,0,0
28,=======,0,0,7,0,0,0,0,0,0
29,from inline import Here,0,1,23,0,0,0,0,0,0
32,"sample = ""Hello""",0,0,16,0,0,0,0,0,1
33,size_string = 32,0,0,16,0,0,0,0,0,1
34,doubled = sample.zfill(size_string),1,0,35,0,0,0,0,0,1
36,">>>>>>> sydney_classify
",0,1,24,0,0,0,0,1,0
0,import sys,0,1,10,0,0,0,0,0,0
1,import requests,0,1,15,0,0,0,0,0,0
2,import json,0,1,11,0,0,0,0,0,0
3,from collections import OrderedDict,0,1,35,0,0,0,0,0,0
4,from inline import Here,0,1,23,0,0,0,0,0,0
6,def __main__():,0,1,15,0,0,0,0,0,0
8,"CS_BASE_URL = ""https://cheatsheetseries.owasp.org/cheatsheets/%s.html""",0,1,70,0,1,0,0,0,1
11,response = requests.get(,0,0,24,0,0,0,0,0,1
12,"""https://raw.githubusercontent.com/OWASP/CheatSheetSeries/master/Index.md""",0,1,74,0,1,0,0,0,0
13,),0,0,1,0,0,0,0,0,0
14,if response.status_code != 200:,0,1,31,0,0,0,0,0,1
15,"print(""Cannot load the INDEX content: HTTP %s received!"" % response.status_code)",0,0,80,0,0,0,0,0,0
16,sys.exit(1),0,0,11,0,0,0,0,0,0
17,else:,0,1,5,0,0,0,0,0,0
18,data = OrderedDict({}),0,0,22,0,0,0,0,0,1
19,"for line in response.text.split(""\n""):",0,1,38,0,0,0,0,0,0
20,"if ""(assets/Index_"" in line:",0,1,28,0,1,0,0,0,0
21,work = line.strip(),0,0,19,0,0,0,0,0,1
23,"cs_name = work[1 : work.index(""]"")]",1,0,35,0,0,0,0,0,1
26,"technologies = work.split(""!"")[1:]",1,0,34,0,0,0,0,0,1
28,for technology in technologies:,0,1,31,0,0,0,0,0,0
29,"technology_name = technology[1 : technology.index(""]"")].upper()",1,0,63,0,0,0,0,0,1
31,if technology_name not in data:,0,1,31,0,0,0,0,0,0
32,data[technology_name] = [],0,0,26,0,0,0,0,0,1
33,data[technology_name].append(,0,0,29,0,0,1,0,0,0
34,{,0,0,1,0,0,0,0,0,0
35,"""CS_NAME"": cs_name,",0,0,19,0,0,0,0,0,0
36,"""CS_URL"": CS_BASE_URL % cs_name.replace("" "", ""_""),",0,0,50,0,0,0,1,0,0
37,},0,0,1,0,0,0,0,0,0
38,),0,0,1,0,0,0,0,0,0
41,"        sys.exit(0)
",0,0,20,0,0,0,0,0,0
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
4,num = 10,0,0,8,0,0,0,0,0,1
7,result = text[::-1],0,0,19,0,1,0,0,0,1
8,"print(""Reversed text: "", result)",0,0,32,0,0,0,0,0,0
11,"result = re.findall(r""\bs\w+"", text)",0,0,36,1,1,0,0,0,1
12,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
15,count = 0,0,0,9,0,0,0,0,0,1
16,while num:,0,1,10,0,0,0,0,0,0
17,count += num & 1,0,0,16,0,1,0,0,1,1
18,num >>= 1,0,0,9,0,0,0,0,1,1
19,"print(""Number of set bits: "", count)",0,0,36,0,0,0,0,0,0
22,"result = ""-"".join(text.split())",0,0,31,0,1,0,1,0,1
23,"print(""Text joined with '-': "", result)",0,0,39,0,1,0,1,0,0
26,"result = re.sub(""is"", ""was"", text)",0,1,34,1,0,0,0,0,1
27,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
30,num = num ^ (1 << (3 - 1)),0,0,26,0,1,0,0,1,1
31,"print(""Number after toggling 3rd bit: "", num)",0,0,45,0,0,0,0,0,0
34,result = len(text),1,0,18,0,0,0,0,0,1
36,"print(""Length of text: "", result)",0,0,33,0,0,0,0,0,0
39,"result = re.findall(r""\d"", text)",0,0,32,1,0,0,0,0,1
40,"print(""Digits in text: "", result)",0,0,33,0,0,0,0,0,0
43,result = bin(num),0,0,17,0,0,0,0,0,1
44,"print(""Binary representation of num: "", result)",0,0,47,0,0,0,0,0,0
48,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def expand_hostname_range(line=None):,0,1,37,0,0,0,0,0,1
3,''',0,0,3,0,0,0,0,0,0
4,A helper function that expands a given line that contains a pattern,0,0,67,0,0,0,0,0,0
5,"specified in top docstring, and returns a list that consists of the",0,1,67,0,0,0,0,0,0
6,expanded version.,0,0,17,0,0,0,0,0,0
8,The '[' and ']' characters are used to maintain the pseudo-code,0,0,63,0,1,0,0,0,0
9,appearance. They are replaced in this function with '|' to ease,0,1,63,0,0,0,1,1,0
10,string splitting.,0,0,17,0,0,0,0,0,0
12,References: https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html,0,0,83,0,1,0,0,0,0
13,''',0,0,3,0,0,0,0,0,0
14,all_hosts = [],0,0,14,0,0,0,0,0,1
15,if line:,0,1,8,0,0,0,0,0,0
29,"(head, nrange, tail) = line.replace('[', '|', 1).replace(']', '|', 1).split('|')",1,0,80,0,0,0,1,1,1
31,"bounds = nrange.split("":"")",1,0,26,0,0,0,0,0,1
33,if len(bounds) != 2 and len(bounds) != 3:,0,1,41,0,0,0,0,0,0
34,"raise AnsibleError(""host range must be begin:end or begin:end:step"")",0,1,68,0,0,0,0,0,0
35,beg = bounds[0],0,0,15,0,0,0,0,0,1
36,end = bounds[1],0,0,15,0,0,0,0,0,1
37,if len(bounds) == 2:,0,1,20,0,0,0,0,0,0
38,step = 1,0,0,8,0,0,0,0,0,1
39,else:,0,1,5,0,0,0,0,0,0
40,step = bounds[2],0,0,16,0,0,0,0,0,1
41,if not beg:,0,1,11,0,0,0,0,0,0
42,"beg = ""0""",0,0,9,0,0,0,0,0,1
43,if not end:,0,1,11,0,0,0,0,0,0
44,"raise AnsibleError(""host range must specify end value"")",0,1,55,0,0,0,0,0,0
45,if beg[0] == '0' and len(beg) > 1:,0,1,34,0,0,0,0,0,0
46,rlen = len(beg)  ,0,0,17,0,0,0,0,0,1
47,if rlen != len(end):,0,1,20,0,0,0,0,0,1
48,"raise AnsibleError(""host range must specify equal-length begin and end formats"")",0,1,80,0,1,0,1,0,0
50,def fill(x):,0,1,12,0,0,0,0,0,0
51,return str(x).zfill(rlen)  ,0,1,27,0,0,0,0,0,0
53,else:,0,1,5,0,0,0,0,0,0
54,fill = str,0,0,10,0,0,0,0,0,1
56,try:,0,1,4,0,0,0,0,0,0
57,i_beg = string.ascii_letters.index(beg),0,1,39,0,0,0,0,0,1
58,i_end = string.ascii_letters.index(end),0,1,39,0,0,0,0,0,1
59,if i_beg > i_end:,0,1,17,0,0,0,0,0,0
60,"raise AnsibleError(""host range must have begin <= end"")",0,1,55,0,0,0,0,0,1
61,seq = list(string.ascii_letters[i_beg:i_end + 1:int(step)]),0,1,59,0,1,0,0,0,1
62,except ValueError:  ,0,1,20,0,0,0,0,0,0
63,"seq = range(int(beg), int(end) + 1, int(step))",0,0,46,0,1,0,0,0,1
65,for rseq in seq:,0,1,16,0,0,0,0,0,0
66,"hname = ''.join((head, fill(rseq), tail))",0,0,41,0,0,0,1,0,1
68,if detect_range(hname):,0,1,23,0,0,0,0,0,0
69,all_hosts.extend(expand_hostname_range(hname)),0,0,46,0,0,1,0,0,0
70,else:,0,1,5,0,0,0,0,0,0
71,all_hosts.append(hname),0,0,23,0,0,1,0,0,0
73,        return all_hosts,0,1,24,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
4,"s = ""hi there""",0,0,14,0,0,0,0,0,1
5,split_str_list = s.split(),0,0,26,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
3,def num_to_hex(num): ,0,1,21,0,0,0,0,0,0
4,"return ""0x%x"" % num",0,1,19,0,0,0,0,0,0
7,def num_to_bin(num): ,0,1,21,0,0,0,0,0,0
8,return bin(num),0,1,15,0,0,0,0,0,0
11,def bin_str_to_int(bin_str): ,0,1,29,0,0,0,0,0,0
12,"return int(bin_str[2:], 2)",0,1,26,0,0,0,0,0,0
15,def hex_str_to_int(hex): ,0,1,25,0,0,0,0,0,0
16,"return int(hex[2:], 16)",0,1,23,0,0,0,0,0,0
19,def hex_str_to_bin_str(hex_str): ,0,1,33,0,0,0,0,0,0
20,return num_to_bin(hex_str_to_int(hex_str)),0,1,42,0,0,0,0,0,0
24,num = 0,0,0,7,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,class Solution(object):,0,1,23,0,0,0,0,0,0
3,"def permuteUnique(self, nums):",0,1,30,0,0,0,0,0,0
5,res = [[]],0,0,10,0,0,0,0,0,1
6,for i in range(len(nums)):,0,1,26,0,0,0,0,0,0
7,cache = set(),0,0,13,0,0,0,0,0,1
8,while len(res[0]) == i:,0,1,23,0,0,0,0,0,0
9,curr = res.pop(0),0,0,17,0,0,1,0,0,1
10,for j in range(len(curr) + 1):,0,1,30,0,1,0,0,0,0
12,new_perm = curr[:j] + [nums[i]] + curr[j:],0,0,42,0,1,0,0,0,1
13,print(new_perm),0,0,15,0,0,0,0,0,0
14,"stemp = ''.join(map(str, new_perm))",1,0,35,0,0,0,1,0,1
17,print(stemp),0,0,12,0,0,0,0,0,0
18,if stemp not in cache:,0,1,22,0,0,0,0,0,0
19,cache.add(stemp),0,0,16,0,0,0,0,0,0
20,res.append(new_perm),0,0,20,0,0,1,0,0,0
21,return res,0,1,10,0,0,0,0,0,0
23,"Solution.permuteUnique(""l"", '1234')",0,0,35,0,0,0,0,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
6,"string1 = ""abcdefg""",0,1,19,0,0,0,0,0,1
7,"string2 = ""abd""",0,0,15,0,0,0,0,0,1
9,class MWS:,0,1,10,0,0,0,0,0,0
10,"def minWindow(self, s: str, t: str) -> str:",0,1,43,0,1,0,0,0,0
11,"if t == """":",0,1,11,0,0,0,0,0,0
12,"return """"",0,1,9,0,0,0,0,0,0
14,"countT, window = {}, {}",0,0,23,0,0,0,0,0,1
15,for c in t:,0,1,11,0,0,0,0,0,0
16,"countT[c] = 1 + countT.get(c, 0)",0,0,32,0,1,0,0,0,1
18,"have, need = 0, len(countT)",0,0,27,0,0,0,0,0,1
19,"res, resLen = [-1, -1], float(""infinity"")",0,0,41,0,1,0,0,0,1
20,l = 0,0,0,5,0,0,0,0,0,1
21,for r in range(len(s)):,0,1,23,0,0,0,0,0,0
22,c = s[r],0,0,8,0,0,0,0,0,1
23,"window[c] = 1 + window.get(c, 0)",0,0,32,0,1,0,0,0,1
25,if c in countT and window[c] == countT[c]:,0,1,42,0,0,0,0,0,0
26,have += 1,0,0,9,0,1,0,0,0,1
28,while have == need:,0,1,19,0,0,0,0,0,0
30,if (r - l + 1) < resLen:,0,1,24,0,1,0,0,0,0
31,"res = [l, r]",0,0,12,0,0,0,0,0,1
32,resLen = r - l + 1,0,0,18,0,1,0,0,0,1
34,window[s[l]] -= 1,0,0,17,0,1,0,0,0,1
35,if s[l] in countT and window[s[l]] < countT[s[l]]:,0,1,50,0,0,0,0,0,0
36,have -= 1,0,0,9,0,1,0,0,0,1
37,l += 1,0,0,6,0,1,0,0,0,1
38,"l, r = res",0,0,10,0,0,0,0,0,1
39,"return s[l : r + 1] if resLen != float(""infinity"") else """"",0,1,58,0,1,0,0,0,1
41,"def check(self, s: str, t: str) -> bool:",0,1,40,0,1,0,0,0,0
42,set1 = set(s),0,0,13,0,0,0,0,0,1
43,set2 = set(t),0,0,13,0,0,0,0,0,1
45,for c in set2:,0,1,14,0,0,0,0,0,0
46,if c not in set1:,0,1,17,0,0,0,0,0,0
47,return False,0,1,12,0,0,0,0,0,0
49,return True,0,1,11,0,0,0,0,0,0
51,mws = MWS(),0,0,11,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"text = ""This is a string with multiple words and numbers 1234567890.""",0,0,69,0,0,0,0,0,1
3,num = 10,0,0,8,0,0,0,0,0,1
6,result = bin(num),0,0,17,0,0,0,0,0,1
7,"print(""Binary representation of num: "", result)",0,0,47,0,0,0,0,0,0
10,count = 0,0,0,9,0,0,0,0,0,1
11,while num:,0,1,10,0,0,0,0,0,0
12,count += num & 1,0,0,16,0,1,0,0,1,1
13,num >>= 1,0,0,9,0,0,0,0,1,1
14,"print(""Number of set bits: "", count)",0,0,36,0,0,0,0,0,0
17,binary = bin(num)[2:],0,0,21,0,0,0,0,0,1
18,result = binary[::-1],0,0,21,0,1,0,0,0,1
19,"print(""Reversed binary representation: "", result)",0,0,49,0,0,0,0,0,0
22,num = num ^ (1 << (3 - 1)),0,0,26,0,1,0,0,1,1
23,"print(""Number after toggling 3rd bit: "", num)",0,0,45,0,0,0,0,0,0
26,"result = int(binary, 2)",0,0,23,0,0,0,0,0,1
27,"print(""Integer representation of binary: "", result)",0,0,51,0,0,0,0,0,0
30,result = text[::-1],0,0,19,0,1,0,0,0,1
31,"print(""Reversed text: "", result)",0,0,32,0,0,0,0,0,0
34,result = text.split(),0,0,21,0,0,0,0,0,1
35,"print(""Text split by whitespace: "", result)",0,0,43,0,0,0,0,0,0
38,"result = ""-"".join(text.split())",0,0,31,0,1,0,1,0,1
39,"print(""Text joined with '-': "", result)",0,0,39,0,1,0,1,0,0
42,result = len(text),0,0,18,0,0,0,0,0,1
43,"print(""Length of text: "", result)",0,0,33,0,0,0,0,0,0
46,result = text.upper(),0,0,21,0,0,0,0,0,1
47,"print(""Text in uppercase: "", result)",0,1,36,0,0,0,0,0,0
50,result = text.lower(),0,0,21,0,0,0,1,0,1
51,"print(""Text in lowercase: "", result)",0,1,36,0,0,0,1,0,0
54,"result = text.replace(""is"", ""was"")",0,1,34,0,0,0,1,0,1
55,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
58,result = [c for c in text],1,1,26,0,0,0,0,0,1
60,"print(""Text split into individual characters: "", result)
",0,0,57,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def _split(self, data):",0,1,23,0,0,0,0,0,0
3,"""""""",0,0,3,0,0,0,0,0,0
4,Split the Type 1 font into its three main parts.,0,0,48,0,0,0,0,0,0
6,"The three parts are: (1) the cleartext part, which ends in a",0,0,60,0,0,1,0,0,0
7,"eexec operator; (2) the encrypted part; (3) the fixed part,",0,0,59,0,0,0,0,0,0
8,which contains 512 ASCII zeros possibly divided on various,0,0,58,0,0,0,0,0,0
9,"lines, a cleartomark operator, and possibly something else.",0,1,59,0,0,1,0,0,0
10,"""""""",0,0,3,0,0,0,0,0,0
14,"idx = data.index(b""eexec"")",1,0,26,0,0,0,0,0,1
16,"idx += len(b""eexec"")",1,0,20,0,1,0,0,0,1
18,"while data[idx] in b"" \t\r\n"":",0,1,30,0,0,0,0,0,0
19,idx += 1,0,0,8,0,1,0,0,0,1
20,len1 = idx,0,0,10,0,0,0,0,0,1
24,"idx = data.rindex(b""cleartomark"") - 1",1,0,37,0,1,1,0,0,1
26,zeros = 512,0,0,11,0,0,0,0,0,1
27,"while zeros and data[idx] in b""0"" or data[idx] in b""\r\n"":",0,1,58,0,0,0,0,0,0
28,"if data[idx] in b""0"":",0,1,21,0,0,0,0,0,0
29,zeros -= 1,0,0,10,0,1,0,0,0,1
30,idx -= 1,0,0,8,0,1,0,0,0,1
32,if zeros:,0,1,9,0,0,0,0,0,0
35,"_log.info(""Insufficiently many zeros in Type 1 font"")",0,0,53,0,0,0,0,0,0
41,idx1 = len1 + ((idx - len1 + 2) & ~1)  ,0,0,39,0,1,0,0,1,1
42,binary = binascii.unhexlify(data[len1:idx1]),0,1,44,0,0,0,0,0,1
44,"    return data[:len1], binary, data[idx + 1 :]
",0,1,48,0,1,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def longestPalindrome(self, s: str) -> str:",0,1,43,0,1,0,0,0,0
3,"res = """"",0,0,8,0,0,0,0,0,1
4,resLen = 0,0,0,10,0,0,0,0,0,1
6,for i in range(len(s)):,0,1,23,0,0,0,0,0,0
8,"l, r = i, i",0,0,11,0,0,0,0,0,1
9,while l >= 0 and r < len(s) and s[l] == s[r]:,0,1,45,0,0,0,0,0,0
10,if (r - l + 1) > resLen:,0,1,24,0,1,0,0,0,0
11,res = s[l : r + 1],0,0,18,0,1,0,0,0,1
14,resLen = r - l + 1,0,0,18,0,1,0,0,0,1
15,l -= 1,0,0,6,0,1,0,0,0,1
16,r += 1,0,0,6,0,1,0,0,0,1
19,"l, r = i, i + 1",0,0,15,0,1,0,0,0,1
20,while l >= 0 and r < len(s) and s[l] == s[r]:,0,1,45,0,0,0,0,0,0
21,if (r - l + 1) > resLen:,0,1,24,0,1,0,0,0,0
22,res = s[l : r + 1],0,0,18,0,1,0,0,0,1
23,resLen = r - l + 1,0,0,18,0,1,0,0,0,1
24,l -= 1,0,0,6,0,1,0,0,0,1
25,r += 1,0,0,6,0,1,0,0,0,1
27,"    return res
",0,1,15,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def encode(longUrl: str) -> str:,0,1,32,0,1,0,1,0,0
3,encodeMap = {},0,0,14,0,0,0,1,0,1
4,decodeMap = {},0,0,14,0,0,0,0,0,1
5,"base = ""http://tinyurl.com/""",0,1,28,0,1,0,0,0,1
6,if longUrl not in encodeMap:,0,1,28,0,0,0,1,0,0
7,shortUrl = base + str(len(encodeMap) + 1),0,1,41,0,1,0,1,0,1
10,encodeMap[longUrl] = shortUrl,0,0,29,0,0,0,1,0,1
11,decodeMap[shortUrl] = longUrl,0,0,29,0,0,0,0,0,1
12,return encodeMap[longUrl],0,1,25,0,0,0,1,0,0
15,"    return self.decodeMap[shortUrl]
",0,1,36,0,0,0,0,0,0
2,from inline import Here,0,1,23,0,0,0,0,0,0
4,class Solution(object):,0,1,23,0,0,0,0,0,0
5,"def simplifyPath(self, path):",0,1,29,0,0,0,0,0,0
6,"""""""",0,0,3,0,0,0,0,0,0
7,:type path: str,0,0,15,0,0,0,0,0,0
8,:rtype: str,0,0,11,0,0,0,0,0,0
9,"""""""",0,0,3,0,0,0,0,0,0
10,result = [],0,0,11,0,0,0,0,0,1
11,plist = path.split('/'),0,0,23,0,1,0,0,0,1
12,for pos in plist:,0,1,17,0,0,0,0,0,0
13,if pos:,0,1,7,0,0,0,0,0,0
14,if pos == '..':,0,1,15,0,0,0,0,0,0
15,try:,0,1,4,0,0,0,0,0,0
17,result.pop(),0,0,12,0,0,1,0,0,0
18,except:,0,1,7,0,0,0,0,0,0
20,result = [],0,0,11,0,0,0,0,0,1
21,elif pos != '.':,0,1,16,0,0,0,0,0,1
22,result.append(pos),0,0,18,0,0,1,0,0,0
23,print(result),0,0,13,0,0,0,0,0,0
24,result2 = '/'+'/'.join(result),1,0,30,0,1,0,1,0,1
27,return result2,0,1,14,0,0,0,0,0,0
29,"print(Solution.simplifyPath(""s"", ""he/4/  //1/./65d""))",0,1,53,0,1,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
3,def num_to_hex(num): ,0,1,21,0,0,0,0,0,0
4,"return ""0x%x"" % num",0,1,19,0,0,0,0,0,0
7,def num_to_bin(num): ,0,1,21,0,0,0,0,0,0
8,return bin(num),0,1,15,0,0,0,0,0,0
11,def bin_str_to_int(bin_str): ,0,1,29,0,0,0,0,0,0
12,"return int(bin_str[2:], 2)",0,1,26,0,0,0,0,0,0
15,def hex_str_to_int(hex): ,0,1,25,0,0,0,0,0,0
16,"return int(hex[2:], 16)",0,1,23,0,0,0,0,0,0
19,def hex_str_to_bin_str(hex_str): ,0,1,33,0,0,0,0,0,0
20,return num_to_bin(hex_str_to_int(hex_str)),0,1,42,0,0,0,0,0,0
24,num = 0,0,0,7,0,0,0,0,0,1
25,hex = num_to_hex(num),0,0,21,0,0,0,0,0,1
28,num = 5,0,0,7,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def git_versions_from_keywords(keywords, tag_prefix, verbose):",0,1,62,0,0,0,0,0,0
3,"""""""Get version information from git keywords.""""""",0,1,48,0,0,0,1,0,0
4,if not keywords:,0,1,16,0,0,0,0,0,0
5,"raise NotThisMethod(""no keywords at all, weird"")",0,1,48,0,0,0,0,0,0
6,"date = keywords.get(""date"")",0,0,27,0,0,0,0,0,1
7,if date is not None:,0,1,20,0,0,0,0,0,0
17,"date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)",1,0,60,0,0,0,1,0,1
19,"refnames = keywords[""refnames""].strip()",0,0,39,0,0,0,0,0,1
20,"if refnames.startswith(""$Format""):",0,1,34,0,0,0,0,0,0
21,if verbose:,0,1,11,0,0,0,0,0,0
22,"print(""keywords are unexpanded, not using"")",0,0,43,0,0,0,0,0,0
23,"raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")",0,1,69,0,1,0,0,0,0
24,"refs = set([r.strip() for r in refnames.strip(""()"").split("","")])",0,1,64,0,0,0,0,0,1
27,"TAG = ""tag: """,0,0,13,0,0,0,0,0,1
28,tags = set([r[len(TAG) :] for r in refs if r.startswith(TAG)]),1,1,62,0,0,0,0,0,1
31,if not tags:,0,1,12,0,0,0,0,0,0
39,"tags = set([r for r in refs if re.search(r""\d"", r)])",1,1,52,1,0,0,0,0,1
41,if verbose:,0,1,11,0,0,0,0,0,0
42,"print(""discarding '%s', no digits"" % "","".join(refs - tags))",0,0,59,0,1,0,1,0,0
43,if verbose:,0,1,11,0,0,0,0,0,0
44,"print(""likely tags: %s"" % "","".join(sorted(tags)))",0,0,49,0,0,1,1,0,0
45,for ref in sorted(tags):,0,1,24,0,0,1,0,0,0
47,if ref.startswith(tag_prefix):,0,1,30,0,0,0,0,0,0
48,r = ref[len(tag_prefix) :],0,0,26,0,0,0,0,0,1
49,if verbose:,0,1,11,0,0,0,0,0,0
50,"print(""picking %s"" % r)",0,0,23,0,0,0,0,0,0
51,return {,0,1,8,0,0,0,0,0,0
52,"""version"": r,",0,0,13,0,0,0,0,0,0
53,"""full-revisionid"": keywords[""full""].strip(),",0,0,44,0,1,0,0,0,0
54,"""dirty"": False,",0,0,15,0,0,0,0,0,0
55,"""error"": None,",0,0,14,0,0,0,0,0,0
56,"""date"": date,",0,0,13,0,0,0,0,0,0
57,},0,0,1,0,0,0,0,0,0
59,if verbose:,0,1,11,0,0,0,0,0,0
60,"print(""no suitable tags, using unknown + full revision id"")",0,0,59,0,1,0,0,0,0
61,return {,0,1,8,0,0,0,0,0,0
62,"""version"": ""0+unknown"",",0,0,23,0,1,0,0,0,0
63,"""full-revisionid"": keywords[""full""].strip(),",0,0,44,0,1,0,0,0,0
64,"""dirty"": False,",0,0,15,0,0,0,0,0,0
65,"""error"": ""no suitable tags"",",0,0,28,0,0,0,0,0,0
67,"    }
",0,0,6,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"text = ""This is a string with multiple words and numbers 1234567890.""",0,0,69,0,0,0,0,0,1
3,num = 10,0,0,8,0,0,0,0,0,1
6,result = bin(num),0,0,17,0,0,0,0,0,1
7,"print(""Binary representation of num: "", result)",0,0,47,0,0,0,0,0,0
10,count = 0,0,0,9,0,0,0,0,0,1
11,while num:,0,1,10,0,0,0,0,0,0
12,count += num & 1,0,0,16,0,1,0,0,1,1
13,num >>= 1,0,0,9,0,0,0,0,1,1
14,"print(""Number of set bits: "", count)",0,0,36,0,0,0,0,0,0
17,binary = bin(num)[2:],0,0,21,0,0,0,0,0,1
18,result = binary[::-1],0,0,21,0,1,0,0,0,1
19,"print(""Reversed binary representation: "", result)",0,0,49,0,0,0,0,0,0
22,num = num ^ (1 << (3 - 1)),0,0,26,0,1,0,0,1,1
23,"print(""Number after toggling 3rd bit: "", num)",0,0,45,0,0,0,0,0,0
26,"result = int(binary, 2)",0,0,23,0,0,0,0,0,1
27,"print(""Integer representation of binary: "", result)",0,0,51,0,0,0,0,0,0
30,result = text[::-1],0,0,19,0,1,0,0,0,1
31,"print(""Reversed text: "", result)",0,0,32,0,0,0,0,0,0
34,result = text.split(),0,0,21,0,0,0,0,0,1
35,"print(""Text split by whitespace: "", result)",0,0,43,0,0,0,0,0,0
38,"result = ""-"".join(text.split())",0,0,31,0,1,0,1,0,1
39,"print(""Text joined with '-': "", result)",0,0,39,0,1,0,1,0,0
42,result = len(text),0,0,18,0,0,0,0,0,1
43,"print(""Length of text: "", result)",0,0,33,0,0,0,0,0,0
46,result = text.upper(),0,0,21,0,0,0,0,0,1
47,"print(""Text in uppercase: "", result)",0,1,36,0,0,0,0,0,0
50,result = text.lower(),1,0,21,0,0,0,1,0,1
52,"print(""Text in lowercase: "", result)",0,1,36,0,0,0,1,0,0
55,"result = text.replace(""is"", ""was"")",0,1,34,0,0,0,1,0,1
56,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
59,"result = [c for c in text]
",0,1,27,0,0,0,0,0,1
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
4,num = 10,0,0,8,0,0,0,0,0,1
7,result = text[::-1],0,0,19,0,1,0,0,0,1
8,"print(""Reversed text: "", result)",0,0,32,0,0,0,0,0,0
11,"result = re.findall(r""\bs\w+"", text)",0,0,36,1,1,0,0,0,1
12,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
15,count = 0,0,0,9,0,0,0,0,0,1
16,while num:,0,1,10,0,0,0,0,0,0
17,count += num & 1,0,0,16,0,1,0,0,1,1
18,num >>= 1,0,0,9,0,0,0,0,1,1
19,"print(""Number of set bits: "", count)",0,0,36,0,0,0,0,0,0
22,"result = ""-"".join(text.split())",0,0,31,0,1,0,1,0,1
23,"print(""Text joined with '-': "", result)",0,0,39,0,1,0,1,0,0
26,"result = re.sub(""is"", ""was"", text)",0,1,34,1,0,0,0,0,1
27,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
30,num = num ^ (1 << (3 - 1)),1,0,26,0,1,0,0,1,1
32,"print(""Number after toggling 3rd bit: "", num)",0,0,45,0,0,0,0,0,0
35,result = len(text),0,0,18,0,0,0,0,0,1
36,"print(""Length of text: "", result)",0,0,33,0,0,0,0,0,0
39,"result = re.findall(r""\d"", text)",0,0,32,1,0,0,0,0,1
40,"print(""Digits in text: "", result)",0,0,33,0,0,0,0,0,0
43,result = bin(num),0,0,17,0,0,0,0,0,1
44,"print(""Binary representation of num: "", result)",0,0,47,0,0,0,0,0,0
48,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
0,"from typing import Any, Dict",0,1,28,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"def __call__(self, line: str, ans: Dict[str, Any]) -> None:",0,1,59,0,1,0,0,0,0
4,is_block = line.startswith(',1,0,28,0,0,0,0,0,1
7,if self.in_metadata and not is_block:,0,1,37,0,0,0,0,0,0
8,self.keep_going = False,0,0,23,0,0,0,0,0,1
9,return,0,1,6,0,0,0,0,0,0
10,if not self.in_metadata and is_block:,0,1,37,0,0,0,0,0,0
11,self.in_metadata = True,0,0,23,0,0,0,0,0,1
12,if not self.in_metadata:,0,1,24,0,0,0,0,0,0
13,return,0,1,6,0,0,0,0,0,0
14,line = line[3:],0,0,15,0,0,0,0,0,1
15,if self.in_blurb:,0,1,17,0,0,0,0,0,0
16,ans['blurb'] += ' ' + line,0,0,26,0,1,0,0,0,1
17,return,0,1,6,0,0,0,0,0,0
18,try:,0,1,4,0,0,0,0,0,0
19,"key, val = line.split(':', 1)",1,0,29,0,0,0,0,0,1
21,except Exception:,0,1,17,0,0,0,0,0,0
22,self.keep_going = False,0,0,23,0,0,0,0,0,1
23,return,0,1,6,0,0,0,0,0,0
24,key = key.strip().lower(),0,0,25,0,0,0,1,0,1
25,val = val.strip(),0,0,17,0,0,0,0,0,1
26,if val:,0,1,7,0,0,0,0,0,0
27,ans[key] = val,0,0,14,0,0,0,0,0,1
29,"        self.in_blurb = True
",0,0,29,0,0,0,0,0,1
0,import re,0,1,9,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"text = ""This is a sentence with multiple words and numbers 1234567890.""",0,0,71,0,0,0,0,0,1
4,num = 10,0,0,8,0,0,0,0,0,1
7,result = text[::-1],0,0,19,0,1,0,0,0,1
8,"print(""Reversed text: "", result)",0,0,32,0,0,0,0,0,0
11,"result = re.findall(r""\bs\w+"", text)",0,0,36,1,1,0,0,0,1
12,"print(""Words starting with 's': "", result)",0,0,42,0,0,0,0,0,0
15,count = 0,0,0,9,0,0,0,0,0,1
16,while num:,0,1,10,0,0,0,0,0,0
17,count += num & 1,0,0,16,0,1,0,0,1,1
18,num >>= 1,0,0,9,0,0,0,0,1,1
19,"print(""Number of set bits: "", count)",0,0,36,0,0,0,0,0,0
22,"result = ""-"".join(text.split())",1,0,31,0,1,0,1,0,1
24,"print(""Text joined with '-': "", result)",0,0,39,0,1,0,1,0,0
27,"result = re.sub(""is"", ""was"", text)",0,1,34,1,0,0,0,0,1
28,"print(""Text with 'is' replaced: "", result)",0,0,42,0,0,0,1,0,0
31,num = num ^ (1 << (3 - 1)),0,0,26,0,1,0,0,1,1
32,"print(""Number after toggling 3rd bit: "", num)",0,0,45,0,0,0,0,0,0
35,result = len(text),0,0,18,0,0,0,0,0,1
36,"print(""Length of text: "", result)",0,0,33,0,0,0,0,0,0
39,"result = re.findall(r""\d"", text)",0,0,32,1,0,0,0,0,1
40,"print(""Digits in text: "", result)",0,0,33,0,0,0,0,0,0
43,result = bin(num),0,0,17,0,0,0,0,0,1
44,"print(""Binary representation of num: "", result)",0,0,47,0,0,0,0,0,0
48,"print(""Text split by whitespace: "", result)
",0,0,44,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def _normalize(self, name, columns, points):",0,1,44,0,0,0,0,0,0
3,"""""""Normalize data for the InfluxDB's data model.",0,1,48,0,0,0,0,0,0
5,:return: a list of measurements.,0,1,32,0,0,0,0,0,0
6,"""""""",0,0,3,0,0,0,0,0,0
7,ret = [],0,0,8,0,0,0,0,0,1
10,"data_dict = dict(zip(columns, points))",0,0,38,0,0,0,0,0,1
14,"keys_list = [k.split(""."")[0] for k in columns if k.endswith("".key"")]",1,1,68,0,0,0,0,0,1
17,if len(keys_list) == 0:,0,1,23,0,0,0,0,0,0
18,keys_list = [None],0,0,18,0,0,0,0,0,1
20,for measurement in keys_list:,0,1,29,0,0,0,0,0,0
22,if measurement is not None:,0,1,27,0,0,0,0,0,0
23,fields = {,0,0,10,0,0,0,0,0,1
24,"k.replace(""{}."".format(measurement), """"): data_dict[k]",0,1,54,0,0,0,1,0,0
25,for k in data_dict,0,1,18,0,0,0,0,0,0
26,"if k.startswith(""{}."".format(measurement))",0,1,42,0,0,0,1,0,0
27,},0,0,1,0,0,0,0,0,0
28,else:,0,1,5,0,0,0,0,0,0
29,fields = data_dict,0,0,18,0,0,0,0,0,1
32,for k in fields:,0,1,16,0,0,0,0,0,0
34,if fields[k] is None:,0,1,21,0,0,0,0,0,0
35,continue,0,1,8,0,0,0,0,0,0
37,try:,0,1,4,0,0,0,0,0,0
38,fields[k] = float(fields[k]),0,0,28,0,0,0,0,0,1
39,"except (TypeError, ValueError):",0,1,31,0,0,0,0,0,0
41,try:,0,1,4,0,0,0,0,0,0
42,fields[k] = str(fields[k]),0,0,26,0,0,0,0,0,1
43,"except (TypeError, ValueError):",0,1,31,0,0,0,0,0,0
44,pass,0,1,4,0,0,0,0,0,0
46,tags = self.parse_tags(self.tags),0,0,33,0,0,0,0,0,1
47,"if ""key"" in fields and fields[""key""] in fields:",0,1,47,0,0,0,0,0,0
50,"tags[fields[""key""]] = str(fields[fields[""key""]])",0,0,48,0,0,0,0,0,1
52,"fields.pop(fields[""key""])",0,0,25,0,0,1,0,0,0
54,"tags[""hostname""] = self.hostname",0,0,32,0,0,0,0,0,1
57,"    return ret
",0,1,15,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import re,0,1,9,0,0,0,0,0,0
7,import random,0,1,13,0,0,0,0,0,0
8,from inline import Here,0,1,23,0,0,0,0,0,0
16,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
18,"bin_dig = [""0"", ""1""]",0,0,20,0,0,0,0,0,1
19,for iter in range(10):,0,1,22,0,0,0,0,0,0
21,"bin_num = """"",0,0,12,0,0,0,0,0,1
22,for digit in range(8):,0,1,22,0,0,0,0,0,0
23,"bin_num = bin_num + str(bin_dig[random.randint(0, 1)])",0,0,54,0,1,0,0,0,1
26,"left_bit = str(hex(int(bin_num[0:4], 2)))",0,0,41,0,0,0,0,0,1
27,"right_bit = str(hex(int(bin_num[4:8], 2)))",0,0,42,0,0,0,0,0,1
28,"res_hex = ""0x"" + left_bit[2] + right_bit[2]",0,0,43,0,1,0,0,0,1
29,"print(""0b""+ bin_num + "" -> "" + res_hex)",0,0,39,0,1,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,from collections import deque,0,1,29,0,0,0,0,0,0
4,"def calculate(self, s):",0,1,23,0,0,0,0,0,0
5,def precedence(c):,0,1,18,0,0,0,0,0,0
6,return c == '*' or c == '/',0,1,27,0,1,0,0,0,0
7,def toPostfix(s):,0,1,17,0,0,0,0,0,0
8,"op, post = deque(), ''",0,0,22,0,0,0,0,0,1
9,for c in s:,0,1,11,0,0,0,0,0,0
10,if c == ' ': continue,0,1,21,0,0,0,0,0,0
11,elif c.isdigit(): post += c,0,1,27,0,1,0,0,0,1
12,else:,0,1,5,0,0,0,0,0,0
13,post += '|',0,0,11,0,1,0,0,1,1
14,while op and precedence(c) <= precedence(op[-1]):,0,1,49,0,1,0,0,0,1
15,post += op.pop(),0,0,16,0,1,1,0,0,1
16,op.append(c),0,0,12,0,0,1,0,0,0
18,return post + '|' + ''.join(reversed(op)),0,1,41,0,1,1,1,1,0
20,"s, num, i = toPostfix(s), deque(), 0",0,0,36,0,0,0,0,0,1
21,while i < len(s):,0,1,17,0,0,0,0,0,0
22,if s[i].isdigit():,0,1,18,0,0,0,0,0,0
23,"j = s.find('|', i+1)",0,0,20,0,1,0,0,1,1
26,num.append(int(s[i:j])),0,0,23,0,0,1,0,0,0
27,i = j,0,0,5,0,0,0,0,0,1
28,else:,0,1,5,0,0,0,0,0,0
29,"num1, num2 = num.pop(), num.pop()",0,0,33,0,0,1,0,0,1
30,if   s[i] == '*': num.append(num2 * num1),0,1,41,0,1,1,0,0,0
31,elif s[i] == '/': num.append(num2 // num1),0,1,42,0,1,1,0,0,0
32,elif s[i] == '+': num.append(num2 + num1),0,1,41,0,1,1,0,0,0
33,elif s[i] == '-': num.append(num2 - num1),0,1,41,0,1,1,0,0,0
34,i += 1,0,0,6,0,1,0,0,0,1
36,"    return num.pop()
",0,1,21,0,0,1,0,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
6,"string1 = ""abcdefg""",0,1,19,0,0,0,0,0,1
7,"string2 = ""abd""",0,0,15,0,0,0,0,0,1
9,class MWS:,0,1,10,0,0,0,0,0,0
10,"def minWindow(self, s: str, t: str) -> str:",0,1,43,0,1,0,0,0,0
11,"if t == """":",0,1,11,0,0,0,0,0,0
12,"return """"",0,1,9,0,0,0,0,0,0
14,"countT, window = {}, {}",0,0,23,0,0,0,0,0,1
15,for c in t:,0,1,11,0,0,0,0,0,0
16,"countT[c] = 1 + countT.get(c, 0)",0,0,32,0,1,0,0,0,1
18,"have, need = 0, len(countT)",0,0,27,0,0,0,0,0,1
19,"res, resLen = [-1, -1], float(""infinity"")",0,0,41,0,1,0,0,0,1
20,l = 0,0,0,5,0,0,0,0,0,1
21,for r in range(len(s)):,0,1,23,0,0,0,0,0,0
22,c = s[r],0,0,8,0,0,0,0,0,1
23,"window[c] = 1 + window.get(c, 0)",0,0,32,0,1,0,0,0,1
25,if c in countT and window[c] == countT[c]:,0,1,42,0,0,0,0,0,0
26,have += 1,0,0,9,0,1,0,0,0,1
28,while have == need:,0,1,19,0,0,0,0,0,0
30,if (r - l + 1) < resLen:,0,1,24,0,1,0,0,0,0
31,"res = [l, r]",0,0,12,0,0,0,0,0,1
32,resLen = r - l + 1,0,0,18,0,1,0,0,0,1
34,window[s[l]] -= 1,0,0,17,0,1,0,0,0,1
35,if s[l] in countT and window[s[l]] < countT[s[l]]:,0,1,50,0,0,0,0,0,0
36,have -= 1,0,0,9,0,1,0,0,0,1
37,l += 1,0,0,6,0,1,0,0,0,1
38,"l, r = res",0,0,10,0,0,0,0,0,1
39,"return s[l : r + 1] if resLen != float(""infinity"") else """"",0,1,58,0,1,0,0,0,1
41,"def check(self, s: str, t: str) -> bool:",0,1,40,0,1,0,0,0,0
42,set1 = set(s),0,0,13,0,0,0,0,0,1
43,set2 = set(t),0,0,13,0,0,0,0,0,1
45,for c in set2:,0,1,14,0,0,0,0,0,0
46,if c not in set1:,0,1,17,0,0,0,0,0,0
47,return False,0,1,12,0,0,0,0,0,0
49,return True,0,1,11,0,0,0,0,0,0
51,mws = MWS(),0,0,11,0,0,0,0,0,1
52,"finder = mws.minWindow(string1, string2)",0,0,40,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def get_authors(revision_range):,0,1,32,0,0,0,0,0,0
3,"pat = ""^.*\\t(.*)$""",0,0,19,0,1,0,0,1,1
4,"lst_release, cur_release = (r.strip() for r in revision_range.split(""..""))",1,1,74,0,0,0,0,0,1
7,"if ""|"" in cur_release:",0,1,22,0,0,0,0,1,0
9,"maybe_tag, head = cur_release.split(""|"")",1,1,40,0,0,0,0,1,1
11,"assert head == ""HEAD""",0,1,21,0,0,0,0,0,0
12,if maybe_tag in this_repo.tags:,0,1,31,0,0,0,0,0,0
13,cur_release = maybe_tag,0,1,23,0,0,0,0,0,1
14,else:,0,1,5,0,0,0,0,0,0
15,cur_release = head,0,1,18,0,0,0,0,0,1
16,"revision_range = f""{lst_release}..{cur_release}""",0,1,48,0,0,0,0,0,1
22,"xpr = re.compile(r""Co-authored-by: (?P<name>[^<]+) "")",0,0,53,1,1,0,0,1,1
23,cur = set(,0,0,10,0,0,0,0,0,1
24,xpr.findall(,0,0,12,0,0,0,0,0,0
25,"this_repo.git.log(""--grep=Co-authored"", ""--pretty=%b"", revision_range)",0,0,70,0,1,0,0,0,0
26,),0,0,1,0,0,0,0,0,0
27,),0,0,1,0,0,0,0,0,0
28,"cur |= set(re.findall(pat, this_repo.git.shortlog(""-s"", revision_range), re.M))",0,0,79,1,1,0,0,1,1
30,pre = set(,0,0,10,0,0,0,0,0,1
31,"xpr.findall(this_repo.git.log(""--grep=Co-authored"", ""--pretty=%b"", lst_release))",0,1,80,0,1,0,0,0,0
32,),0,0,1,0,0,0,0,0,0
33,"pre |= set(re.findall(pat, this_repo.git.shortlog(""-s"", lst_release), re.M))",0,1,76,1,1,0,0,1,1
36,"cur.discard(""Homu"")",0,0,19,0,0,0,0,0,0
37,"pre.discard(""Homu"")",0,0,19,1,0,0,0,0,0
40,"authors = [s + "" +"" for s in cur - pre] + [s for s in cur & pre]",0,1,64,0,1,0,0,1,1
42,"    return authors
",0,1,19,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"sample = ""Hello""",0,0,16,0,0,0,0,0,1
3,size_string = 32,0,0,16,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def load_tokens(path):,0,1,22,0,0,0,0,0,0
3,tok_names = [],0,0,14,0,0,0,0,0,1
4,string_to_tok = {},0,0,18,0,0,0,0,0,1
5,ERRORTOKEN = None,0,0,17,0,0,0,0,0,1
6,with open(path) as fp:,0,1,22,0,0,0,0,0,0
7,for line in fp:,0,1,15,0,0,0,0,0,0
8,line = line.strip(),0,0,19,0,0,0,0,0,1
10,"i = line.find(""",1,0,15,0,0,0,0,0,1
12,if i >= 0:,0,1,10,0,0,0,0,0,1
13,line = line[:i].strip(),1,0,23,0,0,0,0,0,1
15,if not line:,0,1,12,0,0,0,0,0,0
16,continue,0,1,8,0,0,0,0,0,0
17,fields = line.split(),0,0,21,0,0,0,0,0,1
18,name = fields[0],0,0,16,0,0,0,0,0,1
19,value = len(tok_names),0,0,22,0,0,0,0,0,1
20,"if name == ""ERRORTOKEN"":",0,1,24,0,0,0,0,0,0
21,ERRORTOKEN = value,0,0,18,0,0,0,0,0,1
22,string = fields[1] if len(fields) > 1 else None,0,1,47,0,0,0,0,0,1
23,if string:,0,1,10,0,0,0,0,0,0
24,string = eval(string),0,0,21,0,0,0,0,0,1
25,string_to_tok[string] = value,0,0,29,0,0,0,0,0,1
27,"    return tok_names, ERRORTOKEN, string_to_tok
",0,1,48,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def _parse_query(query):,0,1,24,0,0,0,0,0,0
3,topic = query,0,0,13,0,0,0,0,0,1
4,keyword = None,0,0,14,0,0,0,0,0,1
5,"search_options = """"",0,0,19,0,0,0,0,0,1
7,keyword = None,0,0,14,0,0,0,0,0,1
8,"if ""~"" in query:",0,1,16,0,0,0,0,1,0
9,topic = query,0,0,13,0,0,0,0,0,1
10,"pos = topic.index(""~"")",0,0,22,0,0,0,0,1,1
11,keyword = topic[pos + 1 :],0,0,26,0,1,0,0,0,1
12,topic = topic[:pos],0,0,19,0,0,0,0,0,1
14,"if ""/"" in keyword:",0,1,18,0,1,0,0,0,0
15,search_options = keyword[::-1],1,0,30,0,1,0,0,0,1
17,"search_options = search_options[: search_options.index(""/"")]",1,0,60,0,1,0,0,0,1
19,keyword = keyword[: -len(search_options) - 1],1,0,45,0,1,0,0,0,1
22,"    return topic, keyword, search_options
",0,1,42,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def remove_markup(text, promote_remaining=True, simplify_links=True):",0,1,69,0,0,1,0,0,0
3,"""""""Filter out wiki markup from `text`, leaving only text.",0,1,57,0,0,0,0,0,0
5,Parameters,0,0,10,0,0,0,0,0,0
6,----------,0,0,10,0,1,0,0,0,0
7,text : str,0,0,10,0,0,0,0,0,0
8,String containing markup.,0,0,25,0,0,0,0,0,0
9,promote_remaining : bool,0,0,24,0,0,0,0,0,0
10,Whether uncaught markup should be promoted to plain text.,0,0,57,0,0,0,0,0,0
11,simplify_links : bool,0,1,21,0,0,0,0,0,0
12,Whether links should be simplified keeping only their description text.,0,1,71,0,0,0,0,0,0
14,Returns,0,0,7,0,0,0,0,0,0
15,-------,0,0,7,0,1,0,0,0,0
16,str,0,0,3,0,0,0,0,0,0
17,`text` without markup.,0,0,22,0,0,0,0,0,0
19,"""""""",0,0,3,0,0,0,0,0,0
20,"text = re.sub(RE_P2, '', text)  ",1,0,32,1,0,0,0,0,1
26,text = remove_template(text),0,0,28,0,0,1,0,0,1
27,text = remove_file(text),0,0,24,0,0,1,0,0,1
28,iters = 0,0,0,9,0,0,0,0,0,1
29,while True:,0,1,11,0,0,0,0,0,0
30,"old, iters = text, iters + 1",0,0,28,0,1,0,0,0,1
31,"text = re.sub(RE_P0, '', text)  ",1,0,32,1,0,0,0,0,1
33,"text = re.sub(RE_P1, '', text)  ",0,0,32,1,0,0,0,0,1
34,"text = re.sub(RE_P9, '', text)  ",0,0,32,1,0,0,0,0,1
35,"text = re.sub(RE_P10, '', text)  ",0,0,33,1,0,0,0,0,1
36,"text = re.sub(RE_P11, '', text)  ",0,0,33,1,0,0,0,0,1
37,"text = re.sub(RE_P14, '', text)  ",0,0,33,1,0,0,0,0,1
38,"text = re.sub(RE_P5, '\\3', text)  ",0,0,35,1,0,0,0,0,1
40,if simplify_links:,0,1,18,0,0,0,0,0,0
41,"text = re.sub(RE_P6, '\\2', text)  ",0,0,35,1,0,0,0,0,1
43,"text = text.replace(""!!"", ""\n|"")  ",0,0,34,0,0,0,1,1,1
44,"text = text.replace(""|-||"", ""\n|"")  ",0,0,36,0,1,0,1,1,1
45,"text = re.sub(RE_P12, '\n', text)  ",0,0,35,1,0,0,0,0,1
46,"text = text.replace('|||', '|\n|')  ",0,0,36,0,0,0,1,1,1
47,"text = text.replace('||', '\n|')  ",0,0,34,0,0,0,1,1,1
48,"text = re.sub(RE_P13, '\n', text)  ",0,0,35,1,0,0,0,0,1
49,"text = re.sub(RE_P17, '\n', text)  ",0,0,35,1,0,0,0,0,1
52,"text = text.replace('[]', '')",0,0,29,0,0,0,1,0,1
54,if old == text or iters > 2:,0,1,28,0,0,0,0,0,0
55,break,0,1,5,0,0,0,0,0,0
57,if promote_remaining:,0,1,21,0,0,0,0,0,0
58,"text = text.replace('[', '').replace(']', '')  ",0,0,47,0,0,0,1,0,1
60,    return text,0,1,15,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
1,import math,0,1,11,0,0,0,0,0,0
3,"def getPermutation(self, n: int, k: int) -> str:",0,1,48,0,1,0,0,0,0
4,s=[],0,0,4,0,0,0,0,0,1
5,for i in range(n):,0,1,18,0,0,0,0,0,0
6,s.append(str(i+1)),0,0,18,0,1,1,0,0,0
8,"def fun(s,k,l):",0,1,15,0,0,0,0,0,0
9,p=[],0,0,4,0,0,0,0,0,1
10,fact=math.factorial(l),0,0,22,0,1,0,0,0,1
12,while (s!=[]):,0,1,14,0,0,0,0,0,1
13,fact=fact//l,0,0,12,0,1,0,0,0,1
15,"i,k=divmod(k,fact)",0,0,18,0,0,0,0,0,1
17,x=s[i],0,0,6,0,0,0,0,0,1
18,p.append(x),0,0,11,0,0,1,0,0,0
19,s=s[:i]+s[i+1:],0,0,15,0,1,0,0,0,1
23,l-=1,0,0,4,0,1,0,0,0,1
25,"return """".join(p)",0,1,17,0,0,0,1,0,0
27,"    return fun(s,k-1,n)
",0,1,24,0,1,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"LABELS_FILENAME = ""labels.txt""",0,0,30,0,0,0,0,0,1
4,"def read_label_file(dataset_dir, filename=LABELS_FILENAME):",0,1,59,0,0,0,0,0,1
5,"""""""Reads the labels file and returns a mapping from ID to class name.",0,1,69,0,0,0,0,0,0
7,Args:,0,0,5,0,0,0,0,0,0
8,dataset_dir: The directory in which the labels file is found.,0,1,61,0,0,0,0,0,0
9,filename: The filename where the class names are written.,0,1,57,0,0,0,0,0,0
11,Returns:,0,0,8,0,0,0,0,0,0
12,A map from a label (integer) to class name.,0,1,43,0,0,0,0,0,0
13,"""""""",0,0,3,0,0,0,0,0,0
14,"labels_filename = os.path.join(dataset_dir, filename)",0,1,53,0,0,0,1,0,1
15,"with tf.gfile.Open(labels_filename, ""rb"") as f:",0,1,47,0,0,0,0,0,0
16,lines = f.read().decode(),0,0,25,0,0,0,0,0,1
17,"lines = lines.split(""\n"")",0,0,25,0,0,0,0,0,1
18,"lines = filter(None, lines)",0,0,27,0,0,0,0,0,1
20,labels_to_class_names = {},0,1,26,0,0,0,0,0,1
21,for line in lines:,0,1,18,0,0,0,0,0,0
22,"index = line.index("":"")",0,0,23,0,0,0,0,0,1
23,labels_to_class_names[int(line[:index])] = line[index + 1 :],1,1,60,0,1,0,0,0,1
25,"    return labels_to_class_names
",0,1,33,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
4,"s = ""hi there""",0,0,14,0,0,0,0,0,1
5,split_str_list = s.split(),0,0,26,0,0,0,0,0,1
8,split_str_list.reverse(),0,0,24,0,0,1,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
4,"def min_bit_flips(start: int, goal: int) -> int:",0,1,48,0,1,0,0,0,0
6,exor = start ^ goal,0,0,19,0,0,0,0,1,1
8,count = 0,0,0,9,0,0,0,0,0,1
9,while exor:,0,1,11,0,0,0,0,0,0
11,exor = exor & (exor - 1),0,0,24,0,1,0,0,1,1
13,count += 1,0,0,10,0,1,0,0,0,1
14,return count,0,1,12,0,0,0,0,0,0
17,x = 0,0,0,5,0,0,0,0,0,1
18,start = 1,0,0,9,0,0,0,0,0,1
19,goal = 2,0,0,8,0,0,0,0,0,1
22,"x = min_bit_flips(start, goal)",1,0,30,0,0,0,0,0,1
26,x = x | 1,0,0,9,0,0,0,0,1,1
30,a = 1,0,0,5,0,0,0,0,0,1
32,"demorgan = ~(a | b) == (~a & ~b)
",0,0,33,0,0,0,0,1,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def _split(self, data):",0,1,23,0,0,0,0,0,0
3,"""""""",0,0,3,0,0,0,0,0,0
4,Split the Type 1 font into its three main parts.,0,0,48,0,0,0,0,0,0
6,"The three parts are: (1) the cleartext part, which ends in a",0,0,60,0,0,1,0,0,0
7,"eexec operator; (2) the encrypted part; (3) the fixed part,",0,0,59,0,0,0,0,0,0
8,which contains 512 ASCII zeros possibly divided on various,0,0,58,0,0,0,0,0,0
9,"lines, a cleartomark operator, and possibly something else.",0,1,59,0,0,1,0,0,0
10,"""""""",0,0,3,0,0,0,0,0,0
13,"idx = data.index(b""eexec"")",0,0,26,0,0,0,0,0,1
14,"idx += len(b""eexec"")",0,0,20,0,1,0,0,0,1
15,"while data[idx] in b"" \t\r\n"":",0,1,30,0,0,0,0,0,0
16,idx += 1,0,0,8,0,1,0,0,0,1
17,len1 = idx,0,0,10,0,0,0,0,0,1
21,"idx = data.rindex(b""cleartomark"") - 1",0,0,37,0,1,1,0,0,1
22,zeros = 512,0,0,11,0,0,0,0,0,1
23,"while zeros and data[idx] in b""0"" or data[idx] in b""\r\n"":",0,1,58,0,0,0,0,0,0
24,"if data[idx] in b""0"":",0,1,21,0,0,0,0,0,0
25,zeros -= 1,0,0,10,0,1,0,0,0,1
26,idx -= 1,0,0,8,0,1,0,0,0,1
27,if zeros:,0,1,9,0,0,0,0,0,0
30,"_log.info(""Insufficiently many zeros in Type 1 font"")",0,0,53,0,0,0,0,0,0
36,idx1 = len1 + ((idx - len1 + 2) & ~1)  ,1,0,39,0,1,0,0,1,1
39,binary = binascii.unhexlify(data[len1:idx1]),0,1,44,0,0,0,0,0,1
41,"    return data[:len1], binary, data[idx + 1 :]
",0,1,48,0,1,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def _decrypt_subtitles(self, data, iv, id):",0,1,43,0,0,0,0,0,0
3,data = bytes_to_intlist(compat_b64decode(data)),0,0,47,0,0,0,0,0,1
4,iv = bytes_to_intlist(compat_b64decode(iv)),0,0,43,0,0,0,0,0,1
5,id = int(id),0,0,12,0,0,0,0,0,1
7,"def obfuscate_key_aux(count, modulo, start):",0,1,44,0,0,0,0,0,0
8,output = list(start),0,0,20,0,0,0,0,0,1
9,for _ in range(count):,0,1,22,0,0,0,0,0,0
10,output.append(output[-1] + output[-2]),0,0,38,0,1,1,0,0,0
12,output = output[2:],0,0,19,0,0,0,0,0,1
13,"output = list(map(lambda x: x % modulo + 33, output))",0,1,53,0,1,0,0,0,1
14,return output,0,1,13,0,0,0,0,0,0
16,def obfuscate_key(key):,0,1,23,0,0,0,0,0,0
17,"num1 = int(floor(pow(2, 25) * sqrt(6.9)))",0,0,41,0,1,0,0,0,1
18,num2 = (num1 ^ key) << 5,1,0,24,0,0,0,0,1,1
20,num3 = key ^ num1,0,0,17,0,0,0,0,1,1
21,num4 = num3 ^ (num3 >> 3) ^ num2,0,0,32,0,0,0,0,1,1
22,"prefix = intlist_to_bytes(obfuscate_key_aux(20, 97, (1, 2)))",0,0,60,0,0,0,0,0,1
23,shaHash = bytes_to_intlist(sha1(prefix + str(num4).encode('ascii')).digest()),0,1,77,0,1,0,1,0,1
25,return shaHash + [0] * 12,0,1,25,0,1,0,0,0,0
27,key = obfuscate_key(id),0,0,23,0,0,0,0,0,1
30,    return zlib.decompress(decrypted_data),0,1,42,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
4,"def min_bit_flips(start: int, goal: int) -> int:",0,1,48,0,1,0,0,0,0
6,exor = start ^ goal,0,0,19,0,0,0,0,1,1
8,count = 0,0,0,9,0,0,0,0,0,1
9,while exor:,0,1,11,0,0,0,0,0,0
11,exor = exor & (exor - 1),1,0,24,0,1,0,0,1,1
13,count += 1,0,0,10,0,1,0,0,0,1
14,return count,0,1,12,0,0,0,0,0,0
17,x = 0,0,0,5,0,0,0,0,0,1
18,start = 1,0,0,9,0,0,0,0,0,1
19,goal = 2,0,0,8,0,0,0,0,0,1
22,"x = min_bit_flips(start, goal)",0,0,30,0,0,0,0,0,1
26,x = x | 1,0,0,9,0,0,0,0,1,1
30,a = 1,0,0,5,0,0,0,0,0,1
32,"demorgan = ~(a | b) == (~a & ~b)
",0,0,33,0,0,0,0,1,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def reverseBits(self, n: int) -> int:",0,1,37,0,1,1,0,0,0
3,res = 0,0,0,7,0,0,0,0,0,1
4,for i in range(32):,0,1,19,0,0,0,0,0,0
5,bit = (n >> i) & 1,0,0,18,0,0,0,0,1,1
9,"    return res
",0,1,15,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def count_set_bits(n):,0,1,22,0,0,0,0,0,0
3,count = 0,0,0,9,0,0,0,0,0,1
4,while n:,0,1,8,0,0,0,0,0,0
5,count += n & 1,0,0,14,0,1,0,0,1,1
6,n >>= 1,0,0,7,0,0,0,0,1,1
7,return count,0,1,12,0,0,0,0,0,0
9,"def toggle_kth_bit(n, k):",0,1,25,0,0,0,0,0,0
10,return n ^ (1 << (k - 1)),0,1,25,0,1,0,0,1,0
12,def main():,0,1,11,0,0,0,0,0,0
13,num = 5,0,0,7,0,0,0,0,0,1
14,print(bin(num)) ,0,0,16,0,0,0,0,0,0
15,"print(""Number of set bits:"", count_set_bits(num))",0,0,49,0,0,0,0,0,0
17,"new_num_1 = toggle_kth_bit(num, 4)",1,0,34,0,0,0,0,0,1
19,for i in range(10):,0,1,19,0,0,0,0,0,0
20,"new_num_2 = toggle_kth_bit(num, 1)",0,0,34,0,0,0,0,0,1
21,print(bin(num)) ,0,0,16,0,0,0,0,0,0
22,"print(""Number of set bits:"", count_set_bits(num))",0,0,49,0,0,0,0,0,0
25,"    main()
",0,0,11,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
4,"def min_bit_flips(start: int, goal: int) -> int:",0,1,48,0,1,0,0,0,0
6,exor = start ^ goal,0,0,19,0,0,0,0,1,1
8,count = 0,0,0,9,0,0,0,0,0,1
9,while exor:,0,1,11,0,0,0,0,0,0
11,exor = exor & (exor - 1),0,0,24,0,1,0,0,1,1
13,count += 1,0,0,10,0,1,0,0,0,1
14,return count,0,1,12,0,0,0,0,0,0
17,x = 0,0,0,5,0,0,0,0,0,1
18,start = 1,0,0,9,0,0,0,0,0,1
19,goal = 2,0,0,8,0,0,0,0,0,1
22,"x = min_bit_flips(start, goal)",0,0,30,0,0,0,0,0,1
26,x = x | 1,1,0,9,0,0,0,0,1,1
30,a = 1,0,0,5,0,0,0,0,0,1
32,"demorgan = ~(a | b) == (~a & ~b)
",0,0,33,0,0,0,0,1,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def count_set_bits(n):,0,1,22,0,0,0,0,0,0
3,count = 0,0,0,9,0,0,0,0,0,1
4,while n:,0,1,8,0,0,0,0,0,0
5,count += n & 1,0,0,14,0,1,0,0,1,1
6,n >>= 1,0,0,7,0,0,0,0,1,1
7,return count,0,1,12,0,0,0,0,0,0
9,"def toggle_kth_bit(n, k):",0,1,25,0,0,0,0,0,0
10,return n ^ (1 << (k - 1)),0,1,25,0,1,0,0,1,0
12,def main():,0,1,11,0,0,0,0,0,0
13,num = 5,0,0,7,0,0,0,0,0,1
14,print(bin(num)) ,0,0,16,0,0,0,0,0,0
15,"print(""Number of set bits:"", count_set_bits(num))",0,0,49,0,0,0,0,0,0
17,"new_num = toggle_kth_bit(num, 2)",1,0,32,0,0,0,0,0,1
19,"new_num_1 = toggle_kth_bit(num, 4)",0,0,34,0,0,0,0,0,1
20,"new_num_2 = toggle_kth_bit(num, 1)",0,0,34,0,0,0,0,0,1
21,"new_num_3 = toggle_kth_bit(num, 3)",1,0,34,0,0,0,0,0,1
23,for i in range(10):,0,1,19,0,0,0,0,0,0
24,"new_num_2 = toggle_kth_bit(num, 1)",0,0,34,0,0,0,0,0,1
25,print(bin(num)) ,0,0,16,0,0,0,0,0,0
26,"print(""Number of set bits:"", count_set_bits(num))",0,0,49,0,0,0,0,0,0
29,"    main()
",0,0,11,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,from inline import Here,0,1,23,0,0,0,0,0,0
13,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
16,def dec_to_alpha(num):,0,1,22,0,0,0,0,0,0
17,"base_num = """"",0,1,13,0,0,0,0,0,1
18,while num > 0:,0,1,14,0,0,0,0,0,0
19,dig = int(num % 36),0,0,19,0,0,0,0,0,1
20,if dig < 10:,0,1,12,0,0,0,0,0,0
21,base_num += str(dig),0,1,20,0,1,0,0,0,1
22,else:,0,1,5,0,0,0,0,0,0
23,base_num += chr(ord('a') + dig - 10),0,1,36,0,1,0,0,0,1
24,num //= 36,0,0,10,0,1,0,0,0,1
25,base_num = base_num[::-1]  ,0,1,27,0,1,0,0,0,1
26,return base_num,0,1,15,0,0,0,0,0,0
29,def encrypt(secret):,0,1,20,0,0,0,0,0,0
30,"encryption = int(secret, base=36)",0,1,33,0,0,0,0,0,0
31,key = len(secret),0,0,17,0,0,0,0,0,1
32,return encryption << key,0,1,24,0,0,0,0,1,0
34,"def decrypt(message, key):",0,1,26,0,0,0,0,0,0
35,"decryption = int(message, base=36)",0,1,34,0,0,0,0,0,0
36,return decryption >> key,0,1,24,0,0,0,0,1,0
38,"secrets = [""hello"", ""password"", ""something"", ""code"", ""reply""]",0,1,61,0,0,0,0,0,1
40,for iter in range(5):,0,1,21,0,0,0,0,0,0
42,secret = secrets[iter],0,0,22,0,0,0,0,0,1
43,key = len(secret),0,0,17,0,0,0,0,0,1
44,"print(""expected answer: "" + secret)",0,0,35,0,1,0,0,0,0
47,message = dec_to_alpha(encrypt(secret)),0,0,39,0,0,0,0,0,1
48,"print(""encrypted message: "" + message)",0,0,38,0,1,0,0,0,0
49,"print(""key: "" + str(key))",0,0,25,0,1,0,0,0,0
52,"res = dec_to_alpha(decrypt(message, key))",0,0,41,0,0,0,0,0,1
53,"print(""decrypted message: "" + res + ""\n"")",0,0,41,0,1,0,0,0,0
0,from typing import Optional,0,1,27,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,def dga(,0,1,8,0,0,0,0,0,0
4,"self,",0,0,5,0,0,0,0,0,0
5,"year: Optional[int] = None,",0,0,27,0,0,0,0,0,1
6,"month: Optional[int] = None,",0,0,28,0,0,0,0,0,1
7,"day: Optional[int] = None,",0,0,26,0,0,0,0,0,1
8,"tld: Optional[str] = None,",0,0,26,0,0,0,0,0,1
9,"length: Optional[int] = None,",0,0,29,0,0,0,0,0,1
10,) -> str:,0,0,9,0,1,0,0,0,0
11,"""""""Generates a domain name by given date",0,0,40,0,0,0,0,0,0
12,https://en.wikipedia.org/wiki/Domain_generation_algorithm,0,0,57,0,1,0,0,0,0
14,:type year: int,0,0,15,0,0,0,0,0,0
15,:type month: int,0,0,16,0,0,0,0,0,0
16,:type day: int,0,0,14,0,0,0,0,0,0
17,:type tld: str,0,0,14,0,0,0,0,0,0
18,:type length: int,0,0,17,0,0,0,0,0,0
19,:rtype: str,0,0,11,0,0,0,0,0,0
20,"""""""",0,0,3,0,0,0,0,0,0
22,"domain = """"",0,0,11,0,0,0,0,0,1
23,"year = year or self.random_int(min=1, max=9999)",0,0,47,0,0,0,0,0,0
24,"month = month or self.random_int(min=1, max=12)",0,0,47,0,0,0,0,0,0
25,"day = day or self.random_int(min=1, max=30)",0,0,43,0,0,0,0,0,0
26,tld = tld or self.tld(),0,0,23,0,0,0,0,0,1
27,"length = length or self.random_int(min=2, max=63)",0,0,49,0,0,0,0,0,0
29,for _ in range(length):,0,1,23,0,0,0,0,0,0
30,year = ((year ^ 8 * year) >> 11) ^ ((year & 0xFFFFFFF0) << 17),1,0,62,0,1,0,0,1,1
32,month = ((month ^ 4 * month) >> 25) ^ 16 * (month & 0xFFFFFFF8),1,0,63,0,1,0,0,1,1
34,day = ((day ^ (day << 13)) >> 19) ^ ((day & 0xFFFFFFFE) << 12),1,0,62,0,0,0,0,1,1
36,domain += chr(((year ^ month ^ day) % 25) + 97),1,0,47,0,1,0,0,1,1
39,"    return domain + ""."" + tld
",0,1,30,0,1,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def r_short(self) -> int:,0,1,25,0,1,0,0,0,0
3,buf = self.r_string(2),0,0,22,0,0,0,0,0,1
4,x = buf[0],0,0,10,0,0,0,0,0,1
5,x |= buf[1] << 8,1,0,16,0,0,0,0,1,1
7,x |= -(x & (1 << 15))  ,1,0,23,0,1,0,0,1,1
10,return x,0,1,8,0,0,0,0,0,0
13,def r_long(self) -> int:,0,1,24,0,1,0,0,0,0
14,buf = self.r_string(4),0,0,22,0,0,0,0,0,1
15,x = buf[0],0,0,10,0,0,0,0,0,1
16,x |= buf[1] << 8,0,0,16,0,0,0,0,1,1
17,x |= buf[2] << 16,0,0,17,0,0,0,0,1,1
18,x |= buf[3] << 24,0,0,17,0,0,0,0,1,1
20,"    return x
",0,1,13,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
4,"def min_bit_flips(start: int, goal: int) -> int:",0,1,48,0,1,0,0,0,0
6,exor = start ^ goal,1,0,19,0,0,0,0,1,1
8,count = 0,0,0,9,0,0,0,0,0,1
9,while exor:,0,1,11,0,0,0,0,0,0
11,exor = exor & (exor - 1),0,0,24,0,1,0,0,1,1
13,count += 1,0,0,10,0,1,0,0,0,1
14,return count,0,1,12,0,0,0,0,0,0
17,x = 0,0,0,5,0,0,0,0,0,1
18,start = 1,0,0,9,0,0,0,0,0,1
19,goal = 2,0,0,8,0,0,0,0,0,1
22,"x = min_bit_flips(start, goal)",0,0,30,0,0,0,0,0,1
26,x = x | 1,0,0,9,0,0,0,0,1,1
30,a = 1,0,0,5,0,0,0,0,0,1
32,"demorgan = ~(a | b) == (~a & ~b)
",0,0,33,0,0,0,0,1,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def WriteComment(f, c, row, width, height, bottomReserved, fontsize, lifetime, styleid):",0,1,88,0,0,0,0,0,0
3,text = ASSEscape(c[3]),0,0,22,0,0,0,0,0,1
4,styles = [],0,0,11,0,0,0,0,0,1
5,if c[4] == 1:,0,1,13,0,0,0,0,0,0
6,styles.append(,0,0,14,0,0,1,0,0,0
7,"""\\an8\\pos(%(halfwidth)s, %(row)s)""",0,0,36,0,0,0,0,0,0
8,"% {""halfwidth"": round(width / 2), ""row"": row}",0,0,45,0,1,0,0,0,0
9,),0,0,1,0,0,0,0,0,0
10,elif c[4] == 2:,0,1,15,0,0,0,0,0,0
11,styles.append(,0,0,14,0,0,1,0,0,0
12,"""\\an2\\pos(%(halfwidth)s, %(row)s)""",0,0,36,0,0,0,0,0,0
13,% {,0,0,3,0,0,0,0,0,0
14,"""halfwidth"": round(width / 2),",0,0,30,0,1,0,0,0,0
15,"""row"": ConvertType2(row, height, bottomReserved),",0,0,49,0,0,0,0,0,0
16,},0,0,1,0,0,0,0,0,0
17,),0,0,1,0,0,0,0,0,0
18,elif c[4] == 3:,0,1,15,0,0,0,0,0,0
19,styles.append(,0,0,14,0,0,1,0,0,0
20,"""\\move(%(neglen)s, %(row)s, %(width)s, %(row)s)""",0,0,49,0,0,0,0,0,0
21,"% {""width"": width, ""row"": row, ""neglen"": -math.ceil(c[8])}",0,0,58,0,1,0,0,0,0
22,),0,0,1,0,0,0,0,0,0
23,else:,0,1,5,0,0,0,0,0,0
24,styles.append(,0,0,14,0,0,1,0,0,0
25,"""\\move(%(width)s, %(row)s, %(neglen)s, %(row)s)""",0,0,49,0,0,0,0,0,0
26,"% {""width"": width, ""row"": row, ""neglen"": -math.ceil(c[8])}",0,0,58,0,1,0,0,0,0
27,),0,0,1,0,0,0,0,0,0
28,if not (-1 < c[6] - fontsize < 1):,0,1,34,0,1,0,0,0,0
29,"styles.append(""\\fs%s"" % round(c[6]))",0,0,37,0,0,1,0,0,0
30,if c[5] != 0xFFFFFF:,0,1,20,0,0,0,0,0,1
31,styles.append(,0,0,14,0,0,1,0,0,0
32,"""\\c&H%02X%02X%02X&""",0,0,20,0,0,0,0,1,0
33,"% (c[5] & 0xFF, (c[5] >> 8) & 0xFF, (c[5] >> 16) & 0xFF)",0,0,56,0,0,0,0,1,0
34,),1,0,1,0,0,0,0,0,0
36,if c[5] == 0x000000:,0,1,20,0,0,0,0,0,0
37,"styles.append(""\\3c&HFFFFFF&"")",0,0,30,0,0,1,0,1,0
38,f.write(,0,0,8,0,0,0,0,0,0
39,"""Dialogue: 2,%(start)s,%(end)s,%(styleid)s,,0000,0000,0000,,{%(styles)s}%(text)s\n""",0,0,83,0,0,0,0,0,0
40,% {,0,0,3,0,0,0,0,0,0
41,"""start"": ConvertTimestamp(c[0]),",0,0,32,0,0,0,0,0,0
42,"""end"": ConvertTimestamp(c[0] + lifetime),",0,1,41,0,1,0,0,0,0
43,"""styles"": """".join(styles),",0,0,26,0,0,0,1,0,0
44,"""text"": text,",0,0,13,0,0,0,0,0,0
45,"""styleid"": styleid,",0,0,19,0,0,0,0,0,0
47,"    )
",0,0,6,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def FileHeader(self):,0,1,21,0,0,0,0,0,0
3,"""""""Return the per-file header as a string.""""""",0,1,45,0,1,0,0,0,0
4,dt = self.date_time,0,0,19,0,0,0,0,0,1
5,dosdate = (dt[0] - 1980) << 9 | dt[1] << 5 | dt[2],1,0,50,0,1,0,0,1,1
7,dostime = dt[3] << 11 | dt[4] << 5 | (dt[5] // 2),1,0,49,0,1,0,0,1,1
9,if self.flag_bits & 0x08:,0,1,25,0,0,0,0,1,0
11,CRC = compress_size = file_size = 0,0,0,35,0,0,0,0,0,0
12,else:,0,1,5,0,0,0,0,0,0
13,CRC = self.CRC,0,0,14,0,0,0,0,0,1
14,compress_size = self.compress_size,0,0,34,0,0,0,0,0,1
15,file_size = self.file_size,0,0,26,0,0,0,0,0,1
17,extra = self.extra,0,0,18,0,0,0,0,0,1
19,if file_size > ZIP64_LIMIT or compress_size > ZIP64_LIMIT:,0,1,58,0,0,0,0,0,0
22,"fmt = ""<HHQQ""",0,0,13,0,0,0,0,0,1
23,extra = extra + struct.pack(,0,0,28,0,1,0,0,0,1
24,"fmt, 1, struct.calcsize(fmt) - 4, file_size, compress_size",0,0,58,0,1,0,0,0,0
25,),0,0,1,0,0,0,0,0,0
26,file_size = 0xFFFFFFFF,0,0,22,0,0,0,0,0,1
27,compress_size = 0xFFFFFFFF,0,0,26,0,0,0,0,0,1
28,"self.extract_version = max(45, self.extract_version)",0,0,52,0,0,0,0,0,1
29,"self.create_version = max(45, self.extract_version)",0,0,51,0,0,0,0,0,1
31,"filename, flag_bits = self._encodeFilenameFlags()",0,0,49,0,0,0,1,0,1
32,header = struct.pack(,0,0,21,0,0,0,0,0,1
33,"structFileHeader,",0,0,17,0,0,0,0,0,0
34,"stringFileHeader,",0,0,17,0,0,0,0,0,0
35,"self.extract_version,",0,0,21,0,0,0,0,0,0
36,"self.reserved,",0,0,14,0,0,0,0,0,0
37,"flag_bits,",0,0,10,0,0,0,0,0,0
38,"self.compress_type,",0,0,19,0,0,0,0,0,0
39,"dostime,",0,0,8,0,0,0,0,0,0
40,"dosdate,",0,0,8,0,0,0,0,0,0
41,"CRC,",0,0,4,0,0,0,0,0,0
42,"compress_size,",0,0,14,0,0,0,0,0,0
43,"file_size,",0,0,10,0,0,0,0,0,0
44,"len(filename),",0,0,14,0,0,0,0,0,0
45,"len(extra),",0,0,11,0,0,0,0,0,0
47,"    return header + filename + extra
",0,1,37,0,1,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
4,"def min_bit_flips(start: int, goal: int) -> int:",0,1,48,0,1,0,0,0,0
6,exor = start ^ goal,0,0,19,0,0,0,0,1,1
8,count = 0,0,0,9,0,0,0,0,0,1
9,while exor:,0,1,11,0,0,0,0,0,0
11,exor = exor & (exor - 1),0,0,24,0,1,0,0,1,1
13,count += 1,0,0,10,0,1,0,0,0,1
14,return count,0,1,12,0,0,0,0,0,0
17,x = 0,0,0,5,0,0,0,0,0,1
18,start = 1,0,0,9,0,0,0,0,0,1
19,goal = 2,0,0,8,0,0,0,0,0,1
22,"x = min_bit_flips(start, goal)",0,0,30,0,0,0,0,0,1
26,x = x | 1,0,0,9,0,0,0,0,1,1
30,a = 1,0,0,5,0,0,0,0,0,1
31,b = -1,0,0,6,0,1,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def sign(self, user, pw, clid):",0,1,31,0,0,0,0,0,0
3,a = 33,0,0,6,0,0,0,0,0,1
4,i = 1,0,0,5,0,0,0,0,0,1
5,s = 440123,0,0,10,0,0,0,0,0,1
6,w = 117,0,0,7,0,0,0,0,0,1
7,u = 1800000,0,0,11,0,0,0,0,0,1
8,l = 1042,0,0,8,0,0,0,0,0,1
9,b = 37,0,0,6,0,0,0,0,0,1
10,k = 37,0,0,6,0,0,0,0,0,1
11,c = 5,0,0,5,0,0,0,0,0,1
12,"n = ""0763ed7314c69015fd4a0dc16bbf4b90""  ",0,0,40,0,0,0,0,0,1
13,"y = ""8""  ",0,0,9,0,0,0,0,0,1
14,"r = ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36""  ",0,0,123,0,1,0,0,0,1
15,e = user  ,0,0,10,0,0,0,0,0,1
16,t = clid  ,0,0,10,0,0,0,0,0,1
18,"d = ""-"".join([str(mInt) for mInt in [a, i, s, w, u, l, b, k]])",0,1,62,0,1,0,1,0,1
19,p = n + y + d + r + e + t + d + n,0,0,33,0,1,0,0,0,1
20,h = p,0,0,5,0,0,0,0,0,1
22,m = 8011470,0,0,11,0,0,0,0,0,1
23,f = 0,0,0,5,0,0,0,0,0,1
25,"for f in range(f, len(h)):",0,1,26,0,0,0,0,0,0
26,m = (m >> 1) + ((1 & m) << 23),1,0,30,0,1,0,0,1,1
28,m += ord(h[f]),1,0,14,0,1,0,0,0,1
30,m &= 16777215,1,0,13,0,0,0,0,1,1
34,"out = str(y) + "":"" + str(d) + "":"" + format(m, ""x"") + "":"" + str(c)",0,1,65,0,1,0,1,0,1
36,"    return out
",0,1,15,0,0,0,0,0,0
0,from typing import Tuple,0,1,24,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,"def _read_base128le(data: bytes) -> Tuple[int, int]:",0,1,52,0,1,0,0,0,0
4,res = 0,0,0,7,0,0,0,0,0,1
5,offset = 0,0,0,10,0,0,0,0,0,1
6,while offset < len(data):,0,1,25,0,0,0,0,0,0
7,o = data[offset],0,0,16,0,0,0,0,0,1
8,res += (o & 0x7F) << (7 * offset),1,0,33,0,1,0,0,1,1
10,offset += 1,0,0,11,0,1,0,0,0,1
11,if o < 0x80:,0,1,12,0,0,0,0,0,0
24,"    raise ValueError(""varint exceeds bounds of provided data"")
",0,1,63,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def find_archi(self, target_patch_size, max_layers=9):",0,1,54,0,0,0,0,0,1
3,"""""""",0,0,3,0,0,0,0,0,0
4,Find the best configuration of layers using only 3x3 convs for target patch size,0,1,80,0,0,0,0,0,0
5,"""""""",0,0,3,0,0,0,0,0,0
6,s = {},0,0,6,0,0,0,0,0,1
7,"for layers_count in range(1, max_layers + 1):",0,1,45,0,1,0,0,0,0
8,val = 1 << (layers_count - 1),0,0,29,0,1,0,0,1,1
9,while True:,0,1,11,0,0,0,0,0,0
10,val -= 1,0,0,8,0,1,0,0,0,1
12,layers = [],0,0,11,0,0,0,0,0,1
13,sum_st = 0,0,0,10,0,0,0,0,0,1
14,"layers.append([3, 2])",0,0,21,0,0,1,0,0,0
15,sum_st += 2,0,0,11,0,1,0,0,0,1
16,for i in range(layers_count - 1):,0,1,33,0,1,0,0,0,0
17,st = 1 + (1 if val & (1 << i) != 0 else 0),1,1,42,0,1,0,0,1,0
19,"layers.append([3, st])",0,0,22,0,0,1,0,0,0
20,sum_st += st,0,0,12,0,1,0,0,0,1
22,rf = self.calc_receptive_field_size(layers),0,0,43,0,0,0,0,0,1
24,"s_rf = s.get(rf, None)",0,0,22,0,0,0,0,0,1
25,if s_rf is None:,0,1,16,0,0,0,0,0,0
26,"s[rf] = (layers_count, sum_st, layers)",0,0,38,0,0,0,0,0,1
27,else:,0,1,5,0,0,0,0,0,0
28,if layers_count < s_rf[0] or (,0,1,30,0,0,0,0,0,0
29,layers_count == s_rf[0] and sum_st > s_rf[1],0,0,44,0,0,0,0,0,0
30,):,0,0,2,0,0,0,0,0,0
31,"s[rf] = (layers_count, sum_st, layers)",0,0,38,0,0,0,0,0,1
33,if val == 0:,0,1,12,0,0,0,0,0,0
34,break,0,1,5,0,0,0,0,0,0
36,x = sorted(list(s.keys())),0,0,26,0,0,1,0,0,1
38,"    return s[q][2]
",0,1,19,0,0,0,0,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
7,a = 4,0,0,5,0,0,0,0,0,1
8,b = -6,0,0,6,0,1,0,0,0,1
10,class Combining:,0,1,16,0,0,0,0,0,0
11,"def getSum(self, a: int, b: int) -> int:",0,1,40,0,1,0,0,0,0
12,"def add(a, b):",0,1,14,0,0,0,0,0,0
13,if not a or not b:,0,1,18,0,0,0,0,0,0
14,return a or b,0,1,13,0,0,0,0,0,0
15,"return add(a ^ b, (a & b) << 1)",0,1,31,0,0,0,0,1,0
17,if a * b < 0:  ,0,1,15,0,1,0,0,0,0
18,if a > 0:,0,1,9,0,0,0,0,0,0
19,"positive = self.getSum(b, a)",0,0,28,0,0,0,0,0,1
20,return positive,0,1,15,0,0,0,0,0,0
21,"if add(~a, 1) == b:  ",0,1,21,0,0,0,0,1,0
22,zero = 0,1,0,8,0,0,0,0,0,1
24,return 0,0,1,8,0,0,0,0,0,0
25,"if add(~a, 1) < b:  ",0,1,20,0,0,0,0,1,0
26,"return add(~add(add(~a, 1), add(~b, 1)), 1)  ",0,1,45,0,0,0,0,1,0
29,"return add(a, b)  ",0,1,18,0,0,0,0,0,0
32,"c = combine.getSum(a, b)
",0,0,25,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def count_set_bits(n):,0,1,22,0,0,0,0,0,0
3,count = 0,0,0,9,0,0,0,0,0,1
4,while n:,0,1,8,0,0,0,0,0,0
5,count += n & 1,0,0,14,0,1,0,0,1,1
6,n >>= 1,0,0,7,0,0,0,0,1,1
7,return count,0,1,12,0,0,0,0,0,0
9,"def toggle_kth_bit(n, k):",0,1,25,0,0,0,0,0,0
10,return n ^ (1 << (k - 1)),0,1,25,0,1,0,0,1,0
12,def main():,0,1,11,0,0,0,0,0,0
13,num = 5,0,0,7,0,0,0,0,0,1
14,print(bin(num)) ,0,0,16,0,0,0,0,0,0
15,"print(""Number of set bits:"", count_set_bits(num))",0,0,49,0,0,0,0,0,0
17,"new_num_2 = toggle_kth_bit(num, 1)",1,0,34,0,0,0,0,0,1
19,for i in range(10):,0,1,19,0,0,0,0,0,0
20,"new_num_2 = toggle_kth_bit(num, 1)",0,0,34,0,0,0,0,0,1
21,print(bin(num)) ,0,0,16,0,0,0,0,0,0
22,"print(""Number of set bits:"", count_set_bits(num))",0,0,49,0,0,0,0,0,0
25,"    main()
",0,0,11,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import random,0,1,13,0,0,0,0,0,0
7,from inline import Here,0,1,23,0,0,0,0,0,0
15,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
17,for iter in range(10):,0,1,22,0,0,0,0,0,0
19,"ans_str = """"",0,0,12,0,0,0,0,0,1
22,"dec_str = """"",0,0,12,0,0,0,0,0,1
23,"mask_str = """"",0,1,13,0,0,0,0,0,1
24,for dig in range(8):,0,1,20,0,0,0,0,0,0
25,"curr_dig = random.randint(0, 9)",0,0,31,0,0,0,0,0,1
26,dec_str = dec_str + str(curr_dig),0,0,33,0,1,0,0,0,1
27,if(curr_dig % 2 == 0):,0,1,22,0,0,0,0,0,0
28,ans_str += str(curr_dig),0,0,24,0,1,0,0,0,1
29,"mask_str += ""f""",0,1,15,0,1,0,0,0,1
30,else:,0,1,5,0,0,0,0,0,0
31,"ans_str += ""0""",0,0,14,0,1,0,0,0,1
32,"mask_str += ""0""",0,1,15,0,1,0,0,0,1
34,"dec_num = int(dec_str, 16)",0,0,26,0,0,0,0,0,1
35,"hex_mask = int(mask_str, 16)",0,1,28,0,0,0,0,0,1
36,"ans = int(ans_str, 16)",0,0,22,0,0,0,0,0,1
38,"print(""  "" + hex(dec_num))",0,0,26,0,1,0,0,0,0
39,"print(""& "" + hex(hex_mask))",0,1,27,0,1,0,0,1,0
40,"print(""-----------"")",0,0,20,0,1,0,0,0,0
41,"print(""  "" + hex(ans))",0,0,22,0,1,0,0,0,0
42,print(),0,0,7,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def __init__(self, file: ""IO[str]"") -> None:",0,1,44,0,1,0,0,0,0
3,handle = GetStdHandle(STDOUT),0,0,29,0,0,0,0,0,1
4,self._handle = handle,0,0,21,0,0,0,0,0,1
5,default_text = GetConsoleScreenBufferInfo(handle).wAttributes,0,1,61,0,0,0,0,0,1
6,self._default_text = default_text,0,1,33,0,0,0,0,0,1
8,self._default_fore = default_text & 7,0,1,37,0,0,0,0,1,1
9,self._default_back = (default_text >> 4) & 7,1,1,44,0,0,0,0,1,1
11,self._default_attrs = self._default_fore | (self._default_back << 4),1,1,68,0,0,0,0,1,1
14,self._file = file,0,0,17,0,0,0,0,0,1
16,"    self.flush = file.flush
",0,0,28,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def parse_inet_line(self, words, current_if, ips):",0,1,50,0,0,0,0,0,0
7,if words[1] == 'alias':,0,1,23,0,0,0,0,0,0
8,del words[1],0,1,12,0,0,0,0,0,0
10,address = {'address': words[1]},0,0,31,0,0,0,0,0,1
13,if '/' in address['address']:,0,1,29,0,1,0,0,0,0
14,"ip_address, cidr_mask = address['address'].split('/')",0,1,53,0,1,0,0,0,1
16,address['address'] = ip_address,0,0,31,0,0,0,0,0,1
18,netmask_length = int(cidr_mask),0,1,31,0,0,0,0,0,1
19,netmask_bin = (1 << 32) - (1 << 32 >> int(netmask_length)),1,1,58,0,1,0,0,1,1
21,"address['netmask'] = socket.inet_ntoa(struct.pack('!L', netmask_bin))",0,1,69,0,0,0,0,0,1
23,if len(words) > 5:,0,1,18,0,0,0,0,0,0
24,address['broadcast'] = words[3],0,1,31,0,0,0,0,0,1
26,else:,0,1,5,0,0,0,0,0,0
28,"if re.match('([0-9a-f]){8}', words[3]) and len(words[3]) == 8:",0,1,62,1,1,0,0,0,0
29,words[3] = '0x' + words[3],0,0,26,0,1,0,0,0,1
30,if words[3].startswith('0x'):,0,1,29,0,0,0,0,0,0
31,"address['netmask'] = socket.inet_ntoa(struct.pack('!L', int(words[3], base=16)))",0,1,80,0,0,0,0,0,0
32,else:,0,1,5,0,0,0,0,0,0
34,address['netmask'] = words[3],0,1,29,0,0,0,0,0,1
36,"address_bin = struct.unpack('!L', socket.inet_aton(address['address']))[0]",0,0,74,0,0,0,0,0,1
37,"netmask_bin = struct.unpack('!L', socket.inet_aton(address['netmask']))[0]",0,1,74,0,0,0,0,0,1
38,"address['network'] = socket.inet_ntoa(struct.pack('!L', address_bin & netmask_bin))",0,1,83,0,0,0,0,1,1
39,if 'broadcast' not in address:,0,1,30,0,0,0,0,0,0
41,if len(words) > 5:,0,1,18,0,0,0,0,0,0
42,address['broadcast'] = words[5],0,1,31,0,0,0,0,0,1
43,else:,0,1,5,0,0,0,0,0,0
44,"address['broadcast'] = socket.inet_ntoa(struct.pack('!L', address_bin | (~netmask_bin & 0xffffffff)))",0,1,101,0,0,0,0,1,1
47,if not words[1].startswith('127.'):,0,1,35,0,0,0,0,0,0
49,    current_if['ipv4'].append(address),0,1,38,0,0,1,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,from inline import Here,0,1,23,0,0,0,0,0,0
14,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
16,"nums = [""3122323312"", ""3133321223"",",0,0,35,0,0,0,0,0,1
17,"""1233312133"", ""3222221311"",",0,0,27,0,0,0,0,0,0
18,"""3232331332"", ""1131133232"",",0,0,27,0,0,0,0,0,0
19,"""3231133311"", ""1322121111"",",0,0,27,0,0,0,0,0,0
20,"""1111111331"", ""3112121333""]",0,0,27,0,0,0,0,0,0
22,"ansm = [""00ff000000"", ""00fff00000"",",0,0,35,0,0,0,0,0,1
23,"""00fff00000"", ""0fffff0000"",",0,0,27,0,0,0,0,0,0
24,"""0000ff0000"", ""00000ff000"",",0,0,27,0,0,0,0,0,0
25,"""00000fff00"", ""000000ffff"",",0,0,27,0,0,0,0,0,0
26,"""fffffff000"", ""0000000fff""]",0,0,27,0,0,0,0,0,0
28,"idx = [2, 2, 2, 1, 4, 5, 5, 6, 0, 7]",0,0,36,0,0,0,0,0,1
30,for iter in range(10):,0,1,22,0,0,0,0,0,0
32,curr_n = list(nums[iter]),0,0,25,0,0,0,0,0,1
33,mask_idx = idx[iter],0,1,20,0,0,0,0,0,1
34,mask = curr_n[mask_idx],0,1,23,0,0,0,0,0,1
35,while((mask_idx < 10) and (curr_n[mask_idx] == mask)):,0,1,54,0,0,0,0,0,0
36,"curr_n[mask_idx] = ""0""",0,1,22,0,0,0,0,0,1
37,mask_idx += 1,0,1,13,0,1,0,0,0,1
40,"num_a = """".join(curr_n)",0,0,23,0,0,0,1,0,1
42,"print(str(int(num_a, 16)))",0,0,26,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def final_hash(self):,0,1,21,0,0,0,0,0,0
3,"""""""",0,0,3,0,0,0,0,0,0
4,"Calls all the other methods to process the input. Pads the data, then splits into",0,0,81,0,0,0,0,0,0
5,blocks and then does a series of operations for each block (including expansion).,0,1,81,0,0,0,0,0,0
6,"For each block, the variable h that was initialized is copied to a,b,c,d,e",0,1,74,0,0,0,0,0,0
7,"and these 5 variables a,b,c,d,e undergo several changes. After all the blocks are",0,0,81,0,0,0,0,0,0
8,"processed, these 5 variables are pairwise added to h ie a to h[0], b to h[1] and so on.",0,0,87,0,0,0,0,0,0
9,This h becomes our final hash which is returned.,0,1,48,0,0,0,0,0,0
10,"""""""",0,0,3,0,0,0,0,0,0
11,self.padded_data = self.padding(),0,0,33,0,0,0,0,0,1
12,self.blocks = self.split_blocks(),0,0,33,0,0,0,0,0,1
13,for block in self.blocks:,0,1,25,0,0,0,0,0,0
14,expanded_block = self.expand_block(block),0,0,41,0,0,0,0,0,1
15,"a, b, c, d, e = self.h",0,0,22,0,0,0,0,0,1
16,"for i in range(0, 80):",0,1,22,0,0,0,0,0,0
17,if 0 <= i < 20:,0,1,15,0,0,0,0,0,1
18,f = (b & c) | ((~b) & d),1,0,24,0,0,0,0,1,1
20,k = 0x5A827999,0,0,14,0,0,0,0,0,1
21,elif 20 <= i < 40:,0,1,18,0,0,0,0,0,1
22,f = b ^ c ^ d,1,0,13,0,0,0,0,1,1
24,k = 0x6ED9EBA1,0,0,14,0,0,0,0,0,1
25,elif 40 <= i < 60:,0,1,18,0,0,0,0,0,1
26,f = (b & c) | (b & d) | (c & d),1,0,31,0,0,0,0,1,1
28,k = 0x8F1BBCDC,0,0,14,0,0,0,0,0,1
29,elif 60 <= i < 80:,0,1,18,0,0,0,0,0,1
30,f = b ^ c ^ d,1,0,13,0,0,0,0,1,1
32,k = 0xCA62C1D6,0,0,14,0,0,0,0,0,1
33,"a, b, c, d, e = (",0,0,17,0,0,0,0,0,1
34,"self.rotate(a, 5) + f + e + k + expanded_block[i] & 0xFFFFFFFF,",0,0,63,0,1,0,0,1,0
35,"a,",0,0,2,0,0,0,0,0,0
36,"self.rotate(b, 30),",0,0,19,0,0,0,0,0,0
37,"c,",0,0,2,0,0,0,0,0,0
38,"d,",0,0,2,0,0,0,0,0,0
39,),0,0,1,0,0,0,0,0,0
40,self.h = (,0,0,10,0,0,0,0,0,1
41,"self.h[0] + a & 0xFFFFFFFF,",0,0,27,0,1,0,0,1,0
42,"self.h[1] + b & 0xFFFFFFFF,",0,0,27,0,1,0,0,1,0
43,"self.h[2] + c & 0xFFFFFFFF,",0,0,27,0,1,0,0,1,0
44,"self.h[3] + d & 0xFFFFFFFF,",0,0,27,0,1,0,0,1,0
45,"self.h[4] + e & 0xFFFFFFFF,",0,0,27,0,1,0,0,1,0
47,"    return ""%08x%08x%08x%08x%08x"" % tuple(self.h)
",0,1,50,0,0,0,0,0,0
5,import sys,0,1,10,0,0,0,0,0,0
6,import random,0,1,13,0,0,0,0,0,0
7,from inline import Here,0,1,23,0,0,0,0,0,0
14,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
16,"bin_dig = [""1"", ""0""]",0,0,20,0,0,0,0,0,1
17,for iter in range(10):,0,1,22,0,0,0,0,0,0
19,"bin_num = ""1""",0,0,13,0,0,0,0,0,1
20,for digit in range(3):,0,1,22,0,0,0,0,0,0
21,"bin_num = bin_num + str(bin_dig[random.randint(0, 1)])",0,0,54,0,1,0,0,0,1
22,"res = bin(int(bin_num, 2) << 1)",0,0,31,0,0,0,0,1,1
23,"print(""Response: "" + ""0b"" + bin_num + "" * 0b10 = "" + str(res))",0,0,62,0,1,0,0,0,1
26,"ans = bin(int(bin_num, 2) * 2)",0,0,30,0,1,0,0,0,1
27,"print(""Answer: "" + ""0b"" + bin_num + "" * 0b10 = "" + str(ans) + ""\n"")",0,0,67,0,1,0,0,0,1
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
7,a = 4,0,0,5,0,0,0,0,0,1
8,b = -6,0,0,6,0,1,0,0,0,1
10,class Combining:,0,1,16,0,0,0,0,0,0
11,"def getSum(self, a: int, b: int) -> int:",0,1,40,0,1,0,0,0,0
12,"def add(a, b):",0,1,14,0,0,0,0,0,0
13,if not a or not b:,0,1,18,0,0,0,0,0,0
14,return a or b,0,1,13,0,0,0,0,0,0
15,"return add(a ^ b, (a & b) << 1)",0,1,31,0,0,0,0,1,0
17,if a * b < 0:  ,0,1,15,0,1,0,0,0,0
18,if a > 0:,0,1,9,0,0,0,0,0,0
19,"positive = self.getSum(b, a)",0,0,28,0,0,0,0,0,1
20,return positive,0,1,15,0,0,0,0,0,0
21,"if add(~a, 1) == b:  ",0,1,21,0,0,0,0,1,0
22,zero = 0,0,0,8,0,0,0,0,0,1
23,return 0,0,1,8,0,0,0,0,0,0
24,"if add(~a, 1) < b:  ",0,1,20,0,0,0,0,1,0
25,"return add(~add(add(~a, 1), add(~b, 1)), 1)  ",0,1,45,0,0,0,0,1,0
28,"return add(a, b)  ",0,1,18,0,0,0,0,0,0
30,combine = Combining(),0,0,21,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def _parse_float_vec(vec):,0,1,26,0,0,0,0,0,0
3,"""""""",0,0,3,0,0,0,0,0,0
4,Parse a vector of float values representing IBM 8 byte floats into,0,0,66,0,0,0,0,0,0
5,native 8 byte floats.,0,0,21,0,0,0,0,0,0
6,"""""""",0,0,3,0,0,0,0,0,0
7,"dtype = np.dtype("">u4,>u4"")",0,0,27,0,0,0,0,0,1
8,vec1 = vec.view(dtype=dtype),0,0,28,0,0,0,0,0,0
9,"xport1 = vec1[""f0""]",0,0,19,0,0,0,0,0,1
10,"xport2 = vec1[""f1""]",0,0,19,0,0,0,0,0,1
14,ieee1 = xport1 & 0x00FFFFFF,0,0,27,0,0,0,0,1,1
21,"shift = np.zeros(len(vec), dtype=np.uint8)",0,1,42,0,0,0,0,0,0
22,shift[np.where(xport1 & 0x00200000)] = 1,0,1,40,0,0,0,0,1,1
23,shift[np.where(xport1 & 0x00400000)] = 2,0,1,40,0,0,0,0,1,1
24,shift[np.where(xport1 & 0x00800000)] = 3,0,1,40,0,0,0,0,1,1
33,ieee1 >>= shift,0,1,15,0,0,0,0,1,1
34,ieee2 = (xport2 >> shift) | ((xport1 & 0x00000007) << (29 + (3 - shift))),1,1,73,0,1,0,0,1,1
38,ieee1 &= 0xFFEFFFFF,0,0,19,0,0,0,0,1,1
47,ieee1 |= ((((((xport1 >> 24) & 0x7F) - 65) << 2) + shift + 1023) << 20) | (,0,1,75,0,1,0,0,1,1
48,xport1 & 0x80000000,0,0,19,0,0,0,0,1,0
49,),0,0,1,0,0,0,0,0,0
51,"ieee = np.empty((len(ieee1),), dtype="">u4,>u4"")",0,0,47,0,0,0,0,0,0
52,"ieee[""f0""] = ieee1",0,0,18,0,0,0,0,0,1
53,"ieee[""f1""] = ieee2",0,0,18,0,0,0,0,0,1
54,"ieee = ieee.view(dtype="">f8"")",0,0,29,0,0,0,0,0,0
55,"ieee = ieee.astype(""f8"")",0,1,24,0,0,0,0,0,1
57,    return ieee,0,1,15,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def count_set_bits(n):,0,1,22,0,0,0,0,0,0
3,count = 0,0,0,9,0,0,0,0,0,1
4,while n:,0,1,8,0,0,0,0,0,0
5,count += n & 1,0,0,14,0,1,0,0,1,1
6,n >>= 1,0,0,7,0,0,0,0,1,1
7,return count,0,1,12,0,0,0,0,0,0
9,"def toggle_kth_bit(n, k):",0,1,25,0,0,0,0,0,0
10,return n ^ (1 << (k - 1)),0,1,25,0,1,0,0,1,0
12,def main():,0,1,11,0,0,0,0,0,0
13,num = 5,0,0,7,0,0,0,0,0,1
14,print(bin(num)) ,0,0,16,0,0,0,0,0,0
15,"print(""Number of set bits:"", count_set_bits(num))",0,0,49,0,0,0,0,0,0
17,"new_num = toggle_kth_bit(num, 2)",1,0,32,0,0,0,0,0,1
20,for i in range(10):,0,1,19,0,0,0,0,0,0
21,"new_num_2 = toggle_kth_bit(num, 1)",0,0,34,0,0,0,0,0,1
22,print(bin(num)) ,0,0,16,0,0,0,0,0,0
23,"print(""Number of set bits:"", count_set_bits(num))",0,0,49,0,0,0,0,0,0
26,"    main()
",0,0,11,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def population_count(x):,0,1,24,0,0,1,0,0,0
3,"assert np.issubdtype(x.dtype, np.integer)",0,1,41,0,0,0,0,0,0
4,dtype = x.dtype,0,0,15,0,0,0,0,0,1
5,iinfo = np.iinfo(x.dtype),0,0,25,0,0,0,0,0,1
6,if np.iinfo(x.dtype).bits < 32:,0,1,31,0,0,0,0,0,0
7,"assert iinfo.kind in ('i', 'u')",0,1,31,0,0,0,0,0,0
8,x = x.astype(np.uint32 if iinfo.kind == 'u' else np.int32),0,1,58,0,0,0,0,0,0
9,if iinfo.kind == 'i':,0,1,21,0,0,0,0,0,0
10,"x = x.view(f""uint{np.iinfo(x.dtype).bits}"")",0,0,43,0,0,0,0,0,1
11,"assert x.dtype in (np.uint32, np.uint64)",0,1,40,0,0,0,0,0,0
12,m = [,0,0,5,0,0,0,0,0,1
13,"np.uint64(0x5555555555555555),  ",0,0,32,0,0,0,0,0,0
14,"np.uint64(0x3333333333333333),  ",0,0,32,0,0,0,0,0,0
15,"np.uint64(0x0f0f0f0f0f0f0f0f),  ",0,0,32,0,0,0,0,0,0
16,"np.uint64(0x00ff00ff00ff00ff),  ",0,0,32,0,0,0,0,0,0
17,"np.uint64(0x0000ffff0000ffff),  ",0,0,32,0,0,0,0,0,0
18,"np.uint64(0x00000000ffffffff),  ",0,0,32,0,0,0,0,0,0
19,],0,0,1,0,0,0,0,0,0
21,if x.dtype == np.uint32:,0,1,24,0,0,0,0,0,0
22,"m = list(map(np.uint32, m[:-1]))",0,0,32,0,1,0,0,0,1
24,x = (x & m[0]) + ((x >>  1) & m[0])  ,1,0,37,0,1,0,0,1,1
26,x = (x & m[1]) + ((x >>  2) & m[1])  ,0,0,37,0,1,0,0,1,1
27,x = (x & m[2]) + ((x >>  4) & m[2])  ,0,0,37,0,1,0,0,1,1
28,x = (x & m[3]) + ((x >>  8) & m[3])  ,0,0,37,0,1,0,0,1,1
29,x = (x & m[4]) + ((x >> 16) & m[4])  ,0,0,37,0,1,0,0,1,1
30,if x.dtype == np.uint64:,0,1,24,0,0,0,0,0,0
32,  return x.astype(dtype),0,1,24,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
6,def _invalid_utf8_indexes(bytes):,0,1,33,0,0,0,0,0,0
7,skips = [],0,0,10,0,0,0,0,0,1
8,i = 0,0,0,5,0,0,0,0,0,1
9,len_bytes = len(bytes),0,0,22,0,0,0,0,0,1
10,while i < len_bytes:,0,1,20,0,0,0,0,0,0
11,c1 = bytes[i],0,0,13,0,0,0,0,0,1
12,if c1 < 0x80:,0,1,13,0,0,0,0,0,0
14,i += 1,0,0,6,0,1,0,0,0,1
15,continue,0,1,8,0,0,0,0,0,0
16,try:,0,1,4,0,0,0,0,0,0
17,c2 = bytes[i + 1],0,0,17,0,1,0,0,0,1
18,if (c1 & 0xE0 == 0xC0) and (c2 & 0xC0 == 0x80):,0,1,47,0,0,0,0,1,0
20,c = ((c1 & 0x1F) << 6) | (c2 & 0x3F),1,0,36,0,0,0,0,1,1
22,if c < 0x80:  ,0,1,14,0,0,0,0,0,0
24,"skips.extend([i, i + 1])  ",0,0,26,0,1,1,0,0,0
25,i += 2,0,0,6,0,1,0,0,0,1
26,continue,0,1,8,0,0,0,0,0,0
27,c3 = bytes[i + 2],0,0,17,0,1,0,0,0,1
28,if (c1 & 0xF0 == 0xE0) and (c2 & 0xC0 == 0x80) and (c3 & 0xC0 == 0x80):,0,1,71,0,0,0,0,1,0
30,c = ((((c1 & 0x0F) << 6) | (c2 & 0x3F)) << 6) | (c3 & 0x3F),0,0,59,0,0,0,0,1,1
31,if (c < 0x800) or (0xD800 <= c <= 0xDFFF):,0,1,42,0,0,0,0,0,0
33,"skips.extend([i, i + 1, i + 2])",0,0,31,0,1,1,0,0,0
34,i += 3,0,0,6,0,1,0,0,0,1
35,continue,0,1,8,0,0,0,0,0,0
36,c4 = bytes[i + 3],0,0,17,0,1,0,0,0,1
37,if (,0,1,4,0,0,0,0,0,0
38,(c1 & 0xF8 == 0xF0),0,0,19,0,0,0,0,1,0
39,and (c2 & 0xC0 == 0x80),0,0,23,0,0,0,0,1,0
40,and (c3 & 0xC0 == 0x80),0,0,23,0,0,0,0,1,0
41,and (c4 & 0xC0 == 0x80),0,0,23,0,0,0,0,1,0
42,):,0,0,2,0,0,0,0,0,0
44,c = ((((((c1 & 0x0F) << 6) | (c2 & 0x3F)) << 6) | (c3 & 0x3F)) << 6) | (,0,0,72,0,0,0,0,1,1
45,c4 & 0x3F,0,0,9,0,0,0,0,1,0
46,),0,0,1,0,0,0,0,0,0
47,if (c < 0x10000) or (c > 0x10FFFF):  ,0,1,37,0,0,0,0,0,0
49,"skips.extend([i, i + 1, i + 2, i + 3])",0,0,38,0,1,1,0,0,0
50,i += 4,0,0,6,0,1,0,0,0,1
51,continue,0,1,8,0,0,0,0,0,0
52,except IndexError:,0,1,18,0,0,0,0,0,0
53,pass,0,1,4,0,0,0,0,0,0
54,skips.append(i),0,0,15,0,0,1,0,0,0
56,"    return skips
",0,1,17,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def isMatch(self, s: str, p: str) -> bool:",0,1,42,0,1,0,0,0,0
3,cache = [[False] * (len(p) + 1) for i in range(len(s) + 1)],0,1,59,0,1,0,0,0,1
6,cache[len(s)][len(p)] = True,0,0,28,0,0,0,0,0,1
8,"for i in range(len(s), -1, -1):",0,1,31,0,1,0,0,0,0
9,"for j in range(len(p) - 1, -1, -1):",0,1,35,0,1,0,0,0,0
10,"match = i < len(s) and (s[i] == p[j] or p[j] == ""."")",0,0,52,0,0,0,0,0,0
12,"if (j + 1) < len(p) and p[j + 1] == ""*"":",0,1,40,0,1,0,0,0,0
13,cache[i][j] = cache[i][j + 2],0,0,29,0,1,0,0,0,1
14,if match:,0,1,9,0,0,0,0,0,0
15,cache[i][j] = cache[i + 1][j] or cache[i][j],0,0,44,0,1,0,0,0,1
16,elif match:,0,1,11,0,0,0,0,0,0
17,cache[i][j] = cache[i + 1][j + 1],0,0,33,0,1,0,0,0,1
19,"    return cache[0][0]
",0,1,23,0,0,0,0,0,0
2,from inline import Here,0,1,23,0,0,0,0,0,0
4,class Solution(object):,0,1,23,0,0,0,0,0,0
5,"def combinationSum2(self, candidates, target):",0,1,46,0,0,0,0,0,0
6,"""""""",0,0,3,0,0,0,0,0,0
7,:type candidates: List[int],0,0,27,0,0,0,0,0,0
8,:type target: int,0,0,17,0,0,0,0,0,0
9,:rtype: List[List[int]],0,0,23,0,0,0,0,0,0
10,"""""""",0,0,3,0,0,0,0,0,0
11,candidates2 = candidates.sort(),1,0,31,0,0,1,0,0,1
14,dp = [[] for _ in range(target + 1)],0,1,36,0,1,0,0,0,1
15,dp[0].append([]),0,0,16,0,0,1,0,0,0
16,"for i in range(1, target + 1):",0,1,30,0,1,0,0,0,0
17,for j in range(len(candidates)):,0,1,32,0,0,0,0,0,0
18,if candidates[j] > i:,0,1,21,0,0,0,0,0,0
19,break,0,1,5,0,0,0,0,0,0
20,for k in range(len(dp[i - candidates[j]])):,0,1,43,0,1,0,0,0,0
21,temp = dp[i - candidates[j]][k][:],0,0,34,0,1,0,0,0,1
23,if len(temp) > 0 and temp[-1] >= j:,0,1,35,0,1,0,0,0,1
24,continue,0,1,8,0,0,0,0,0,0
26,temp.append(j),0,0,14,0,0,1,0,0,0
27,dp[i].append(temp),0,0,18,0,0,1,0,0,0
28,res = [],0,0,8,0,0,0,0,0,1
29,check = {},0,0,10,0,0,0,0,0,1
30,for temp in dp[target]:,0,1,23,0,0,0,0,0,0
31,value = [candidates[t] for t in temp],0,1,37,0,0,0,0,0,1
32,try:,0,1,4,0,0,0,0,0,0
33,check[str(value)] += 1,0,0,22,0,1,0,0,0,1
34,except KeyError:,0,1,16,0,0,0,0,0,0
35,check[str(value)] = 1,0,0,21,0,0,0,0,0,1
37,        return res,0,1,18,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,class Solution(object):,0,1,23,0,0,0,0,0,0
4,"def isMatch(self, s, p):",0,1,24,0,0,0,0,0,0
5,"""""""",0,0,3,0,0,0,0,0,0
6,:type s: str,0,0,12,0,0,0,0,0,0
7,:type p: str,0,0,12,0,0,0,0,0,0
8,:rtype: bool,0,0,12,0,0,0,0,0,0
9,"""""""",0,0,3,0,0,0,0,0,0
11,if s == p:,0,1,10,0,0,0,0,0,0
12,return True,0,1,11,0,0,0,0,0,0
13,"m, n = len(s), len(p)",0,0,21,0,0,0,0,0,1
14,dp = [[False] * (n + 1) for _ in range(m + 1)],1,1,46,0,1,0,0,0,1
17,print(dp),0,0,9,0,0,0,0,0,0
18,dp[0][0] = True,0,0,15,0,0,0,0,0,1
19,"for j in range(1, n):",0,1,21,0,0,0,0,0,0
20,if p[j] == '*' and dp[0][j - 1]:,0,1,32,0,1,0,0,0,0
21,dp[0][j + 1] = True,0,0,19,0,1,0,0,0,1
23,for i in range(m):,0,1,18,0,0,0,0,0,0
24,for j in range(n):,0,1,18,0,0,0,0,0,0
25,if p[j] == '.' or p[j] == s[i]:,0,1,31,0,0,0,0,0,0
26,dp[i + 1][j + 1] = dp[i][j],0,0,27,0,1,0,0,0,1
27,elif p[j] == '*':,0,1,17,0,1,0,0,0,0
28,if p[j - 1] != s[i] and p[j - 1] != '.':,0,1,40,0,1,0,0,0,0
29,dp[i + 1][j + 1] = dp[i + 1][j - 1],0,0,35,0,1,0,0,0,1
30,else:,0,1,5,0,0,0,0,0,0
31,dp[i + 1][j + 1] = dp[i + 1][j] or dp[i][j + 1] or dp[i + 1][j - 1],0,0,67,0,1,0,0,0,1
32,return dp[m][n],0,1,15,0,0,0,0,0,0
34,"print(Solution.isMatch(""sol"", ""hello"", ""ab""))
",0,0,46,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
1,from math import inf,0,1,20,0,0,0,0,0,0
3,"def minDistance(self, word1: str, word2: str) -> int:",0,1,53,0,1,0,0,0,0
4,"dp = [[float(""inf"")] * (len(word2) + 1) for i in range(len(word1) + 1)]",0,1,71,0,1,0,0,0,1
8,for j in range(len(word2) + 1):,0,1,31,0,1,0,0,0,0
9,dp[len(word1)][j] = len(word2) - j,0,0,34,0,1,0,0,0,1
10,for i in range(len(word1) + 1):,0,1,31,0,1,0,0,0,0
11,dp[i][len(word2)] = len(word1) - i,0,0,34,0,1,0,0,0,1
13,"for i in range(len(word1) - 1, -1, -1):",0,1,39,0,1,0,0,0,0
14,"for j in range(len(word2) - 1, -1, -1):",0,1,39,0,1,0,0,0,0
15,if word1[i] == word2[j]:,0,1,24,0,0,0,0,0,0
16,dp[i][j] = dp[i + 1][j + 1],0,0,27,0,1,0,0,0,1
17,else:,0,1,5,0,0,0,0,0,0
19,"        return dp[0][0]
",0,1,24,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,class Solution(object):,0,1,23,0,0,0,0,0,0
4,"def merge(self, intervals):",0,1,27,0,0,0,0,0,0
5,"""""""",0,0,3,0,0,0,0,0,0
6,:type intervals: List[Interval],0,0,31,0,0,0,0,0,0
7,:rtype: List[Interval],0,0,22,0,0,0,0,0,0
8,"""""""",0,0,3,0,0,0,0,0,0
9,if intervals is None:,0,1,21,0,0,0,0,0,0
10,return,0,1,6,0,0,0,0,0,0
11,ls = len(intervals),0,0,19,0,0,0,0,0,1
12,if ls <= 1:,0,1,11,0,0,0,0,0,1
13,return intervals,0,1,16,0,0,0,0,0,0
15,print(intervals),0,0,16,0,0,0,0,0,0
16,temp = intervals.sort(key=lambda x: x[0]),1,1,41,0,0,1,0,0,0
19,print(intervals),0,0,16,0,0,0,0,0,0
20,pos = 0,0,0,7,0,0,0,0,0,1
21,while pos < len(intervals) - 1:,0,1,31,0,1,0,0,0,0
23,if intervals[pos][1] >= intervals[pos + 1][0]:,0,1,46,0,1,0,0,0,1
24,next = intervals.pop(pos + 1),0,0,29,0,1,1,0,0,1
26,if next[1] > intervals[pos][1]:,0,1,31,0,0,0,0,0,0
27,intervals[pos][1] = next[1],0,0,27,0,0,0,0,0,1
29,else:,0,1,5,0,0,0,0,0,0
30,pos += 1,0,0,8,0,1,0,0,0,1
31,return intervals,0,1,16,0,0,0,0,0,0
35,"print (s.merge([[5, 10],[1,3],[2,6],[8,10],[15,18]]))",0,0,53,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def multiply(self, num1: str, num2: str) -> str:",0,1,48,0,1,0,0,0,0
3,"if ""0"" in [num1, num2]:",0,1,23,0,0,0,0,0,0
4,"return ""0""",0,1,10,0,0,0,0,0,0
6,res = [0] * (len(num1) + len(num2)),0,0,35,0,1,0,0,0,1
9,"num1, num2 = num1[::-1], num2[::-1]",0,0,35,0,1,0,0,0,1
10,for i1 in range(len(num1)):,0,1,27,0,0,0,0,0,0
11,for i2 in range(len(num2)):,0,1,27,0,0,0,0,0,0
12,digit = int(num1[i1]) * int(num2[i2]),0,0,37,0,1,0,0,0,1
13,res[i1 + i2] += digit,0,0,21,0,1,0,0,0,1
14,res[i1 + i2 + 1] += res[i1 + i2] // 10,0,0,38,0,1,0,0,0,1
15,res[i1 + i2] = res[i1 + i2] % 10,0,0,32,0,1,0,0,0,1
17,"res, beg = res[::-1], 0",0,0,23,0,1,0,0,0,1
18,while beg < len(res) and res[beg] == 0:,0,1,39,0,0,0,0,0,0
19,beg += 1,0,0,8,0,1,0,0,0,1
21,"    return """".join(res)
",0,1,24,0,0,0,1,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
7,"ex = [-1, -1, 2]",0,0,16,0,1,0,0,0,1
9,class sol:,0,1,10,0,0,0,0,0,0
10,"def threeSum(self, nums: list[int]) -> list[list[int]]:",0,1,55,0,1,0,0,0,0
11,res = [],0,0,8,0,0,0,0,0,1
12,nums.sort(),0,0,11,0,0,1,0,0,0
14,"for i, a in enumerate(nums):",0,1,28,0,0,0,0,0,0
16,if a > 0:,0,1,9,0,0,0,0,0,0
17,break,0,1,5,0,0,0,0,0,0
19,if i > 0 and a == nums[i - 1]:,0,1,30,0,1,0,0,0,0
20,continue,0,1,8,0,0,0,0,0,0
22,"l, r = i + 1, len(nums) - 1",0,0,27,0,1,0,0,0,1
23,while l < r:,0,1,12,0,0,0,0,0,0
24,threeSum = a + nums[l] + nums[r],0,0,32,0,1,0,0,0,1
25,if threeSum > 0:,0,1,16,0,0,0,0,0,0
26,r -= 1,0,0,6,0,1,0,0,0,1
27,elif threeSum < 0:,0,1,18,0,0,0,0,0,0
28,l += 1,0,0,6,0,1,0,0,0,1
29,else:,0,1,5,0,0,0,0,0,0
30,"res.append([a, nums[l], nums[r]])",0,0,33,0,0,1,0,0,0
31,check = a + nums[l] + nums[r],0,0,29,0,1,0,0,0,1
32,l += 1,0,0,6,0,1,0,0,0,1
33,r -= 1,0,0,6,0,1,0,0,0,1
34,while nums[l] == nums[l - 1] and l < r:,0,1,39,0,1,0,0,0,0
35,l += 1,0,0,6,0,1,0,0,0,1
36,return res,0,1,10,0,0,0,0,0,0
38,obj = sol(),0,0,11,0,0,0,0,0,1
39,trio = obj.threeSum(ex),1,0,23,0,0,0,0,0,1
41,"print(trio)
",0,0,12,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def value_is_list(my_list):,0,1,27,0,0,0,0,0,0
4,checked_list = [],0,0,17,0,0,0,0,0,1
5,for item in my_list:,0,1,20,0,0,0,0,0,0
6,"if isinstance(item, dict):",0,1,26,0,0,0,0,0,0
7,checked_list.append(sort_json_policy_dict(item)),0,0,48,0,0,1,0,0,0
8,"elif isinstance(item, list):",0,1,28,0,0,0,0,0,0
9,checked_list.append(value_is_list(item)),0,0,40,0,0,1,0,0,0
10,else:,0,1,5,0,0,0,0,0,0
11,checked_list.append(item),0,0,25,0,0,1,0,0,0
15,"checked_list.sort(key=lambda x: sorted(x.items()) if isinstance(x, dict) else x)",1,1,80,0,0,1,0,0,1
19,"    return checked_list
",0,1,24,0,0,0,0,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
6,class ListNode:,0,1,15,0,0,0,0,0,0
7,"def __init__(self, x):",0,1,22,0,0,0,0,0,0
8,self.val = x,0,0,12,0,0,0,0,0,1
9,self.next = None,0,0,16,0,0,0,0,0,1
12,Root = ListNode(1),0,0,18,0,0,0,0,0,1
13,Root.next = ListNode(2),0,0,23,0,0,0,0,0,1
14,Root.next.next = Root,0,0,21,0,0,0,0,0,1
16,Root2 = ListNode(1),0,0,19,0,0,0,0,0,1
17,Root2.next = ListNode(2),0,0,24,0,0,0,0,0,1
18,Root2.next.next = ListNode(3),0,0,29,0,0,0,0,0,1
20,class Solution:,0,1,15,0,0,0,0,0,0
21,"def hasCycle(self, head: ListNode) -> bool:",0,1,43,0,1,0,0,0,0
22,"slow, fast = head, head",0,1,23,0,0,0,0,0,1
24,while fast and fast.next:,0,1,25,0,0,0,0,0,0
25,slow = slow.next,0,0,16,0,0,0,0,0,1
26,fast = fast.next.next,0,1,21,0,0,0,0,0,1
27,if slow == fast:,0,1,16,0,0,0,0,0,0
28,x = slow,0,0,8,0,0,0,0,0,1
29,return True,0,1,11,0,0,0,0,0,0
30,return False,0,1,12,0,0,0,0,0,0
32,obj = Solution(),0,0,16,0,0,0,0,0,1
0,from inline import Here,0,1,23,0,0,0,0,0,0
1,from typing import List,0,1,23,0,0,0,0,0,0
3,"def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:",0,1,70,0,1,0,0,0,0
4,"M, N = len(grid), len(grid[0])",0,0,30,0,0,0,0,0,1
6,"def posToVal(r, c):",0,1,19,0,0,0,0,0,0
7,return r * N + c,0,1,16,0,1,0,0,0,0
8,def valToPos(v):,0,1,16,0,0,0,0,0,0
9,"return [v // N, v % N]",0,1,22,0,1,0,0,0,0
11,res = [[0] * N for i in range(M)],0,1,33,0,1,0,0,0,1
14,for r in range(M):,0,1,18,0,0,0,0,0,0
15,for c in range(N):,0,1,18,0,0,0,0,0,0
16,"newVal = (posToVal(r, c) + k) % (M * N)",0,0,39,0,1,0,0,0,1
17,"newR, newC = valToPos(newVal)",0,0,29,0,0,0,0,0,1
19,"    return res
",0,1,15,0,0,0,0,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
7,class TreeNode:,0,1,15,0,0,0,0,0,0
8,"def __init__(self, x):",0,1,22,0,0,0,0,0,0
9,self.val = x,0,0,12,0,0,0,0,0,1
10,self.left = None,0,0,16,0,0,0,0,0,1
11,self.right = None,0,0,17,0,0,0,0,0,1
14,root = TreeNode(5),0,0,18,0,0,0,0,0,1
15,root.left = TreeNode(10),0,0,24,0,0,0,0,0,1
16,root.right = TreeNode(15),0,0,25,0,0,0,0,0,1
18,class Solution:,0,1,15,0,0,0,0,0,0
19,"def kthSmallest(self, root: TreeNode, k: int) -> int:",0,1,53,0,1,0,0,0,0
20,stack = [],0,0,10,0,0,0,0,0,1
21,curr = root,0,0,11,0,0,0,0,0,1
23,while stack or curr:,0,1,20,0,0,0,0,0,0
24,while curr:,0,1,11,0,0,0,0,0,0
25,stack.append(curr),0,0,18,0,0,1,0,0,0
26,curr = curr.left,0,0,16,0,0,0,0,0,1
27,curr = stack.pop(),0,0,18,0,0,1,0,0,1
28,k -= 1,0,0,6,0,1,0,0,0,1
29,if k == 0:,0,1,10,0,0,0,0,0,0
30,return curr.val,0,1,15,0,0,0,0,0,0
31,prev_val = curr.val,0,0,19,0,0,0,0,0,1
32,curr = curr.right,0,0,17,0,0,0,0,0,1
34,solution = Solution(),0,0,21,0,0,0,0,0,1
35,r = root,0,0,8,0,0,0,0,0,1
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
6,class ListNode:,0,1,15,0,0,0,0,0,0
7,"def __init__(self, x):",0,1,22,0,0,0,0,0,0
8,self.val = x,0,0,12,0,0,0,0,0,1
9,self.next = None,0,0,16,0,0,0,0,0,1
12,Root = ListNode(1),0,0,18,0,0,0,0,0,1
13,Root.next = ListNode(2),0,0,23,0,0,0,0,0,1
14,Root.next.next = Root,0,0,21,0,0,0,0,0,1
16,Root2 = ListNode(1),0,0,19,0,0,0,0,0,1
17,Root2.next = ListNode(2),0,0,24,0,0,0,0,0,1
18,Root2.next.next = ListNode(3),0,0,29,0,0,0,0,0,1
20,class Solution:,0,1,15,0,0,0,0,0,0
21,"def hasCycle(self, head: ListNode) -> bool:",0,1,43,0,1,0,0,0,0
22,"slow, fast = head, head",0,1,23,0,0,0,0,0,1
24,while fast and fast.next:,0,1,25,0,0,0,0,0,0
25,slow = slow.next,0,0,16,0,0,0,0,0,1
26,fast = fast.next.next,0,1,21,0,0,0,0,0,1
27,if slow == fast:,0,1,16,0,0,0,0,0,0
28,x = slow,1,0,8,0,0,0,0,0,1
30,return True,0,1,11,0,0,0,0,0,0
31,return False,0,1,12,0,0,0,0,0,0
33,"obj = Solution()
",0,0,17,0,0,0,0,0,1
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
6,"example = [1, 2, 0, 0, 3]",0,0,25,0,0,0,0,0,1
7,"example2 = [1, 3, 0, 0, 3]",0,0,26,0,0,0,0,0,1
9,class JumpGame:,0,1,15,0,0,0,0,0,0
10,"def canJump(self, nums: list[int]) -> bool:",0,1,43,0,1,0,0,0,0
11,goal = len(nums) - 1,0,0,20,0,1,0,0,0,1
13,"for i in range(len(nums) - 2, -1, -1):",0,1,38,0,1,0,0,0,0
14,if i + nums[i] >= goal:,0,1,23,0,1,0,0,0,1
15,goal = i,0,0,8,0,0,0,0,0,1
16,return goal == 0,0,1,16,0,0,0,0,0,0
18,Jumper = JumpGame(),0,0,19,0,0,0,0,0,1
20,Boolean = Jumper.canJump(example2),1,0,34,0,0,0,0,0,1
23,"print(Boolean)
",0,0,15,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def alphanumeric_encoding(str):,0,1,31,0,0,0,0,0,0
3,code_list = [alphanum_list.index(i) for i in str],0,1,49,0,0,0,0,0,1
4,"code = """"",0,0,9,0,0,0,0,0,1
5,"for i in range(1, len(code_list), 2):",0,1,37,0,0,0,0,0,0
6,c = bin(code_list[i - 1] * 45 + code_list[i])[2:],1,0,49,0,1,0,0,0,1
8,"c = ""0"" * (11 - len(c)) + c",1,0,27,0,1,0,0,0,1
10,code += c,0,0,9,0,1,0,0,0,1
11,if i != len(code_list) - 1:,0,1,27,0,1,0,0,0,1
12,c = bin(code_list[-1])[2:],0,0,26,0,1,0,0,0,1
13,"c = ""0"" * (6 - len(c)) + c",0,0,26,0,1,0,0,0,1
14,code += c,0,0,9,0,1,0,0,0,1
16,"    return code
",0,1,16,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,def benchmark(args):,0,1,20,0,0,0,0,0,0
3,if args.amp:,0,1,12,0,0,0,0,0,0
4,"_logger.warning(""Overriding precision to 'amp' since --amp flag set."")",0,0,70,0,1,0,0,0,0
5,"args.precision = ""amp""",0,0,22,0,0,0,0,0,1
6,_logger.info(,0,0,13,0,0,0,0,0,0
7,"f""Benchmarking in {args.precision} precision. """,0,0,47,0,0,0,0,0,0
8,"f'{""NHWC"" if args.channels_last else ""NCHW""} layout. '",0,1,54,0,0,0,0,0,0
9,"f'torchscript {""enabled"" if args.torchscript else ""disabled""}'",0,1,62,0,0,0,0,0,0
10,),0,0,1,0,0,0,0,0,0
12,bench_kwargs = vars(args).copy(),0,0,32,0,0,1,0,0,1
13,"bench_kwargs.pop(""amp"")",0,0,23,0,0,1,0,0,0
14,"model = bench_kwargs.pop(""model"")",0,1,33,0,0,1,0,0,1
15,"batch_size = bench_kwargs.pop(""batch_size"")",0,0,43,0,0,1,0,0,1
17,"bench_fns = (InferenceBenchmarkRunner,)",0,0,39,0,0,0,0,0,1
18,"prefixes = (""infer"",)",0,0,21,0,0,0,0,0,1
19,"if args.bench == ""both"":",0,1,24,0,0,0,0,0,0
20,"bench_fns = (InferenceBenchmarkRunner, TrainBenchmarkRunner)",0,0,60,0,0,0,0,0,1
21,"prefixes = (""infer"", ""train"")",0,0,29,0,0,0,0,0,1
22,"elif args.bench == ""train"":",0,1,27,0,0,0,0,0,0
23,"bench_fns = (TrainBenchmarkRunner,)",0,0,35,0,0,0,0,0,1
24,"prefixes = (""train"",)",0,0,21,0,0,0,0,0,1
25,"elif args.bench.startswith(""profile""):",0,1,38,0,0,0,0,0,0
27,"if ""deepspeed"" in args.bench:",0,1,29,0,0,0,0,0,0
28,assert (,0,1,8,0,0,0,0,0,0
29,has_deepspeed_profiling,0,1,23,0,0,0,0,0,0
30,"), ""deepspeed must be installed to use deepspeed flop counter""",0,0,62,0,0,0,0,0,0
31,"bench_kwargs[""profiler""] = ""deepspeed""",0,0,38,0,0,0,0,0,1
32,"elif ""fvcore"" in args.bench:",0,1,28,0,0,0,0,0,0
33,assert (,0,1,8,0,0,0,0,0,0
34,has_fvcore_profiling,0,1,20,0,0,0,0,0,0
35,"), ""fvcore must be installed to use fvcore flop counter""",0,0,56,0,0,0,0,0,0
36,"bench_kwargs[""profiler""] = ""fvcore""",0,0,35,0,0,0,0,0,1
37,"bench_fns = (ProfileRunner,)",0,0,28,0,0,0,0,0,1
38,batch_size = 1,0,0,14,0,0,0,0,0,1
40,model_results = OrderedDict(model=model),0,1,40,0,0,0,0,0,0
41,"for prefix, bench_fn in zip(prefixes, bench_fns):",0,1,49,0,0,0,0,0,0
42,run_results = _try_run(,0,1,23,0,0,0,0,0,1
43,"model, bench_fn, initial_batch_size=batch_size, bench_kwargs=bench_kwargs",0,1,73,0,0,0,0,0,0
44,),0,0,1,0,0,0,0,0,0
45,"if prefix and ""error"" not in run_results:",0,1,41,0,0,0,0,0,0
46,"run_results = {""_"".join([prefix, k]): v for k, v in run_results.items()}",1,1,72,0,0,0,1,0,1
48,model_results.update(run_results),0,1,33,0,0,0,0,0,0
49,"if ""error"" not in model_results:",0,1,32,0,0,0,0,0,0
50,param_count = model_results.pop(,0,1,32,0,0,1,0,0,1
51,"""infer_param_count"", model_results.pop(""train_param_count"", 0)",0,1,62,0,0,1,0,0,0
52,),0,0,1,0,0,0,0,0,0
53,"model_results.setdefault(""param_count"", param_count)",0,1,52,0,0,0,0,0,0
55,"    return model_results
",0,1,25,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,"def convert(self, s: str, numRows: int) -> str:",0,1,47,0,1,0,0,0,0
3,"template = list(range(numRows)) + list(range(numRows - 2, 0, -1))",0,0,65,0,1,0,0,0,1
6,result = [''] * numRows,0,0,23,0,1,0,0,0,1
7,"for i, char in enumerate(s):",0,1,28,0,0,0,0,0,0
9,"    return ''.join(result)
",0,1,27,0,0,0,1,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
1,from typing import List,0,1,23,0,0,0,0,0,0
3,"def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:",0,1,78,0,1,0,0,0,0
4,"pair = [(p, s) for p, s in zip(position, speed)]",0,1,48,0,0,0,0,0,1
7,pair.sort(reverse=True),0,0,23,0,0,1,0,0,1
8,stack = [],0,0,10,0,0,0,0,0,1
9,"for p, s in pair:  ",0,1,19,0,0,0,0,0,0
10,stack.append((target - p) / s),0,0,30,0,1,1,0,0,0
11,if len(stack) >= 2 and stack[-1] <= stack[-2]:,0,1,46,0,1,0,0,0,0
13,"        return len(stack)
",0,1,26,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,class Solution:,0,1,15,0,0,0,0,0,0
3,"def reverse(self, x):",0,1,21,0,0,1,0,0,0
5,flag = True if x < 0 else False,0,1,31,0,0,0,0,0,1
6,if flag:,0,1,8,0,0,0,0,0,0
7,x = -x,0,0,6,0,1,0,0,0,1
8,x = str(x)[::-1],1,0,16,0,1,0,0,0,1
11,if flag:,0,1,8,0,0,0,0,0,0
12,"x = ""-"" + x",0,0,11,0,1,0,0,0,1
14,value = 2 ** 31,0,0,15,0,1,0,0,0,1
15,x = int(x),0,0,10,0,0,0,0,0,1
16,if -value <= x < value:,0,1,23,0,1,0,0,0,1
18,"        return 0
",0,1,17,0,0,0,0,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
7,"nums = [1, 2, 3, 4, 5, 10, 1]",0,0,29,0,0,0,0,0,1
8,"nums2 = [1, 2, 3, 4, 5, 10]",0,0,27,0,0,0,0,0,1
10,class Solution:,0,1,15,0,0,0,0,0,0
11,"def containsDuplicate(self, nums: list[int]) -> bool:",0,1,53,0,1,0,0,0,0
12,repeat = set(),0,0,14,0,0,0,0,0,1
14,for n in nums:,0,1,14,0,0,0,0,0,0
15,if n in nums:,0,1,13,0,0,0,0,0,0
16,return True,0,1,11,0,0,0,0,0,0
17,repeat.add(n),0,0,13,0,0,0,0,0,0
19,return False,0,1,12,0,0,0,0,0,0
21,solution = Solution(),0,0,21,0,0,0,0,0,1
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
7,class TreeNode:,0,1,15,0,0,0,0,0,0
8,"def __init__(self, x):",0,1,22,0,0,0,0,0,0
9,self.val = x,0,0,12,0,0,0,0,0,1
10,self.left = None,0,0,16,0,0,0,0,0,1
11,self.right = None,0,0,17,0,0,0,0,0,1
14,root = TreeNode(5),0,0,18,0,0,0,0,0,1
15,root.left = TreeNode(10),0,0,24,0,0,0,0,0,1
16,root.right = TreeNode(15),0,0,25,0,0,0,0,0,1
18,class Solution:,0,1,15,0,0,0,0,0,0
19,"def kthSmallest(self, root: TreeNode, k: int) -> int:",0,1,53,0,1,0,0,0,0
20,stack = [],0,0,10,0,0,0,0,0,1
21,curr = root,0,0,11,0,0,0,0,0,1
23,while stack or curr:,0,1,20,0,0,0,0,0,0
24,while curr:,0,1,11,0,0,0,0,0,0
25,stack.append(curr),0,0,18,0,0,1,0,0,0
26,curr = curr.left,0,0,16,0,0,0,0,0,1
27,curr = stack.pop(),0,0,18,0,0,1,0,0,1
28,k -= 1,0,0,6,0,1,0,0,0,1
29,if k == 0:,0,1,10,0,0,0,0,0,0
30,return curr.val,0,1,15,0,0,0,0,0,0
31,prev_val = curr.val,0,0,19,0,0,0,0,0,1
32,curr = curr.right,1,0,17,0,0,0,0,0,1
35,solution = Solution(),0,0,21,0,0,0,0,0,1
37,"answer = solution.kthSmallest(r, 1)
",0,0,36,0,0,0,0,0,1
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
7,class TreeNode:,0,1,15,0,0,0,0,0,0
8,"def __init__(self, x):",0,1,22,0,0,0,0,0,0
9,self.val = x,0,0,12,0,0,0,0,0,1
10,self.left = None,0,0,16,0,0,0,0,0,1
11,self.right = None,0,0,17,0,0,0,0,0,1
14,root = TreeNode(5),0,0,18,0,0,0,0,0,1
15,root.left = TreeNode(10),0,0,24,0,0,0,0,0,1
16,root.right = TreeNode(15),0,0,25,0,0,0,0,0,1
18,class Solution:,0,1,15,0,0,0,0,0,0
19,"def kthSmallest(self, root: TreeNode, k: int) -> int:",0,1,53,0,1,0,0,0,0
20,stack = [],0,0,10,0,0,0,0,0,1
21,curr = root,1,0,11,0,0,0,0,0,1
24,while stack or curr:,0,1,20,0,0,0,0,0,0
25,while curr:,0,1,11,0,0,0,0,0,0
26,stack.append(curr),0,0,18,0,0,1,0,0,0
27,curr = curr.left,0,0,16,0,0,0,0,0,1
28,curr = stack.pop(),0,0,18,0,0,1,0,0,1
29,k -= 1,0,0,6,0,1,0,0,0,1
30,if k == 0:,0,1,10,0,0,0,0,0,0
31,return curr.val,0,1,15,0,0,0,0,0,0
32,prev_val = curr.val,0,0,19,0,0,0,0,0,1
33,curr = curr.right,0,0,17,0,0,0,0,0,1
35,solution = Solution(),0,0,21,0,0,0,0,0,1
37,"answer = solution.kthSmallest(r, 1)
",0,0,36,0,0,0,0,0,1
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,class Solution:,0,1,15,0,0,0,0,0,0
5,"def count(self, x):",0,1,19,0,0,0,0,0,0
6,m = list(x),0,0,11,0,0,0,0,0,1
7,print(m),0,0,8,0,0,0,0,0,0
8,res = [],0,0,8,0,0,0,0,0,1
9,m.append(None),0,0,14,0,0,1,0,0,0
10,test = m[len(m) - 1],1,0,20,0,1,0,0,0,1
13,print(m),0,0,8,0,0,0,0,0,0
14,"i , j = 0 , 0",0,0,13,0,0,0,0,0,1
15,while i < len(m) - 1:,0,1,21,0,1,0,0,0,0
16,j += 1,0,0,6,0,1,0,0,0,1
17,if m[j] != m[i]:,0,1,16,0,0,0,0,0,1
19,"res += [j - i, m[i]]",0,0,20,0,1,0,0,0,1
20,i = j,0,0,5,0,0,0,0,0,1
21,return ''.join(str(s) for s in res),0,1,35,0,0,0,1,0,0
23,"Solution.count(""l"", '543')",0,0,26,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,class Solution(object):,0,1,23,0,0,0,0,0,0
4,"def lengthOfLastWord(self, s):",0,1,30,0,0,0,0,0,0
5,"""""""",0,0,3,0,0,0,0,0,0
6,:type s: str,0,0,12,0,0,0,0,0,0
7,:rtype: int,0,0,11,0,0,0,0,0,0
8,"""""""",0,0,3,0,0,0,0,0,0
9,if len(s) == 0:,0,1,15,0,0,0,0,0,0
10,return 0,0,1,8,0,0,0,0,0,0
11,temp = s.split(' '),0,0,19,0,0,0,0,0,1
12,print(temp),0,0,11,0,0,0,0,0,0
13,temp2 = [t for t in temp if len(t) > 0],1,1,39,0,0,0,0,0,1
16,print(temp),0,0,11,0,0,0,0,0,0
17,if len(temp) == 0:,0,1,18,0,0,0,0,0,0
18,return 0,0,1,8,0,0,0,0,0,0
19,else:,0,1,5,0,0,0,0,0,0
20,return len(temp[-1]),0,1,20,0,1,0,0,0,0
23,"s.lengthOfLastWord(""hell o         my name is"")",0,1,47,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,class Solution(object):,0,1,23,0,0,0,0,0,0
4,"def merge(self, intervals):",0,1,27,0,0,0,0,0,0
5,"""""""",0,0,3,0,0,0,0,0,0
6,:type intervals: List[Interval],0,0,31,0,0,0,0,0,0
7,:rtype: List[Interval],0,0,22,0,0,0,0,0,0
8,"""""""",0,0,3,0,0,0,0,0,0
9,if intervals is None:,0,1,21,0,0,0,0,0,0
10,return,0,1,6,0,0,0,0,0,0
11,ls = len(intervals),0,0,19,0,0,0,0,0,1
12,if ls <= 1:,0,1,11,0,0,0,0,0,1
13,return intervals,0,1,16,0,0,0,0,0,0
15,print(intervals),0,0,16,0,0,0,0,0,0
16,temp = intervals.sort(key=lambda x: x[0]),1,1,41,0,0,1,0,0,0
20,print(intervals),0,0,16,0,0,0,0,0,0
21,pos = 0,0,0,7,0,0,0,0,0,1
22,while pos < len(intervals) - 1:,0,1,31,0,1,0,0,0,0
24,if intervals[pos][1] >= intervals[pos + 1][0]:,0,1,46,0,1,0,0,0,1
25,next = intervals.pop(pos + 1),0,0,29,0,1,1,0,0,1
27,if next[1] > intervals[pos][1]:,0,1,31,0,0,0,0,0,0
28,intervals[pos][1] = next[1],0,0,27,0,0,0,0,0,1
30,else:,0,1,5,0,0,0,0,0,0
31,pos += 1,0,0,8,0,1,0,0,0,1
32,return intervals,0,1,16,0,0,0,0,0,0
36,"print (s.merge([[5, 10],[1,3],[2,6],[8,10],[15,18]]))",0,0,53,0,0,0,0,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
6,"example = [1, 2, 0, 0, 3]",0,0,25,0,0,0,0,0,1
7,"example2 = [1, 3, 0, 0, 3]",0,0,26,0,0,0,0,0,1
9,class JumpGame:,0,1,15,0,0,0,0,0,0
10,"def canJump(self, nums: list[int]) -> bool:",0,1,43,0,1,0,0,0,0
11,goal = len(nums) - 1,0,0,20,0,1,0,0,0,1
13,"for i in range(len(nums) - 2, -1, -1):",0,1,38,0,1,0,0,0,0
14,if i + nums[i] >= goal:,0,1,23,0,1,0,0,0,1
15,goal = i,0,0,8,0,0,0,0,0,1
16,return goal == 0,0,1,16,0,0,0,0,0,0
18,Jumper = JumpGame(),0,0,19,0,0,0,0,0,1
19,Boolean = Jumper.canJump(example),1,0,33,0,0,0,0,0,1
22,"print(Boolean)
",0,0,15,0,0,0,0,0,0
0,from inline import Here,0,1,23,0,0,0,0,0,0
2,import pandas as pd,0,1,19,0,0,0,0,0,0
4,""""""" A pie chart populated by a simple dict of values. This example demonstrates",0,0,79,0,0,1,0,0,0
5,a cumulative sum transform for computing positions for the wedges.,0,1,66,0,0,0,0,0,0
7,.. bokeh-example-metadata::,0,0,27,0,1,0,0,0,0
8,":apis: bokeh.transform.cumsum, bokeh.plotting.figure.wedge",0,1,58,1,0,0,0,0,0
9,:refs: :ref:`userguide_plotting` > :ref:`userguide_plotting_wedges_arcs`,0,0,72,0,0,0,0,0,0
10,":keywords: cumsum, pandas, pie, wedge",0,1,37,0,0,0,0,0,0
12,"""""""",0,0,3,0,0,0,0,0,0
13,def __main__():,0,1,15,0,0,0,0,0,0
14,from math import pi,0,1,19,0,0,0,0,0,0
16,import pandas as pd,0,1,19,0,0,0,0,0,0
18,from bokeh.palettes import Category20c,0,1,38,0,0,0,0,0,0
19,"from bokeh.plotting import figure, show",0,1,39,0,0,0,0,0,0
20,from bokeh.transform import cumsum,0,1,34,0,0,0,0,0,0
22,x = {,0,0,5,0,0,0,0,0,1
23,"""United States"": 157,",0,0,21,0,0,0,0,0,0
24,"""United Kingdom"": 93,",0,0,21,0,0,0,0,0,0
25,"""Japan"": 89,",0,0,12,0,0,0,0,0,0
26,"""China"": 63,",0,0,12,0,0,0,0,0,0
27,"""Germany"": 44,",0,0,14,0,0,0,0,0,0
28,"""India"": 42,",0,0,12,0,0,0,0,0,0
29,"""Italy"": 40,",0,0,12,0,0,0,0,0,0
30,"""Australia"": 35,",0,0,16,0,0,0,0,0,0
31,"""Brazil"": 32,",0,0,13,0,0,0,0,0,0
32,"""France"": 31,",0,0,13,0,0,0,0,0,0
33,"""Taiwan"": 31,",0,0,13,0,0,0,0,0,0
34,"""Spain"": 29,",0,0,12,0,0,0,0,0,0
35,},0,0,1,0,0,0,0,0,0
37,"data = pd.Series(x).reset_index(name=""value"").rename(columns={""index"": ""country""})",0,1,82,0,0,0,0,0,0
38,"data[""angle""] = data[""value""] / data[""value""].sum() * 2 * pi",1,0,60,0,1,0,0,0,1
40,"data[""color""] = Category20c[len(x)]",0,0,35,0,0,0,0,0,1
42,p = figure(,0,0,11,0,0,0,0,0,1
43,"height=350,",0,0,11,0,0,0,0,0,1
44,"title=""Pie Chart"",",0,0,18,0,0,0,0,0,1
45,"toolbar_location=None,",0,0,22,0,0,0,0,0,1
46,"tools=""hover"",",0,0,14,0,0,0,0,0,1
47,"tooltips=""@country: @value"",",0,1,28,0,0,0,0,0,1
48,"x_range=(-0.5, 1.0),",0,0,20,0,1,0,0,0,1
49,),0,0,1,0,0,0,0,0,0
51,p.wedge(,0,0,8,0,0,0,0,0,0
52,"x=0,",0,0,4,0,0,0,0,0,1
53,"y=1,",0,0,4,0,0,0,0,0,1
54,"radius=0.4,",0,0,11,0,0,0,0,0,1
55,"start_angle=cumsum(""angle"", include_zero=True),",0,0,47,0,0,0,0,0,0
56,"end_angle=cumsum(""angle""),",0,0,26,0,0,0,0,0,1
57,"line_color=""white"",",0,0,19,0,0,0,0,0,1
58,"fill_color=""color"",",0,0,19,0,0,0,0,0,1
59,"legend_field=""country"",",0,1,23,0,0,0,0,0,1
60,"source=data,",0,0,12,0,0,0,0,0,1
61,),0,0,1,0,0,0,0,0,0
63,p.axis.axis_label = None,0,0,24,0,0,0,0,0,1
64,p.axis.visible = False,0,0,22,0,0,0,0,0,1
65,p.grid.grid_line_color = None,0,0,29,0,0,0,0,0,1
67,"    show(p)
",0,0,12,0,0,0,0,0,0
0,import math,0,1,11,0,0,0,0,0,0
1,import sys,0,1,10,0,0,0,0,0,0
2,from inline import Here,0,1,23,0,0,0,0,0,0
8,"case = [2, 3, 7, 11]",0,1,20,0,0,0,0,0,1
10,class bananas:,0,1,14,0,0,0,0,0,0
11,"def minEatingSpeed(self, piles: list[int], h: int) -> int:",0,1,58,0,1,0,0,0,0
12,"l, r = 1, max(piles)",0,0,20,0,0,0,0,0,1
13,res = max(piles),0,0,16,0,0,0,0,0,1
15,while l <= r:,0,1,13,0,0,0,0,0,1
16,k = (l + r) // 2,0,0,16,0,1,0,0,0,1
18,totalTime = 0,0,0,13,0,0,0,0,0,1
19,for p in piles:,0,1,15,0,0,0,0,0,0
20,totalTime += math.ceil(p / k),0,0,29,0,1,0,0,0,1
21,if totalTime <= h:,0,1,18,0,0,0,0,0,1
22,"res = min(res, k)",0,0,17,0,0,0,0,0,1
23,r = k - 1,0,0,9,0,1,0,0,0,1
24,else:,0,1,5,0,0,0,0,0,0
25,l = k + 1,0,0,9,0,1,0,0,0,1
26,return res,0,1,10,0,0,0,0,0,0
28,solution = bananas(),0,1,20,0,0,0,0,0,1
29,time = 8,0,0,8,0,0,0,0,0,1
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
7,"ex = [-1, -1, 2]",0,0,16,0,1,0,0,0,1
9,class sol:,0,1,10,0,0,0,0,0,0
10,"def threeSum(self, nums: list[int]) -> list[list[int]]:",0,1,55,0,1,0,0,0,0
11,res = [],0,0,8,0,0,0,0,0,1
12,nums.sort(),0,0,11,0,0,1,0,0,0
14,"for i, a in enumerate(nums):",0,1,28,0,0,0,0,0,0
16,if a > 0:,0,1,9,0,0,0,0,0,0
17,break,0,1,5,0,0,0,0,0,0
19,if i > 0 and a == nums[i - 1]:,0,1,30,0,1,0,0,0,0
20,continue,0,1,8,0,0,0,0,0,0
22,"l, r = i + 1, len(nums) - 1",0,0,27,0,1,0,0,0,1
23,while l < r:,0,1,12,0,0,0,0,0,0
24,threeSum = a + nums[l] + nums[r],0,0,32,0,1,0,0,0,1
25,if threeSum > 0:,0,1,16,0,0,0,0,0,0
26,r -= 1,0,0,6,0,1,0,0,0,1
27,elif threeSum < 0:,0,1,18,0,0,0,0,0,0
28,l += 1,0,0,6,0,1,0,0,0,1
29,else:,0,1,5,0,0,0,0,0,0
30,"res.append([a, nums[l], nums[r]])",0,0,33,0,0,1,0,0,0
31,check = a + nums[l] + nums[r],1,0,29,0,1,0,0,0,1
33,l += 1,0,0,6,0,1,0,0,0,1
34,r -= 1,0,0,6,0,1,0,0,0,1
35,while nums[l] == nums[l - 1] and l < r:,0,1,39,0,1,0,0,0,0
36,l += 1,0,0,6,0,1,0,0,0,1
37,return res,0,1,10,0,0,0,0,0,0
39,obj = sol(),0,0,11,0,0,0,0,0,1
41,"print(trio)
",0,0,12,0,0,0,0,0,0
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
6,class ListNode:,0,1,15,0,0,0,0,0,0
7,"def __init__(self, x):",0,1,22,0,0,0,0,0,0
8,self.val = x,0,0,12,0,0,0,0,0,1
9,self.next = None,0,0,16,0,0,0,0,0,1
12,Root = ListNode(1),0,0,18,0,0,0,0,0,1
13,Root.next = ListNode(2),0,0,23,0,0,0,0,0,1
14,Root.next.next = Root,0,0,21,0,0,0,0,0,1
16,Root2 = ListNode(1),0,0,19,0,0,0,0,0,1
17,Root2.next = ListNode(2),0,0,24,0,0,0,0,0,1
18,Root2.next.next = ListNode(3),0,0,29,0,0,0,0,0,1
20,class Solution:,0,1,15,0,0,0,0,0,0
21,"def hasCycle(self, head: ListNode) -> bool:",0,1,43,0,1,0,0,0,0
22,"slow, fast = head, head",0,1,23,0,0,0,0,0,1
24,while fast and fast.next:,0,1,25,0,0,0,0,0,0
25,slow = slow.next,0,0,16,0,0,0,0,0,1
26,fast = fast.next.next,0,1,21,0,0,0,0,0,1
27,if slow == fast:,0,1,16,0,0,0,0,0,0
28,x = slow,0,0,8,0,0,0,0,0,1
29,return True,0,1,11,0,0,0,0,0,0
30,return False,0,1,12,0,0,0,0,0,0
32,obj = Solution(),0,0,16,0,0,0,0,0,1
0,import sys,0,1,10,0,0,0,0,0,0
1,from inline import Here,0,1,23,0,0,0,0,0,0
3,input_list = sys.argv[1:],0,0,25,0,0,0,0,0,1
4,"result = list(map(str.split(""$""), input_list))",1,0,46,0,0,0,0,0,1
7,    ),0,0,1,0,0,0,0,0,0
